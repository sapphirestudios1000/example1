/* Generated By:JavaCC: Do not edit this line. FOMTokenManager.java */
package org.portico.impl.hla13.fomparser;

public class FOMTokenManager implements FOMConstants
{
	public java.io.PrintStream debugStream = System.out;

	public void setDebugStream( java.io.PrintStream ds )
	{
		debugStream = ds;
	}

	private final int jjStopStringLiteralDfa_0( int pos, long active0 )
	{
		switch( pos )
		{
			case 0:
				if( (active0 & 0x100L) != 0L )
					return 6;
				if( (active0 & 0x7e00000L) != 0L )
				{
					jjmatchedKind = 27;
					return 89;
				}
				return -1;
			case 1:
				if( (active0 & 0x7e00000L) != 0L )
				{
					jjmatchedKind = 27;
					jjmatchedPos = 1;
					return 89;
				}
				return -1;
			case 2:
				if( (active0 & 0x7c00000L) != 0L )
				{
					jjmatchedKind = 27;
					jjmatchedPos = 2;
					return 89;
				}
				if( (active0 & 0x200000L) != 0L )
				{
					if( jjmatchedPos < 1 )
					{
						jjmatchedKind = 27;
						jjmatchedPos = 1;
					}
					return -1;
				}
				return -1;
			case 3:
				if( (active0 & 0x400000L) != 0L )
					return 89;
				if( (active0 & 0x200000L) != 0L )
				{
					if( jjmatchedPos < 1 )
					{
						jjmatchedKind = 27;
						jjmatchedPos = 1;
					}
					return -1;
				}
				if( (active0 & 0x7800000L) != 0L )
				{
					jjmatchedKind = 27;
					jjmatchedPos = 3;
					return 89;
				}
				return -1;
			case 4:
				if( (active0 & 0x7800000L) != 0L )
				{
					jjmatchedKind = 27;
					jjmatchedPos = 4;
					return 89;
				}
				return -1;
			case 5:
				if( (active0 & 0x7800000L) != 0L )
				{
					jjmatchedKind = 27;
					jjmatchedPos = 5;
					return 89;
				}
				return -1;
			case 6:
				if( (active0 & 0x4000000L) != 0L )
					return 89;
				if( (active0 & 0x3800000L) != 0L )
				{
					jjmatchedKind = 27;
					jjmatchedPos = 6;
					return 89;
				}
				return -1;
			case 7:
				if( (active0 & 0x800000L) != 0L )
					return 89;
				if( (active0 & 0x3000000L) != 0L )
				{
					jjmatchedKind = 27;
					jjmatchedPos = 7;
					return 89;
				}
				return -1;
			case 8:
				if( (active0 & 0x1000000L) != 0L )
				{
					jjmatchedKind = 27;
					jjmatchedPos = 8;
					return 89;
				}
				if( (active0 & 0x2000000L) != 0L )
					return 89;
				return -1;
			case 9:
				if( (active0 & 0x1000000L) != 0L )
				{
					jjmatchedKind = 27;
					jjmatchedPos = 9;
					return 89;
				}
				return -1;
			default:
				return -1;
		}
	}

	private final int jjStartNfa_0( int pos, long active0 )
	{
		return jjMoveNfa_0( jjStopStringLiteralDfa_0( pos, active0 ), pos + 1 );
	}

	private final int jjStopAtPos( int pos, int kind )
	{
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private final int jjStartNfaWithStates_0( int pos, int kind, int state )
	{
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try
		{
			curChar = input_stream.readChar();
		}
		catch( java.io.IOException e )
		{
			return pos + 1;
		}
		return jjMoveNfa_0( state, pos + 1 );
	}

	private final int jjMoveStringLiteralDfa0_0()
	{
		switch( curChar )
		{
			case 40:
				return jjStartNfaWithStates_0( 0, 8, 6 );
			case 41:
				return jjStopAtPos( 0, 9 );
			case 59:
				return jjMoveStringLiteralDfa1_0( 0x2L );
			case 98:
				return jjMoveStringLiteralDfa1_0( 0x1000000L );
			case 114:
				return jjMoveStringLiteralDfa1_0( 0x4800000L );
			case 116:
				return jjMoveStringLiteralDfa1_0( 0x2000000L );
			case 118:
				return jjMoveStringLiteralDfa1_0( 0x600000L );
			default:
				return jjMoveNfa_0( 0, 0 );
		}
	}

	private final int jjMoveStringLiteralDfa1_0( long active0 )
	{
		try
		{
			curChar = input_stream.readChar();
		}
		catch( java.io.IOException e )
		{
			jjStopStringLiteralDfa_0( 0, active0 );
			return 1;
		}
		switch( curChar )
		{
			case 49:
				return jjMoveStringLiteralDfa2_0( active0, 0x600000L );
			case 59:
				if( (active0 & 0x2L) != 0L )
					return jjStopAtPos( 1, 1 );
				break;
			case 101:
				return jjMoveStringLiteralDfa2_0( active0, 0x5800000L );
			case 105:
				return jjMoveStringLiteralDfa2_0( active0, 0x2000000L );
			default:
				break;
		}
		return jjStartNfa_0( 0, active0 );
	}

	private final int jjMoveStringLiteralDfa2_0( long old0, long active0 )
	{
		if( ((active0 &= old0)) == 0L )
			return jjStartNfa_0( 0, old0 );
		try
		{
			curChar = input_stream.readChar();
		}
		catch( java.io.IOException e )
		{
			jjStopStringLiteralDfa_0( 1, active0 );
			return 2;
		}
		switch( curChar )
		{
			case 46:
				return jjMoveStringLiteralDfa3_0( active0, 0x200000L );
			case 95:
				return jjMoveStringLiteralDfa3_0( active0, 0x400000L );
			case 99:
				return jjMoveStringLiteralDfa3_0( active0, 0x4000000L );
			case 108:
				return jjMoveStringLiteralDfa3_0( active0, 0x800000L );
			case 109:
				return jjMoveStringLiteralDfa3_0( active0, 0x2000000L );
			case 115:
				return jjMoveStringLiteralDfa3_0( active0, 0x1000000L );
			default:
				break;
		}
		return jjStartNfa_0( 1, active0 );
	}

	private final int jjMoveStringLiteralDfa3_0( long old0, long active0 )
	{
		if( ((active0 &= old0)) == 0L )
			return jjStartNfa_0( 1, old0 );
		try
		{
			curChar = input_stream.readChar();
		}
		catch( java.io.IOException e )
		{
			jjStopStringLiteralDfa_0( 2, active0 );
			return 3;
		}
		switch( curChar )
		{
			case 51:
				if( (active0 & 0x200000L) != 0L )
					return jjStopAtPos( 3, 21 );
				else if( (active0 & 0x400000L) != 0L )
					return jjStartNfaWithStates_0( 3, 22, 89 );
				break;
			case 101:
				return jjMoveStringLiteralDfa4_0( active0, 0x6000000L );
			case 105:
				return jjMoveStringLiteralDfa4_0( active0, 0x800000L );
			case 116:
				return jjMoveStringLiteralDfa4_0( active0, 0x1000000L );
			default:
				break;
		}
		return jjStartNfa_0( 2, active0 );
	}

	private final int jjMoveStringLiteralDfa4_0( long old0, long active0 )
	{
		if( ((active0 &= old0)) == 0L )
			return jjStartNfa_0( 2, old0 );
		try
		{
			curChar = input_stream.readChar();
		}
		catch( java.io.IOException e )
		{
			jjStopStringLiteralDfa_0( 3, active0 );
			return 4;
		}
		switch( curChar )
		{
			case 95:
				return jjMoveStringLiteralDfa5_0( active0, 0x1000000L );
			case 97:
				return jjMoveStringLiteralDfa5_0( active0, 0x800000L );
			case 105:
				return jjMoveStringLiteralDfa5_0( active0, 0x4000000L );
			case 115:
				return jjMoveStringLiteralDfa5_0( active0, 0x2000000L );
			default:
				break;
		}
		return jjStartNfa_0( 3, active0 );
	}

	private final int jjMoveStringLiteralDfa5_0( long old0, long active0 )
	{
		if( ((active0 &= old0)) == 0L )
			return jjStartNfa_0( 3, old0 );
		try
		{
			curChar = input_stream.readChar();
		}
		catch( java.io.IOException e )
		{
			jjStopStringLiteralDfa_0( 4, active0 );
			return 5;
		}
		switch( curChar )
		{
			case 98:
				return jjMoveStringLiteralDfa6_0( active0, 0x800000L );
			case 101:
				return jjMoveStringLiteralDfa6_0( active0, 0x1000000L );
			case 116:
				return jjMoveStringLiteralDfa6_0( active0, 0x2000000L );
			case 118:
				return jjMoveStringLiteralDfa6_0( active0, 0x4000000L );
			default:
				break;
		}
		return jjStartNfa_0( 4, active0 );
	}

	private final int jjMoveStringLiteralDfa6_0( long old0, long active0 )
	{
		if( ((active0 &= old0)) == 0L )
			return jjStartNfa_0( 4, old0 );
		try
		{
			curChar = input_stream.readChar();
		}
		catch( java.io.IOException e )
		{
			jjStopStringLiteralDfa_0( 5, active0 );
			return 6;
		}
		switch( curChar )
		{
			case 97:
				return jjMoveStringLiteralDfa7_0( active0, 0x2000000L );
			case 101:
				if( (active0 & 0x4000000L) != 0L )
					return jjStartNfaWithStates_0( 6, 26, 89 );
				break;
			case 102:
				return jjMoveStringLiteralDfa7_0( active0, 0x1000000L );
			case 108:
				return jjMoveStringLiteralDfa7_0( active0, 0x800000L );
			default:
				break;
		}
		return jjStartNfa_0( 5, active0 );
	}

	private final int jjMoveStringLiteralDfa7_0( long old0, long active0 )
	{
		if( ((active0 &= old0)) == 0L )
			return jjStartNfa_0( 5, old0 );
		try
		{
			curChar = input_stream.readChar();
		}
		catch( java.io.IOException e )
		{
			jjStopStringLiteralDfa_0( 6, active0 );
			return 7;
		}
		switch( curChar )
		{
			case 101:
				if( (active0 & 0x800000L) != 0L )
					return jjStartNfaWithStates_0( 7, 23, 89 );
				break;
			case 102:
				return jjMoveStringLiteralDfa8_0( active0, 0x1000000L );
			case 109:
				return jjMoveStringLiteralDfa8_0( active0, 0x2000000L );
			default:
				break;
		}
		return jjStartNfa_0( 6, active0 );
	}

	private final int jjMoveStringLiteralDfa8_0( long old0, long active0 )
	{
		if( ((active0 &= old0)) == 0L )
			return jjStartNfa_0( 6, old0 );
		try
		{
			curChar = input_stream.readChar();
		}
		catch( java.io.IOException e )
		{
			jjStopStringLiteralDfa_0( 7, active0 );
			return 8;
		}
		switch( curChar )
		{
			case 111:
				return jjMoveStringLiteralDfa9_0( active0, 0x1000000L );
			case 112:
				if( (active0 & 0x2000000L) != 0L )
					return jjStartNfaWithStates_0( 8, 25, 89 );
				break;
			default:
				break;
		}
		return jjStartNfa_0( 7, active0 );
	}

	private final int jjMoveStringLiteralDfa9_0( long old0, long active0 )
	{
		if( ((active0 &= old0)) == 0L )
			return jjStartNfa_0( 7, old0 );
		try
		{
			curChar = input_stream.readChar();
		}
		catch( java.io.IOException e )
		{
			jjStopStringLiteralDfa_0( 8, active0 );
			return 9;
		}
		switch( curChar )
		{
			case 114:
				return jjMoveStringLiteralDfa10_0( active0, 0x1000000L );
			default:
				break;
		}
		return jjStartNfa_0( 8, active0 );
	}

	private final int jjMoveStringLiteralDfa10_0( long old0, long active0 )
	{
		if( ((active0 &= old0)) == 0L )
			return jjStartNfa_0( 8, old0 );
		try
		{
			curChar = input_stream.readChar();
		}
		catch( java.io.IOException e )
		{
			jjStopStringLiteralDfa_0( 9, active0 );
			return 10;
		}
		switch( curChar )
		{
			case 116:
				if( (active0 & 0x1000000L) != 0L )
					return jjStartNfaWithStates_0( 10, 24, 89 );
				break;
			default:
				break;
		}
		return jjStartNfa_0( 9, active0 );
	}

	private final void jjCheckNAdd( int state )
	{
		if( jjrounds[state] != jjround )
		{
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private final void jjAddStates( int start, int end )
	{
		do
		{
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		}
		while( start++ != end );
	}

	private final int jjMoveNfa_0( int startState, int curPos )
	{
		int startsAt = 0;
		jjnewStateCnt = 90;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for( ;; )
		{
			if( ++jjround == 0x7fffffff )
				ReInitRounds();
			if( curChar < 64 )
			{
				long l = 1L << curChar;
				MatchLoop: do
				{
					switch( jjstateSet[--i] )
					{
						case 0:
							if( (0x3ffa84a00000000L & l) != 0L )
							{
								if( kind > 27 )
									kind = 27;
								jjCheckNAdd( 89 );
							}
							else if( curChar == 40 )
								jjAddStates( 0, 10 );
							if( (0x3ff000000000000L & l) != 0L )
							{
								if( kind > 30 )
									kind = 30;
							}
							else if( (0xa84a00000000L & l) != 0L )
							{
								if( kind > 31 )
									kind = 31;
							}
							break;
						case 1:
							if( (0x3ff000000000000L & l) != 0L && kind > 30 )
								kind = 30;
							break;
						case 2:
							if( (0xa84a00000000L & l) != 0L && kind > 31 )
								kind = 31;
							break;
						case 3:
							if( curChar == 40 )
								jjAddStates( 0, 10 );
							break;
						case 89:
							if( (0x3ffa84a00000000L & l) == 0L )
								break;
							if( kind > 27 )
								kind = 27;
							jjCheckNAdd( 89 );
							break;
						default:
							break;
					}
				}
				while( i != startsAt );
			}
			else if( curChar < 128 )
			{
				long l = 1L << (curChar & 077);
				MatchLoop: do
				{
					switch( jjstateSet[--i] )
					{
						case 0:
							if( (0x47fffffe87ffffffL & l) != 0L )
							{
								if( kind > 27 )
									kind = 27;
								jjCheckNAdd( 89 );
							}
							if( (0x7fffffe07fffffeL & l) != 0L )
							{
								if( kind > 29 )
									kind = 29;
							}
							else if( (0x4000000080000001L & l) != 0L )
							{
								if( kind > 31 )
									kind = 31;
							}
							break;
						case 6:
							if( curChar == 112 )
								jjstateSet[jjnewStateCnt++] = 87;
							else if( curChar == 105 )
								jjstateSet[jjnewStateCnt++] = 78;
							else if( curChar == 97 )
								jjstateSet[jjnewStateCnt++] = 66;
							else if( curChar == 99 )
								jjstateSet[jjnewStateCnt++] = 57;
							else if( curChar == 111 )
								jjstateSet[jjnewStateCnt++] = 52;
							else if( curChar == 100 )
								jjstateSet[jjnewStateCnt++] = 45;
							else if( curChar == 115 )
								jjstateSet[jjnewStateCnt++] = 36;
							else if( curChar == 70 )
								jjstateSet[jjnewStateCnt++] = 25;
							if( curChar == 115 )
								jjstateSet[jjnewStateCnt++] = 31;
							else if( curChar == 70 )
								jjstateSet[jjnewStateCnt++] = 15;
							if( curChar == 70 )
								jjstateSet[jjnewStateCnt++] = 5;
							break;
						case 2:
							if( (0x4000000080000001L & l) != 0L && kind > 31 )
								kind = 31;
							break;
						case 4:
							if( curChar == 68 && kind > 10 )
								kind = 10;
							break;
						case 5:
							if( curChar == 69 )
								jjstateSet[jjnewStateCnt++] = 4;
							break;
						case 7:
							if( curChar == 110 && kind > 11 )
								kind = 11;
							break;
						case 8:
							if( curChar == 111 )
								jjstateSet[jjnewStateCnt++] = 7;
							break;
						case 9:
							if( curChar == 105 )
								jjstateSet[jjnewStateCnt++] = 8;
							break;
						case 10:
							if( curChar == 116 )
								jjstateSet[jjnewStateCnt++] = 9;
							break;
						case 11:
							if( curChar == 97 )
								jjstateSet[jjnewStateCnt++] = 10;
							break;
						case 12:
							if( curChar == 114 )
								jjstateSet[jjnewStateCnt++] = 11;
							break;
						case 13:
							if( curChar == 101 )
								jjstateSet[jjnewStateCnt++] = 12;
							break;
						case 14:
							if( curChar == 100 )
								jjstateSet[jjnewStateCnt++] = 13;
							break;
						case 15:
							if( curChar == 101 )
								jjstateSet[jjnewStateCnt++] = 14;
							break;
						case 16:
							if( curChar == 70 )
								jjstateSet[jjnewStateCnt++] = 15;
							break;
						case 17:
							if( curChar == 110 && kind > 12 )
								kind = 12;
							break;
						case 18:
							if( curChar == 111 )
								jjstateSet[jjnewStateCnt++] = 17;
							break;
						case 19:
							if( curChar == 105 )
								jjstateSet[jjnewStateCnt++] = 18;
							break;
						case 20:
							if( curChar == 115 )
								jjstateSet[jjnewStateCnt++] = 19;
							break;
						case 21:
							if( curChar == 114 )
								jjstateSet[jjnewStateCnt++] = 20;
							break;
						case 22:
							if( curChar == 101 )
								jjstateSet[jjnewStateCnt++] = 21;
							break;
						case 23:
							if( curChar == 118 )
								jjstateSet[jjnewStateCnt++] = 22;
							break;
						case 24:
							if( curChar == 68 )
								jjstateSet[jjnewStateCnt++] = 23;
							break;
						case 25:
							if( curChar == 69 )
								jjstateSet[jjnewStateCnt++] = 24;
							break;
						case 26:
							if( curChar == 70 )
								jjstateSet[jjnewStateCnt++] = 25;
							break;
						case 27:
							if( curChar == 115 && kind > 13 )
								kind = 13;
							break;
						case 28:
							if( curChar == 101 )
								jjstateSet[jjnewStateCnt++] = 27;
							break;
						case 29:
							if( curChar == 99 )
								jjstateSet[jjnewStateCnt++] = 28;
							break;
						case 30:
							if( curChar == 97 )
								jjstateSet[jjnewStateCnt++] = 29;
							break;
						case 31:
							if( curChar == 112 )
								jjstateSet[jjnewStateCnt++] = 30;
							break;
						case 32:
							if( curChar == 115 )
								jjstateSet[jjnewStateCnt++] = 31;
							break;
						case 33:
							if( curChar == 101 && kind > 14 )
								kind = 14;
							break;
						case 34:
							if( curChar == 99 )
								jjstateSet[jjnewStateCnt++] = 33;
							break;
						case 35:
							if( curChar == 97 )
								jjstateSet[jjnewStateCnt++] = 34;
							break;
						case 36:
							if( curChar == 112 )
								jjstateSet[jjnewStateCnt++] = 35;
							break;
						case 37:
							if( curChar == 115 )
								jjstateSet[jjnewStateCnt++] = 36;
							break;
						case 38:
							if( curChar == 110 && kind > 15 )
								kind = 15;
							break;
						case 39:
							if( curChar == 111 )
								jjstateSet[jjnewStateCnt++] = 38;
							break;
						case 40:
							if( curChar == 105 )
								jjstateSet[jjnewStateCnt++] = 39;
							break;
						case 41:
							if( curChar == 115 )
								jjstateSet[jjnewStateCnt++] = 40;
							break;
						case 42:
							if( curChar == 110 )
								jjstateSet[jjnewStateCnt++] = 41;
							break;
						case 43:
							if( curChar == 101 )
								jjstateSet[jjnewStateCnt++] = 42;
							break;
						case 44:
							if( curChar == 109 )
								jjstateSet[jjnewStateCnt++] = 43;
							break;
						case 45:
							if( curChar == 105 )
								jjstateSet[jjnewStateCnt++] = 44;
							break;
						case 46:
							if( curChar == 100 )
								jjstateSet[jjnewStateCnt++] = 45;
							break;
						case 47:
							if( curChar == 115 && kind > 16 )
								kind = 16;
							break;
						case 48:
							if( curChar == 116 )
								jjstateSet[jjnewStateCnt++] = 47;
							break;
						case 49:
							if( curChar == 99 )
								jjstateSet[jjnewStateCnt++] = 48;
							break;
						case 50:
							if( curChar == 101 )
								jjstateSet[jjnewStateCnt++] = 49;
							break;
						case 51:
							if( curChar == 106 )
								jjstateSet[jjnewStateCnt++] = 50;
							break;
						case 52:
							if( curChar == 98 )
								jjstateSet[jjnewStateCnt++] = 51;
							break;
						case 53:
							if( curChar == 111 )
								jjstateSet[jjnewStateCnt++] = 52;
							break;
						case 54:
							if( curChar == 115 && kind > 17 )
								kind = 17;
							break;
						case 55:
							if( curChar == 115 )
								jjstateSet[jjnewStateCnt++] = 54;
							break;
						case 56:
							if( curChar == 97 )
								jjstateSet[jjnewStateCnt++] = 55;
							break;
						case 57:
							if( curChar == 108 )
								jjstateSet[jjnewStateCnt++] = 56;
							break;
						case 58:
							if( curChar == 99 )
								jjstateSet[jjnewStateCnt++] = 57;
							break;
						case 59:
							if( curChar == 101 && kind > 18 )
								kind = 18;
							break;
						case 60:
							if( curChar == 116 )
								jjstateSet[jjnewStateCnt++] = 59;
							break;
						case 61:
							if( curChar == 117 )
								jjstateSet[jjnewStateCnt++] = 60;
							break;
						case 62:
							if( curChar == 98 )
								jjstateSet[jjnewStateCnt++] = 61;
							break;
						case 63:
							if( curChar == 105 )
								jjstateSet[jjnewStateCnt++] = 62;
							break;
						case 64:
							if( curChar == 114 )
								jjstateSet[jjnewStateCnt++] = 63;
							break;
						case 65:
							if( curChar == 116 )
								jjstateSet[jjnewStateCnt++] = 64;
							break;
						case 66:
							if( curChar == 116 )
								jjstateSet[jjnewStateCnt++] = 65;
							break;
						case 67:
							if( curChar == 97 )
								jjstateSet[jjnewStateCnt++] = 66;
							break;
						case 68:
							if( curChar == 115 && kind > 19 )
								kind = 19;
							break;
						case 69:
							if( curChar == 110 )
								jjstateSet[jjnewStateCnt++] = 68;
							break;
						case 70:
							if( curChar == 111 )
								jjstateSet[jjnewStateCnt++] = 69;
							break;
						case 71:
							if( curChar == 105 )
								jjstateSet[jjnewStateCnt++] = 70;
							break;
						case 72:
							if( curChar == 116 )
								jjstateSet[jjnewStateCnt++] = 71;
							break;
						case 73:
							if( curChar == 99 )
								jjstateSet[jjnewStateCnt++] = 72;
							break;
						case 74:
							if( curChar == 97 )
								jjstateSet[jjnewStateCnt++] = 73;
							break;
						case 75:
							if( curChar == 114 )
								jjstateSet[jjnewStateCnt++] = 74;
							break;
						case 76:
							if( curChar == 101 )
								jjstateSet[jjnewStateCnt++] = 75;
							break;
						case 77:
							if( curChar == 116 )
								jjstateSet[jjnewStateCnt++] = 76;
							break;
						case 78:
							if( curChar == 110 )
								jjstateSet[jjnewStateCnt++] = 77;
							break;
						case 79:
							if( curChar == 105 )
								jjstateSet[jjnewStateCnt++] = 78;
							break;
						case 80:
							if( curChar == 114 && kind > 20 )
								kind = 20;
							break;
						case 81:
							if( curChar == 101 )
								jjstateSet[jjnewStateCnt++] = 80;
							break;
						case 82:
							if( curChar == 116 )
								jjstateSet[jjnewStateCnt++] = 81;
							break;
						case 83:
							if( curChar == 101 )
								jjstateSet[jjnewStateCnt++] = 82;
							break;
						case 84:
							if( curChar == 109 )
								jjstateSet[jjnewStateCnt++] = 83;
							break;
						case 85:
							if( curChar == 97 )
								jjstateSet[jjnewStateCnt++] = 84;
							break;
						case 86:
							if( curChar == 114 )
								jjstateSet[jjnewStateCnt++] = 85;
							break;
						case 87:
							if( curChar == 97 )
								jjstateSet[jjnewStateCnt++] = 86;
							break;
						case 88:
							if( curChar == 112 )
								jjstateSet[jjnewStateCnt++] = 87;
							break;
						case 89:
							if( (0x47fffffe87ffffffL & l) == 0L )
								break;
							if( kind > 27 )
								kind = 27;
							jjCheckNAdd( 89 );
							break;
						default:
							break;
					}
				}
				while( i != startsAt );
			}
			else
			{
				MatchLoop: do
				{
					switch( jjstateSet[--i] )
					{
						default:
							break;
					}
				}
				while( i != startsAt );
			}
			if( kind != 0x7fffffff )
			{
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if( (i = jjnewStateCnt) == (startsAt = 90 - (jjnewStateCnt = startsAt)) )
				return curPos;
			try
			{
				curChar = input_stream.readChar();
			}
			catch( java.io.IOException e )
			{
				return curPos;
			}
		}
	}

	private final int jjMoveStringLiteralDfa0_1()
	{
		return jjMoveNfa_1( 0, 0 );
	}

	private final int jjMoveNfa_1( int startState, int curPos )
	{
		int startsAt = 0;
		jjnewStateCnt = 3;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for( ;; )
		{
			if( ++jjround == 0x7fffffff )
				ReInitRounds();
			if( curChar < 64 )
			{
				long l = 1L << curChar;
				MatchLoop: do
				{
					switch( jjstateSet[--i] )
					{
						case 0:
							if( (0x2400L & l) != 0L )
							{
								if( kind > 2 )
									kind = 2;
							}
							if( curChar == 13 )
								jjstateSet[jjnewStateCnt++] = 1;
							break;
						case 1:
							if( curChar == 10 && kind > 2 )
								kind = 2;
							break;
						case 2:
							if( curChar == 13 )
								jjstateSet[jjnewStateCnt++] = 1;
							break;
						default:
							break;
					}
				}
				while( i != startsAt );
			}
			else if( curChar < 128 )
			{
				MatchLoop: do
				{
					switch( jjstateSet[--i] )
					{
						default:
							break;
					}
				}
				while( i != startsAt );
			}
			else
			{
				MatchLoop: do
				{
					switch( jjstateSet[--i] )
					{
						default:
							break;
					}
				}
				while( i != startsAt );
			}
			if( kind != 0x7fffffff )
			{
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if( (i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)) )
				return curPos;
			try
			{
				curChar = input_stream.readChar();
			}
			catch( java.io.IOException e )
			{
				return curPos;
			}
		}
	}

	static final int[] jjnextStates = { 6, 16, 26, 32, 37, 46, 53, 58, 67, 79, 88, };
	public static final String[] jjstrLiteralImages =
	    { "", null, null, null, null, null, null, null, "\50", "\51", null, null, null, null, null,
	     null, null, null, null, null, null, "\166\61\56\63", "\166\61\137\63",
	     "\162\145\154\151\141\142\154\145", "\142\145\163\164\137\145\146\146\157\162\164",
	     "\164\151\155\145\163\164\141\155\160", "\162\145\143\145\151\166\145", null, null, null,
	     null, null, };
	public static final String[] lexStateNames = { "DEFAULT", "IN_SINGLE_LINE_COMMENT", };
	public static final int[] jjnewLexState =
	    { -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	     -1, -1, -1, -1, -1, -1, -1, -1, -1, };
	static final long[] jjtoToken = { 0xffffff01L, };
	static final long[] jjtoSkip = { 0xf4L, };
	static final long[] jjtoSpecial = { 0x4L, };
	static final long[] jjtoMore = { 0xaL, };
	protected SimpleCharStream input_stream;
	private final int[] jjrounds = new int[90];
	private final int[] jjstateSet = new int[180];
	StringBuffer image;
	int jjimageLen;
	int lengthOfMatch;
	protected char curChar;

	public FOMTokenManager( SimpleCharStream stream )
	{
		if( SimpleCharStream.staticFlag )
			throw new Error(
			                 "ERROR: Cannot use a static CharStream class with a non-static lexical analyzer." );
		input_stream = stream;
	}

	public FOMTokenManager( SimpleCharStream stream, int lexState )
	{
		this( stream );
		SwitchTo( lexState );
	}

	public void ReInit( SimpleCharStream stream )
	{
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private final void ReInitRounds()
	{
		int i;
		jjround = 0x80000001;
		for( i = 90; i-- > 0; )
			jjrounds[i] = 0x80000000;
	}

	public void ReInit( SimpleCharStream stream, int lexState )
	{
		ReInit( stream );
		SwitchTo( lexState );
	}

	public void SwitchTo( int lexState )
	{
		if( lexState >= 2 || lexState < 0 )
			throw new TokenMgrError( "Error: Ignoring invalid lexical state : " + lexState +
			                         ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE );
		else
			curLexState = lexState;
	}

	protected Token jjFillToken()
	{
		Token t = Token.newToken( jjmatchedKind );
		t.kind = jjmatchedKind;
		String im = jjstrLiteralImages[jjmatchedKind];
		t.image = (im == null) ? input_stream.GetImage() : im;
		t.beginLine = input_stream.getBeginLine();
		t.beginColumn = input_stream.getBeginColumn();
		t.endLine = input_stream.getEndLine();
		t.endColumn = input_stream.getEndColumn();
		return t;
	}

	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;

	public Token getNextToken()
	{
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for( ;; )
		{
			try
			{
				curChar = input_stream.BeginToken();
			}
			catch( java.io.IOException e )
			{
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				matchedToken.specialToken = specialToken;
				return matchedToken;
			}
			image = null;
			jjimageLen = 0;

			for( ;; )
			{
				switch( curLexState )
				{
					case 0:
						try
						{
							input_stream.backup( 0 );
							while( curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L )
								curChar = input_stream.BeginToken();
						}
						catch( java.io.IOException e1 )
						{
							continue EOFLoop;
						}
						jjmatchedKind = 0x7fffffff;
						jjmatchedPos = 0;
						curPos = jjMoveStringLiteralDfa0_0();
						break;
					case 1:
						jjmatchedKind = 0x7fffffff;
						jjmatchedPos = 0;
						curPos = jjMoveStringLiteralDfa0_1();
						if( jjmatchedPos == 0 && jjmatchedKind > 3 )
						{
							jjmatchedKind = 3;
						}
						break;
				}
				if( jjmatchedKind != 0x7fffffff )
				{
					if( jjmatchedPos + 1 < curPos )
						input_stream.backup( curPos - jjmatchedPos - 1 );
					if( (jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L )
					{
						matchedToken = jjFillToken();
						matchedToken.specialToken = specialToken;
						if( jjnewLexState[jjmatchedKind] != -1 )
							curLexState = jjnewLexState[jjmatchedKind];
						return matchedToken;
					}
					else if( (jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L )
					{
						if( (jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L )
						{
							matchedToken = jjFillToken();
							if( specialToken == null )
								specialToken = matchedToken;
							else
							{
								matchedToken.specialToken = specialToken;
								specialToken = (specialToken.next = matchedToken);
							}
							SkipLexicalActions( matchedToken );
						}
						else
							SkipLexicalActions( null );
						if( jjnewLexState[jjmatchedKind] != -1 )
							curLexState = jjnewLexState[jjmatchedKind];
						continue EOFLoop;
					}
					jjimageLen += jjmatchedPos + 1;
					if( jjnewLexState[jjmatchedKind] != -1 )
						curLexState = jjnewLexState[jjmatchedKind];
					curPos = 0;
					jjmatchedKind = 0x7fffffff;
					try
					{
						curChar = input_stream.readChar();
						continue;
					}
					catch( java.io.IOException e1 )
					{
					}
				}
				int error_line = input_stream.getEndLine();
				int error_column = input_stream.getEndColumn();
				String error_after = null;
				boolean EOFSeen = false;
				try
				{
					input_stream.readChar();
					input_stream.backup( 1 );
				}
				catch( java.io.IOException e1 )
				{
					EOFSeen = true;
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
					if( curChar == '\n' || curChar == '\r' )
					{
						error_line++;
						error_column = 0;
					}
					else
						error_column++;
				}
				if( !EOFSeen )
				{
					input_stream.backup( 1 );
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
				}
				throw new TokenMgrError( EOFSeen, curLexState, error_line, error_column,
				                         error_after, curChar, TokenMgrError.LEXICAL_ERROR );
			}
		}
	}

	void SkipLexicalActions( Token matchedToken )
	{
		switch( jjmatchedKind )
		{
			default:
				break;
		}
	}
}
