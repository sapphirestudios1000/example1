<?xml version="1.0" encoding="UTF-8"?>
<!--
# ===================================================================================
# ////////////////////////  Portico RTI Initialization Data  ////////////////////////
# ===================================================================================
#
# This file contains all available configuration options for Portico. 
# Values provided are shown with defaults. Inline documentation is provided throughout.
#
# To make use of this file, put it in the directory that your federate is executed from, or set the
# RTI_RID_FILE environment variable to point at wherever it is located.
#
# //////////////////////////////////////
# 1. Network Connection Configuration
# //////////////////////////////////////
# The structure of configuration for all connections is the same:
#
#     <connection name="some-name" transport="{{TRANSPORT}}" enabled="true|false">
#         <%TRANSPORT%>  // can be multicast, tcp-server, tcp-client or jvm
#         <protocols>
#             ...
#         </protocols>
#     </connection>
#
# In the main <connection> element has three attributes:
#     - name: A unqiue name to identify the connection (used in logging)
#     - transport: The transport implementation use by the connection
#     - protocols: The protocol stack supporting the connection
#
#
#    1.1 Transport Implementations
#    `````````````````````````````
#    For each connection there is a single transport type. The <connection> element must have
#    a child element with the same name as appears in the transport attribute ({{TRANSPORT}} above).
#    Below, we see transport="multicast" and a <multicast> sub-element:
#
#    <connection name="myconnection" transport="multicast" enabled="true">
#        <multicast address="239.1.2.3" port="20913" nic="SITE_LOCAL"/>
#    </connection>
#
#    The sub-element contains transport-specific configuration. Valid transport types are:
#
#      - multicast: Uses multicast or broadcast group for message exchange
#      - tcp-server: TCP, point-to-point. Listens for connections from clients.
#      - tcp-client: TCP, point-to-point. Client side of connection. Connects to tcp-server.
#      - jvm: Shared-memory. Federates must run in same process. Usually in differnet threads.
#
#
#    1.2 Protocol Stack
#    ``````````````````````````
#    Each connection has a protocol stack. Protocols are units of functionality that transform
#    a message in some way. The current list of supported protocols are:
#
#      - authentication: Either PKI or password. Special authentication process undertaken
#                        with the RTI when a federate joins a federation
#      - encryption: Will encrypt messages using either explicitly defined key, or one given
#                    to it as part of the authentication process.
#
#     Examples are provided in this RID file, but are typically commented out or DISABLED
#     via the special "enabled" property on each protocol configuration.
#
# ======================================
# 2. Network Interface Symbolic Names
# ======================================
# For any place where an IP address or name could validly be entered, you can instead use a more
# generic, symbolic string. When a symbolic name is used, Portico will substitute it for the first
# address or NIC it can find that matches. The following symbolic names are available:
#
#  - LOOPBACK:   127.0.0.1
#  - LINK_LOCAL: 169.254.1.0 - 169.254.254.255 inclusive
#  - SITE_LOCAL: 10.0.0.0/8 (255.0.0.0), 172.16.0.0/12 (255.240.0.0), 192.168.0.0/16 (255.255.0.0)
#  - GLOBAL:     Any address not in the above
#
-->
<portico>
	<!--
	# ==================================================================================
	# ///  Common Configuration  ///////////////////////////////////////////////////////
	# ==================================================================================
	-->
	<common>
		<!--
		# (C.1) RTI Home Location
		#
		#        The location of the RTI installation. Can be overridden by the env-var RTI_HOME.
		#
		-->
		<rti-home> ./ </rti-home>

		<!--
		# (C.2) RTI Data Directory
		#
		#        The location to write log files, federation save files and all other data to.
		#        While core RTI files are often installed into Program Files or other privileged
		#        areas on Linux, the data directory typically points to subfolder of a users home
		#        directory or some other place that is writable without administrative privileges.
		#
		-->
		<!-- <rti-data> ${user.home}\Portico </rti-data>  --> <!-- // Windows -->
		<!-- <rti-data> ${user.home}/.portico </rti-data> --> <!-- // Linux   -->


		<!--
		# (C.3)  Logging Properties
		#        Specify level and directory. Settings are common across RTI, LRC and Forwarder.
		#        You can also specify the log4j pattern that is used to format the log messages.
		-->
		<logging logdir="logs"
		         loglevel="INFO"
		         logformat="%d{ABSOLUTE} %-5p %c: %m%n"/>

		<!--
		# (C.4) Special Configuration Options
		#        This section has a set of misc configuration options.
		-->
		<special>
			<jgroups loglevel="OFF"/>
		</special>
	</common>

	<!--
	# ==================================================================================
	# ///  RTI Configuration  //////////////////////////////////////////////////////////
	# ==================================================================================
	-->
	<rti>
		<!--
		# (R.1) RTI Network Connections
		#
		#        The RTI can maintain a arbitrary number of network connections, allowing it
		#        to speak on many networks at once.
		#
		#        The <network> element may contain a number of <connection> definitions.
		#        Each must have a unique name and must identify a transport. It can also
		#        be enabled/disabled via the "enabled" property.
		#
		#        Sub-component configuration options for individual connection definitions
		#        are common across RTI, LRC and Forwarder components. See the section called
		#        "Network Connection Configuration" at the top of this file for a detailed
		#        discussion of valid structure.
		#
		-->
		<network>
			<!--
			# (R.2) Multicast Connection
			#
			#        A connection that communicates via local multicast groups. Uses the
			#        JGroups reliable multicast library to support its message exchange.
			-->
			<connection name="multicast" transport="multicast" enabled="true">
				<multicast address="239.1.2.3" port="20913" nic="SITE_LOCAL"/>
				<protocols/>
			</connection>


			<!--
			# (R.3) Unicast TCP Network Connection
			#
			#        This connection opens a socket and listens for incoming connection
			#        requests from "tcp-client" connections. It established a reliable,
			#        point-to-point TCP connection between the server and any number of
			#        clients that connect.
			#
			-->
			<connection name="tcp" transport="tcp-server" enabled="true">
				<tcp-server address="SITE_LOCAL" port="52295"/>

				<protocols/>
			</connection>


			<!--
			# (R.4) JVM Network Connection Configuration
			#
			#        Use an internal, local-process only shared memory exchange.
			#        Federates must be running in the same process, typically as
			#        separate threads.
			#
			-->
			<connection name="jvm" transport="jvm" enabled="true">
				<jvm/> <!-- no properties by default -->
				<protocols/>
			</connection>

		</network>
	</rti>


	<!--
	# ==================================================================================
	# ///  LRC Configuration  //////////////////////////////////////////////////////////
	# ==================================================================================
	-->
	<lrc>

		<!--
		# (L.1) LRC Network Connection
		#        The LRC can only have an SINGLE CONNECTION at once. It uses this to
		#        communicate with the RTI (directly or through a Forwarder).
		#
		#        The <network> element main only contain a SINGLE <connection> definition.
		#        We have provided placeholders for other types with default configuration
		#        information, but have commented them out.
		#
		#        Sub-component configuration options for individual connection definitions
		#        are common across RTI, LRC and Forwarder components. See the section called
		#        "Network Connection Configuration" at the top of this file for a detailed
		#        discussion of valid structure.
		#
		-->
		<network>
			<connection name="lrc" transport="multicast" enabled="true">
				<multicast address="239.1.2.3" port="20913" nic="SITE_LOCAL"/>
				<!-- <tcp-client address="SITE_LOCAL" port="52295"/> -->

				<protocols>
					<authentication enabled="false" type="pki">
						<pki rtipublic="" privatekey="" privatepass="{none}" enforced=""/>
						<password id="" password=""/> <!-- Not yet supported -->
					</authentication>
					<encryption enabled="false" kenlength="128" cipher="AES/CFB/NoPadding"/>
				</protocols>

			</connection>
		</network>

	</lrc>


	<!--
	# ==================================================================================
	# ///  Forwarder Configuration  ////////////////////////////////////////////////////
	# ==================================================================================
	#
	# The Forwarder is designed to bridge networks, whether that be because they
	# are not local, or because there is some need for an administrative boundary
	# between them. The forwarder will pass messages in two directions:
	#
	#       Upstream: Connection between Forwarder and RTI network
	#     Downstream: Connection between Forwarder and local cluster of federates
	#
	#          (RTI) <<<<< Forwarder >>>>> (Local Federates)
	#             {upstream}      {downstream}
	#
	# There is a separate network connection for each direction that reflects how the
	# forwarder will talk to the RTI/Upstream (F.1) and Local Federates/Downstream (F.2).
	#
	# To restrict traffic flow, a firewall can be configured (F.3).
	-->
	<forwarder>

		<!--
			NOTE: A Forwarder can only have TWO connections. One called "upstream" and
			      one called "downstream". Other names, or configs that are missing both
			      connections will cause a startup failure.
		-->
		<network>
			<connection name="upstream" transport="tcp-client">
				<tcp-client address="SITE_LOCAL" port="52295"/>
				<protocols/>
			</connection>

			<connection name="downstream" transport="multicast">
				<multicast address="239.1.2.3" port="20913" nic="SITE_LOCAL"/>
				<protocols/>
			</connection>
		</network>


		<!--
		# (F.3) Forwarder Firewall
		#
		#       Define the object and interaction class types for messages that are to be
		#       IMPORTED from upstream>>>downstream , or EXPORTED from downstream>>>upstream.
		#
		#       The firewall is DISABLED by default for efficiency reasons. If you need this
		#       functionality, you can specify "enabled=true".
		-->
		<firewall enabled="false">
			<!--
			# (F.3a) Firewall Import Rules
			-->
			<import>
				<object class="HLAobjectRoot.*"/>
				<interaction class="HLAinteractionRoot.*"/>
			</import>

			<!--
			# (F.3a) Firewall Export Rules
			-->
			<export>
				<object class="HLAobjectRoot.*"/>
				<interaction class="HLAinteractionRoot.*"/>
			</export>
		</firewall>

	</forwarder>

</portico>
