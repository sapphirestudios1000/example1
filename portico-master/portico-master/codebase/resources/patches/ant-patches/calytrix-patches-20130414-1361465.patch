Index: src/main/org/apache/tools/ant/helper/ProjectHelper2.java
===================================================================
--- src/main/org/apache/tools/ant/helper/ProjectHelper2.java	(revision 1361465)
+++ src/main/org/apache/tools/ant/helper/ProjectHelper2.java	(working copy)
@@ -155,6 +155,10 @@
         if (getImportStack().size() > 1) {
             // we are in an imported file.
             context.setIgnoreProjectTag(true);
+            // Modified by Tim - Store the prefix used so we can refer to it later in dependency resolution
+            if( getCurrentTargetPrefix() != null ) {
+                project.getDeclaredPrefixes().add( getCurrentTargetPrefix() );
+            }
             Target currentTarget = context.getCurrentTarget();
             Target currentImplicit = context.getImplicitTarget();
             Map    currentTargets = context.getCurrentTargets();
@@ -179,33 +183,57 @@
             // Execute the top-level target
             context.getImplicitTarget().execute();
 
-            // resolve extensionOf attributes
+            // resolve extensionOf attributes - Modified by Tim
             for (String[] extensionInfo : getExtensionStack()) {
-                String tgName = extensionInfo[0];
-                String name = extensionInfo[1];
+                String tgName = extensionInfo[0]; // point we are extending
+                String name = extensionInfo[1];   // name of the target doing the extending
                 OnMissingExtensionPoint missingBehaviour = OnMissingExtensionPoint
                         .valueOf(extensionInfo[2]);
+                // if the file has been included or imported, it may have a prefix we should
+                // consider when trying to resolve the target it is extending
+                String prefix = extensionInfo.length > 3 ? extensionInfo[3] : null;
+                
+                // find the target we're extending
                 Hashtable projectTargets = project.getTargets();
-                if (!projectTargets.containsKey(tgName)) {
+                Target target = null;
+                if( prefix == null ) {
+                    // no prefix - not from an imported/included build file
+                    target = (Target)projectTargets.get(tgName);
+                }
+                else {
+                	// we have a prefix, which means we came from an
+                	// include/import, so we should check with the prefixed
+                	// name first so that we try resolve from the local file
+                	// and then fall back to targets from other files
+                	String sep = getCurrentPrefixSeparator();
+                	target = (Target)projectTargets.get(prefix+sep+tgName);
+                	if( target == null ) {
+                		// we didn't find it under the prefixed name, if
+                		// it's from a different file it might under its
+                		// normal name
+                		target = (Target)projectTargets.get(tgName);
+                	}
+                }
+                
+                // make sure we found a point to extend on
+                if( target == null ) {
                     String message = "can't add target " + name
                         + " to extension-point " + tgName
                         + " because the extension-point is unknown.";
                     if (missingBehaviour == OnMissingExtensionPoint.FAIL) {
                         throw new BuildException(message);
                     } else if (missingBehaviour == OnMissingExtensionPoint.WARN) {
-                        Target target = (Target) projectTargets.get(name);
-                        context.getProject().log(target,
+                        context.getProject().log((Target) projectTargets.get(name),
                                                  "Warning: " + message,
                                                  Project.MSG_WARN);
                     }
                 } else {
-                    Target t = (Target) projectTargets.get(tgName);
-                    if (!(t instanceof ExtensionPoint)) {
+                    if (!(target instanceof ExtensionPoint)) {
                         throw new BuildException("referenced target "
                                                  + tgName
                                                  + " is not an extension-point");
                     }
-                    t.addDependency(name);
+                    target.addDependency(name);
                 }
             }
         }
@@ -1016,6 +1044,7 @@
             }
             if (!isInIncludeMode && context.isIgnoringProjectTag()
                 && (prefix = getTargetPrefix(context)) != null) {
+                // Modified by Tim
                 // In an imported file (and not completely
                 // ignoring the project tag or having a preconfigured prefix)
                 String newName = prefix + sep + name;
@@ -1039,16 +1068,22 @@
                     (ProjectHelper) context.getProject().
                     getReference(ProjectHelper.PROJECTHELPER_REFERENCE);
                 for (String tgName : Target.parseDepends(extensionPoint, name, "extensionOf")) {
-                    if (isInIncludeMode()) {
-                        tgName = prefix + sep + tgName;
-                    }
                     if (extensionPointMissing == null) {
                         extensionPointMissing = OnMissingExtensionPoint.FAIL;
                     }
                     // defer extensionpoint resolution until the full
                     // import stack has been processed
-                    helper.getExtensionStack().add(new String[] {
-                            tgName, name, extensionPointMissing.name() });
+                    if(isInIncludeMode()) {
+                        // if in include mode, provide prefix we're including
+                        // by so that we can try and resolve extension point
+                        // from the local file first
+                        helper.getExtensionStack().add(new String[] {
+                            tgName, target.getName(), extensionPointMissing.name(), prefix});
+                    }
+                    else {
+                        helper.getExtensionStack().add(new String[]{
+                            tgName, target.getName(), extensionPointMissing.name()});
+                    }
                 }
             }
         }
Index: src/main/org/apache/tools/ant/Project.java
===================================================================
--- src/main/org/apache/tools/ant/Project.java	(revision 1361465)
+++ src/main/org/apache/tools/ant/Project.java	(working copy)
@@ -146,6 +146,9 @@
     /** Name of the project's default target. */
     private String defaultTarget;
 
+    /** Set of prefixes that have been used by imported or included files */
+    private Set declaredPrefixes = new HashSet(); // Added by Tim
+
     /** Map from target names to targets (String to Target). */
     private Hashtable targets = new Hashtable();
     /** Set of global filters. */
@@ -780,6 +783,15 @@
     }
 
     /**
+     * Gets a set of all the prefixes used in this project by imported or included files
+     *
+     * @since Ant 1.8.4-patched (Added by Tim)
+     */
+    public Set getDeclaredPrefixes() {
+        return this.declaredPrefixes;
+    }
+
+    /**
      * Add a filter to the set of global filters.
      *
      * @param token The token to filter.
Index: src/main/org/apache/tools/ant/BuildException.java
===================================================================
--- src/main/org/apache/tools/ant/BuildException.java	(revision 1361465)
+++ src/main/org/apache/tools/ant/BuildException.java	(working copy)
@@ -27,6 +27,9 @@
     /** Location in the build file where the exception occurred */
     private Location location = Location.UNKNOWN_LOCATION;
 
+    /** Whether this exception signals an early return rather than failure */
+    private boolean isEarlyReturn = false;
+
     /**
      * Constructs a build exception with no descriptive information.
      */
@@ -151,4 +154,21 @@
         return location;
     }
 
+    /**
+     * Is this exception as the result of an early return
+     * rather than a build failure?
+     *
+     * @return true if this is an early return 
+     */
+    public boolean isEarlyReturn() {
+        return isEarlyReturn;
+    }
+
+    /**
+     * Marks this exception as the result of an early return
+     * rather than a build failure?
+     */
+    public void setEarlyReturn( boolean earlyReturn ) {
+        this.isEarlyReturn = earlyReturn;
+    }
 }
Index: src/main/org/apache/tools/ant/taskdefs/ImportTask.java
===================================================================
--- src/main/org/apache/tools/ant/taskdefs/ImportTask.java	(revision 1361465)
+++ src/main/org/apache/tools/ant/taskdefs/ImportTask.java	(working copy)
@@ -22,6 +22,7 @@
 import org.apache.tools.ant.ProjectHelper;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.ProjectHelperRepository;
+import org.apache.tools.ant.PropertyHelper;
 import org.apache.tools.ant.Task;
 import org.apache.tools.ant.types.Resource;
 import org.apache.tools.ant.types.ResourceCollection;
@@ -70,6 +71,10 @@
     private final Union resources = new Union();
     private static final FileUtils FILE_UTILS = FileUtils.getFileUtils();
 
+    // added by Tim
+    private String ifCondition = null;
+    private String unlessCondition = null;
+
     public ImportTask() {
         resources.setCache(true);
     }
@@ -115,6 +120,26 @@
     }
 
     /**
+     * Only import the project if the property identified in this value
+     * evaludates to true.
+     *
+     * @since Ant 1.8.4-patched (Added by Tim)
+     */
+    public void setIf(String property) {
+        ifCondition = property == null ? "" : property;
+    }
+
+    /**
+     * Import the file specified *unless* the value of the identified
+     * property evaluates to false.
+     *
+     * @since Ant 1.8.4-patched (Added by Tim)
+     */
+    public void setUnless(String property) {
+        unlessCondition = property == null ? "" : property;
+    }
+
+    /**
      * The resource to import.
      *
      * @since Ant 1.8.0
@@ -124,6 +149,18 @@
     }
 
     public void execute() {
+        // Added by Tim: test the if and allows conditions
+        if (!testIfAllows()) {
+            project.log(this, "Skipped because property '" + project.replaceProperties(ifCondition)
+                    + "' not set.", Project.MSG_VERBOSE);
+            return;
+        }
+        if (!testUnlessAllows()) {
+            project.log(this, "Skipped because property '"
+                    + project.replaceProperties(unlessCondition) + "' set.", Project.MSG_VERBOSE);
+            return;
+        }
+
         if (file == null && resources.size() == 0) {
             throw new BuildException("import requires file attribute or"
                                      + " at least one nested resource");
@@ -289,6 +326,38 @@
     }
 
     /**
+     * Tests whether or not the "if" condition allows the execution of this target.
+     *
+     * @return whether or not the "if" condition is satisfied. If no
+     *         condition (or an empty condition) has been set,
+     *         <code>true</code> is returned.
+     *
+     * @see #setIf(String)
+     * @since Ant 1.8.4-patched (Added by Tim)
+     */
+    private boolean testIfAllows() {
+        PropertyHelper propertyHelper = PropertyHelper.getPropertyHelper(getProject());
+        Object o = propertyHelper.parseProperties(ifCondition);
+        return propertyHelper.testIfCondition(o);
+    }
+
+    /**
+     * Tests whether or not the "unless" condition allows the execution of this target.
+     *
+     * @return whether or not the "unless" condition is satisfied. If no
+     *         condition (or an empty condition) has been set,
+     *         <code>true</code> is returned.
+     *
+     * @see #setUnless(String)
+     * @since Ant 1.8.4-patched (Added by Tim)
+     */
+    private boolean testUnlessAllows() {
+        PropertyHelper propertyHelper = PropertyHelper.getPropertyHelper(getProject());
+        Object o = propertyHelper.parseProperties(unlessCondition);
+        return propertyHelper.testUnlessCondition(o);
+    }
+
+    /**
      * Sets a bunch of Thread-local ProjectHelper properties.
      * 
      * @since Ant 1.8.0
Index: src/main/org/apache/tools/ant/taskdefs/defaults.properties
===================================================================
--- src/main/org/apache/tools/ant/taskdefs/defaults.properties	(revision 1361465)
+++ src/main/org/apache/tools/ant/taskdefs/defaults.properties	(working copy)
@@ -89,6 +89,7 @@
 record=org.apache.tools.ant.taskdefs.Recorder
 replace=org.apache.tools.ant.taskdefs.Replace
 resourcecount=org.apache.tools.ant.taskdefs.ResourceCount
+return=org.apache.tools.ant.taskdefs.Return
 retry=org.apache.tools.ant.taskdefs.Retry
 rmic=org.apache.tools.ant.taskdefs.Rmic
 sequential=org.apache.tools.ant.taskdefs.Sequential
Index: src/main/org/apache/tools/ant/Main.java
===================================================================
--- src/main/org/apache/tools/ant/Main.java	(revision 1361465)
+++ src/main/org/apache/tools/ant/Main.java	(working copy)
@@ -27,6 +27,7 @@
 import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Hashtable;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Properties;
@@ -796,6 +797,23 @@
                     }
                 }
 
+                // Added by Tim
+                // Tim - When including files, target names are automatically prefixed with
+                //       a value as defined in the including build file. This prefix is given
+                //       to all targets defined in the file, including declared dependencies.
+                //       While this works fine for dependencies that reside inside the same
+                //       file (as they all get the same prefix and so are essentially still
+                //       accessible by the same name), if you want to include targets from
+                //       another file, the prefix of the file being included is stuck on the
+                //       front, thus making it appear like the target doesn't exist.
+                //       To solve this, we store any prefixes used when including files in
+                //       a project and then here, should be not be able to locate targets or
+                //       dependencies in a fully complete build, we strip the prefix off to
+                //       see if that was the cause of the problem. If it was, we rewrite the
+                //       name of the target or dependency.
+                resolvePrefixedDependencies( project );
+
+
                 project.executeTargets(targets);
             } finally {
                 // put back the original security manager
@@ -837,6 +855,64 @@
         }
     }
 
+    /**
+     * Spin through all the targets in this class and check their dependency list. If they
+     * mention a target that does not exist, try and resolve it using the name without the
+     * prefix of any imported or included files. When they are loaded, all targets (and deps)
+     * are given a prefix. If you are referencing a target outside of the local project, it
+     * will fail because the dependency will get prefixed as well. This just checks for cases
+     * where that has happened and changes the dependency to point to the correct name when
+     * it does happen.
+     *
+     * @param project The project we are working in
+     *
+     * @since Ant 1.8.4-patched (Addedy by Tim)
+     */
+    private void resolvePrefixedDependencies(Project project) {
+        Hashtable allTargets = project.getTargets();
+        Enumeration targetsEnumeration = allTargets.elements();
+        while( targetsEnumeration.hasMoreElements() )
+        {
+            // for each of the targets in the project, check all their depdendencies to
+            // ensure they can be found, looking them up with prefixes removed if not
+            Target target = (Target)targetsEnumeration.nextElement();
+            Enumeration dependencies = target.getDependencies();
+            while( dependencies.hasMoreElements() ) {
+                String dependency = (String)dependencies.nextElement();
+                if( project.getTargets().containsKey(dependency) )
+                    continue;
+                
+                // this target has a dependency that we can't find in the
+                // project, try removing any of the loaded prefixes from it
+                // name to see if we can, and should we be able to, replace
+                // the dependency
+                Set prefixes = project.getDeclaredPrefixes();
+                Iterator iterator = prefixes.iterator();
+                Target resolved = null;
+                while( iterator.hasNext() ) {
+                    String prefix = (String)iterator.next();
+                    // check the start of the target name, don't want to replace middle pieces
+                    // of the target name and find a match! (wouldn't be a prefix then)
+                    if( dependency.startsWith(prefix) == false )
+                        continue;
+
+                    // we have a match, strip the dep string off the front
+                    String alternative = dependency.replaceFirst( prefix+"\\.", "" );
+                    if( project.getTargets().containsKey(alternative) ) {
+                        // Found it!
+                        resolved = (Target)project.getTargets().get(alternative);
+                        break;
+                    }
+                }
+
+                // replace the target with the proper name if required
+                if( resolved != null ) {
+                    target.replaceDependency( dependency, resolved.getName() );
+                }
+            }
+        }
+    }
+
     private void setProperties(final Project project) {
         
         project.init();
Index: src/main/org/apache/tools/ant/Target.java
===================================================================
--- src/main/org/apache/tools/ant/Target.java	(revision 1361465)
+++ src/main/org/apache/tools/ant/Target.java	(working copy)
@@ -253,6 +253,20 @@
     }
 
     /**
+     * Replaces the identified existing target dependency with the provided new one.
+     * If the given dependency does not exist in the list of dependencies that we have,
+     * no replace shall take place.
+     *
+     * @since Ant 1.8.4-patched (added by Tim)
+     */
+    public void replaceDependency( String previousDependency, String newDependency ) {
+        int index = dependencies.indexOf( previousDependency );
+        if( index >= 0 ) {
+            dependencies.set( index, newDependency );
+        }
+    }
+
+    /**
      * Does this target depend on the named target?
      * @param other the other named target.
      * @return true if the target does depend on the named target
@@ -394,6 +408,13 @@
                     ((RuntimeConfigurable) o).maybeConfigure(project);
                 }
             }
+		}
+        catch( BuildException be ) {
+            if( be.isEarlyReturn() ) {
+                // log that we're returning early and swallow the exception
+				project.log(this, "   [Return] Exit target "+name+
+                " early due to <return/>", Project.MSG_VERBOSE );
+            }
         } finally {
             localProperties.exitScope();
         }
