Index: .classpath
===================================================================
--- .classpath	(revision 1551)
+++ .classpath	(working copy)
@@ -2,7 +2,6 @@
 <classpath>
 	<classpathentry kind="src" path="codebase/src-java/portico"/>
 	<classpathentry kind="src" path="codebase/src-java/example/hla13/src"/>
-	<classpathentry kind="src" path="codebase/src-java/example/hla13java1/src"/>
 	<classpathentry kind="src" path="codebase/src-java/example/event-logger/src"/>
 	<classpathentry kind="src" path="codebase/src-java/test"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
Index: codebase/src-java/portico/hla/rti13/java1/TimeRegulationWasNotEnabled.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/TimeRegulationWasNotEnabled.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/TimeRegulationWasNotEnabled.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class TimeRegulationWasNotEnabled extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public TimeRegulationWasNotEnabled( String reason )
-	{
-		super( reason );
-	}
-
-	public TimeRegulationWasNotEnabled( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public TimeRegulationWasNotEnabled()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public TimeRegulationWasNotEnabled( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public TimeRegulationWasNotEnabled( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/TimeConstrainedWasNotEnabled.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/TimeConstrainedWasNotEnabled.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/TimeConstrainedWasNotEnabled.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class TimeConstrainedWasNotEnabled extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public TimeConstrainedWasNotEnabled( String reason )
-	{
-		super( reason );
-	}
-
-	public TimeConstrainedWasNotEnabled( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public TimeConstrainedWasNotEnabled()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public TimeConstrainedWasNotEnabled( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public TimeConstrainedWasNotEnabled( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/RestoreInProgress.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/RestoreInProgress.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/RestoreInProgress.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class RestoreInProgress extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public RestoreInProgress( String reason )
-	{
-		super( reason );
-	}
-
-	public RestoreInProgress( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public RestoreInProgress()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public RestoreInProgress( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public RestoreInProgress( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/AttributeAlreadyBeingDivested.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/AttributeAlreadyBeingDivested.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/AttributeAlreadyBeingDivested.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class AttributeAlreadyBeingDivested extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public AttributeAlreadyBeingDivested( String reason )
-	{
-		super( reason );
-	}
-
-	public AttributeAlreadyBeingDivested( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public AttributeAlreadyBeingDivested()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public AttributeAlreadyBeingDivested( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public AttributeAlreadyBeingDivested( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/AttributeAlreadyOwned.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/AttributeAlreadyOwned.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/AttributeAlreadyOwned.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class AttributeAlreadyOwned extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public AttributeAlreadyOwned( String reason )
-	{
-		super( reason );
-	}
-
-	public AttributeAlreadyOwned( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public AttributeAlreadyOwned()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public AttributeAlreadyOwned( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public AttributeAlreadyOwned( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/FederatesCurrentlyJoined.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/FederatesCurrentlyJoined.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/FederatesCurrentlyJoined.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class FederatesCurrentlyJoined extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public FederatesCurrentlyJoined( String reason )
-	{
-		super( reason );
-	}
-
-	public FederatesCurrentlyJoined( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public FederatesCurrentlyJoined()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public FederatesCurrentlyJoined( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public FederatesCurrentlyJoined( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/EnableTimeConstrainedPending.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/EnableTimeConstrainedPending.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/EnableTimeConstrainedPending.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class EnableTimeConstrainedPending extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public EnableTimeConstrainedPending( String reason )
-	{
-		super( reason );
-	}
-
-	public EnableTimeConstrainedPending( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public EnableTimeConstrainedPending()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public EnableTimeConstrainedPending( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public EnableTimeConstrainedPending( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/TimeRegulationAlreadyEnabled.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/TimeRegulationAlreadyEnabled.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/TimeRegulationAlreadyEnabled.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class TimeRegulationAlreadyEnabled extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public TimeRegulationAlreadyEnabled( String reason )
-	{
-		super( reason );
-	}
-
-	public TimeRegulationAlreadyEnabled( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public TimeRegulationAlreadyEnabled()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public TimeRegulationAlreadyEnabled( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public TimeRegulationAlreadyEnabled( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/TimeConstrainedAlreadyEnabled.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/TimeConstrainedAlreadyEnabled.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/TimeConstrainedAlreadyEnabled.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class TimeConstrainedAlreadyEnabled extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public TimeConstrainedAlreadyEnabled( String reason )
-	{
-		super( reason );
-	}
-
-	public TimeConstrainedAlreadyEnabled( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public TimeConstrainedAlreadyEnabled()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public TimeConstrainedAlreadyEnabled( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public TimeConstrainedAlreadyEnabled( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/RTIinternalError.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/RTIinternalError.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/RTIinternalError.java	(working copy)
@@ -1,44 +0,0 @@
-package hla.rti13.java1;
-
-public class RTIinternalError extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public RTIinternalError( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	/**
-     * Just create an empty exception
-     */
-    public RTIinternalError()
-    {
-	    super();
-    }
-
-    /**
-     * @param message The message to create the exception with
-     */
-    public RTIinternalError( String message )
-    {
-	    super( message );
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public RTIinternalError( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public RTIinternalError( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/SuppliedParameters.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/SuppliedParameters.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/SuppliedParameters.java	(working copy)
@@ -1,113 +0,0 @@
-/*
- *   Copyright 2008 The Portico Project
- *
- *   This file is part of portico.
- *
- *   portico is free software; you can redistribute it and/or modify
- *   it under the terms of the Common Developer and Distribution License (CDDL) 
- *   as published by Sun Microsystems. For more information see the LICENSE file.
- *   
- *   Use of this software is strictly AT YOUR OWN RISK!!!
- *   If something bad happens you do not have permission to come crying to me.
- *   (that goes for your lawyer as well)
- *
- */
-package hla.rti13.java1;
-
-import org.portico.impl.hla13.types.HLA13SuppliedParameters;
-
-public class SuppliedParameters
-{
-	//----------------------------------------------------------
-	//                    STATIC VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                   INSTANCE VARIABLES
-	//----------------------------------------------------------
-	private HLA13SuppliedParameters parameters;
-
-	//----------------------------------------------------------
-	//                      CONSTRUCTORS
-	//----------------------------------------------------------
-
-	protected SuppliedParameters()
-	{
-		this.parameters = new HLA13SuppliedParameters();
-	}
-	
-	//----------------------------------------------------------
-	//                    INSTANCE METHODS
-	//----------------------------------------------------------
-	public void add( int h, byte[] buff ) throws ValueLengthExceeded, ValueCountExceeded
-	{
-		parameters.add( h, buff );
-	}
-
-	public void empty()
-	{
-		parameters.empty();
-	}
-
-	public int getHandle( int i ) throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			return this.parameters.getHandle( i );
-		}
-		catch( hla.rti.ArrayIndexOutOfBounds e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-
-	public byte[] getValue( int i ) throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			return this.parameters.getValue( i );
-		}
-		catch( hla.rti.ArrayIndexOutOfBounds e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-
-	public int getValueLength( int i ) throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			return this.parameters.getValueLength( i );
-		}
-		catch( hla.rti.ArrayIndexOutOfBounds e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-
-	public void remove( int h ) throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			this.parameters.remove( h );
-		}
-		catch( hla.rti.ArrayIndexOutOfBounds e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-	
-	public int size()
-	{
-		return parameters.size();
-	}
-	
-	public HLA13SuppliedParameters toPorticoMap()
-	{
-		return this.parameters;
-	}
-
-	//----------------------------------------------------------
-	//                     STATIC METHODS
-	//----------------------------------------------------------
-}
Index: codebase/src-java/portico/hla/rti13/java1/AttributeDivestitureWasNotRequested.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/AttributeDivestitureWasNotRequested.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/AttributeDivestitureWasNotRequested.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class AttributeDivestitureWasNotRequested extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public AttributeDivestitureWasNotRequested( String reason )
-	{
-		super( reason );
-	}
-
-	public AttributeDivestitureWasNotRequested( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public AttributeDivestitureWasNotRequested()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public AttributeDivestitureWasNotRequested( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public AttributeDivestitureWasNotRequested( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/FederateWasNotAskedToReleaseAttribute.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/FederateWasNotAskedToReleaseAttribute.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/FederateWasNotAskedToReleaseAttribute.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class FederateWasNotAskedToReleaseAttribute extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public FederateWasNotAskedToReleaseAttribute( String reason )
-	{
-		super( reason );
-	}
-
-	public FederateWasNotAskedToReleaseAttribute( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public FederateWasNotAskedToReleaseAttribute()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public FederateWasNotAskedToReleaseAttribute( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public FederateWasNotAskedToReleaseAttribute( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/FederateAmbassador.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/FederateAmbassador.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/FederateAmbassador.java	(working copy)
@@ -1,141 +0,0 @@
-package hla.rti13.java1;
-
-public interface FederateAmbassador
-{
-	public void announceSynchronizationPoint( String label, String tag )
-	    throws FederateInternalError;
-
-	public void attributeIsNotOwned( int theObject, int theAttribute ) throws ObjectNotKnown,
-	    AttributeNotKnown, FederateInternalError;
-
-	public void attributeOwnedByRTI( int theObject, int theAttribute ) throws ObjectNotKnown,
-	    AttributeNotKnown, FederateInternalError;
-
-	public void attributeOwnershipAcquisitionNotification( int theObject,
-	                                                       AttributeHandleSet securedAttributes )
-	    throws ObjectNotKnown, AttributeNotKnown, AttributeAcquisitionWasNotRequested,
-	    AttributeAlreadyOwned, AttributeNotPublished, FederateInternalError;
-
-	public void attributeOwnershipDivestitureNotification( int theObject,
-	                                                       AttributeHandleSet releasedAttributes )
-	    throws ObjectNotKnown, AttributeNotKnown, AttributeNotOwned,
-	    AttributeDivestitureWasNotRequested, FederateInternalError;
-
-	public void attributeOwnershipUnavailable( int theObject, AttributeHandleSet theAttributes )
-	    throws ObjectNotKnown, AttributeNotKnown, AttributeNotDefined, AttributeAlreadyOwned,
-	    AttributeAcquisitionWasNotRequested, FederateInternalError;
-
-	public void attributesInScope( int theObject, AttributeHandleSet theAttributes )
-	    throws ObjectNotKnown, AttributeNotKnown, FederateInternalError;
-
-	public void attributesOutOfScope( int theObject, AttributeHandleSet theAttributes )
-	    throws ObjectNotKnown, AttributeNotKnown, FederateInternalError;
-
-	public void confirmAttributeOwnershipAcquisitionCancellation( int theObject,
-	                                                              AttributeHandleSet theAttributes )
-	    throws ObjectNotKnown, AttributeNotKnown, AttributeNotDefined, AttributeAlreadyOwned,
-	    AttributeAcquisitionWasNotCanceled, FederateInternalError;
-
-	public void discoverObjectInstance( int theObject, int theObjectClass, String theObjectName )
-	    throws CouldNotDiscover, ObjectClassNotKnown, FederateInternalError;
-
-	public void federationNotRestored() throws FederateInternalError;
-
-	public void federationNotSaved() throws FederateInternalError;
-
-	public void federationRestoreBegun() throws FederateInternalError;
-
-	public void federationRestored() throws FederateInternalError;
-
-	public void federationSaved() throws FederateInternalError;
-
-	public void federationSynchronized( String label ) throws FederateInternalError;
-
-	public void informAttributeOwnership( int theObject, int theAttribute, int theOwner )
-	    throws ObjectNotKnown, AttributeNotKnown, FederateInternalError;
-
-	public void initiateFederateRestore( String label, int handle )
-	    throws SpecifiedSaveLabelDoesNotExist, CouldNotRestore, FederateInternalError;
-
-	public void initiateFederateSave( String label ) throws UnableToPerformSave,
-	    FederateInternalError;
-
-	public void provideAttributeValueUpdate( int theObject, AttributeHandleSet theAttributes )
-	    throws ObjectNotKnown, AttributeNotKnown, AttributeNotOwned, FederateInternalError;
-
-	public void receiveInteraction( int theInteraction, ReceivedInteraction theParameters,
-	                                byte[] theTime, String theTag, EventRetractionHandle theHandle )
-	    throws InteractionClassNotKnown, InteractionParameterNotKnown, InvalidFederationTime,
-	    FederateInternalError;
-
-	public void receiveInteraction( int theInteraction, ReceivedInteraction theParameters,
-	                                String theTag ) throws InteractionClassNotKnown,
-	    InteractionParameterNotKnown, FederateInternalError;
-
-	public void reflectAttributeValues( int theObject, ReflectedAttributes theAttributes,
-	                                    byte[] theTime, String theTag,
-	                                    EventRetractionHandle theHandle ) throws ObjectNotKnown,
-	    AttributeNotKnown, FederateOwnsAttributes, InvalidFederationTime, FederateInternalError;
-
-	public void reflectAttributeValues( int theObject, ReflectedAttributes theAttributes,
-	                                    String theTag ) throws ObjectNotKnown, AttributeNotKnown,
-	    FederateOwnsAttributes, FederateInternalError;
-
-	public void removeObjectInstance( int theObject, byte[] theTime, String theTag,
-	                                  EventRetractionHandle theHandle ) throws ObjectNotKnown,
-	    InvalidFederationTime, FederateInternalError;
-
-	public void removeObjectInstance( int theObject, String theTag ) throws ObjectNotKnown,
-	    FederateInternalError;
-
-	public void requestAttributeOwnershipAssumption( int theObject,
-	                                                 AttributeHandleSet offeredAttributes,
-	                                                 String theTag ) throws ObjectNotKnown,
-	    AttributeNotKnown, AttributeAlreadyOwned, AttributeNotPublished, FederateInternalError;
-
-	public void requestAttributeOwnershipRelease( int theObject,
-	                                              AttributeHandleSet candidateAttributes,
-	                                              String theTag ) throws ObjectNotKnown,
-	    AttributeNotKnown, AttributeNotOwned, FederateInternalError;
-
-	public void requestFederationRestoreFailed( String label, String reason )
-	    throws FederateInternalError;
-
-	public void requestFederationRestoreSucceeded( String label ) throws FederateInternalError;
-
-	public void requestRetraction( EventRetractionHandle theHandle ) throws EventNotKnown,
-	    FederateInternalError;
-
-	public void startRegistrationForObjectClass( int theClass ) throws ObjectClassNotPublished,
-	    FederateInternalError;
-
-	public void stopRegistrationForObjectClass( int theClass ) throws ObjectClassNotPublished,
-	    FederateInternalError;
-
-	public void synchronizationPointRegistrationFailed( String label ) throws FederateInternalError;
-
-	public void synchronizationPointRegistrationSucceeded( String label )
-	    throws FederateInternalError;
-
-	public void timeAdvanceGrant( byte[] theTime ) throws InvalidFederationTime,
-	    TimeAdvanceWasNotInProgress, FederationTimeAlreadyPassed, FederateInternalError;
-
-	public void timeConstrainedEnabled( byte[] theFederateTime ) throws InvalidFederationTime,
-	    EnableTimeConstrainedWasNotPending, FederateInternalError;
-
-	public void timeRegulationEnabled( byte[] theFederateTime ) throws InvalidFederationTime,
-	    EnableTimeRegulationWasNotPending, FederateInternalError;
-
-	public void turnInteractionsOff( int theHandle ) throws InteractionClassNotPublished,
-	    FederateInternalError;
-
-	public void turnInteractionsOn( int theHandle ) throws InteractionClassNotPublished,
-	    FederateInternalError;
-
-	public void turnUpdatesOffForObjectInstance( int theObject, AttributeHandleSet theAttributes )
-	    throws ObjectNotKnown, AttributeNotOwned, FederateInternalError;
-
-	public void turnUpdatesOnForObjectInstance( int theObject, AttributeHandleSet theAttributes )
-	    throws ObjectNotKnown, AttributeNotOwned, FederateInternalError;
-
-}
Index: codebase/src-java/portico/hla/rti13/java1/ConcurrentAccessAttempted.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/ConcurrentAccessAttempted.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/ConcurrentAccessAttempted.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class ConcurrentAccessAttempted extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public ConcurrentAccessAttempted( String reason )
-	{
-		super( reason );
-	}
-
-	public ConcurrentAccessAttempted( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public ConcurrentAccessAttempted()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public ConcurrentAccessAttempted( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public ConcurrentAccessAttempted( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/FederationExecutionDoesNotExist.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/FederationExecutionDoesNotExist.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/FederationExecutionDoesNotExist.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class FederationExecutionDoesNotExist extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public FederationExecutionDoesNotExist( String reason )
-	{
-		super( reason );
-	}
-
-	public FederationExecutionDoesNotExist( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-
-	public FederationExecutionDoesNotExist()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public FederationExecutionDoesNotExist( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public FederationExecutionDoesNotExist( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/AttributeHandleSetFactory.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/AttributeHandleSetFactory.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/AttributeHandleSetFactory.java	(working copy)
@@ -1,48 +0,0 @@
-/*
- *   Copyright 2008 The Portico Project
- *
- *   This file is part of portico.
- *
- *   portico is free software; you can redistribute it and/or modify
- *   it under the terms of the Common Developer and Distribution License (CDDL) 
- *   as published by Sun Microsystems. For more information see the LICENSE file.
- *   
- *   Use of this software is strictly AT YOUR OWN RISK!!!
- *   If something bad happens you do not have permission to come crying to me.
- *   (that goes for your lawyer as well)
- *
- */
-package hla.rti13.java1;
-
-public class AttributeHandleSetFactory
-{
-	//----------------------------------------------------------
-	//                    STATIC VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                   INSTANCE VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                      CONSTRUCTORS
-	//----------------------------------------------------------
-
-	private AttributeHandleSetFactory()
-	{
-		
-	}
-	
-	//----------------------------------------------------------
-	//                    INSTANCE METHODS
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                     STATIC METHODS
-	//----------------------------------------------------------
-	public static AttributeHandleSet create( int count ) throws MemoryExhausted, ValueCountExceeded
-	{
-		return new AttributeHandleSet();
-	}
-
-}
Index: codebase/src-java/portico/hla/rti13/java1/SpecifiedSaveLabelDoesNotExist.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/SpecifiedSaveLabelDoesNotExist.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/SpecifiedSaveLabelDoesNotExist.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class SpecifiedSaveLabelDoesNotExist extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public SpecifiedSaveLabelDoesNotExist( String reason )
-	{
-		super( reason );
-	}
-
-	public SpecifiedSaveLabelDoesNotExist( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public SpecifiedSaveLabelDoesNotExist()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public SpecifiedSaveLabelDoesNotExist( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public SpecifiedSaveLabelDoesNotExist( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/UnableToPerformSave.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/UnableToPerformSave.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/UnableToPerformSave.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class UnableToPerformSave extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public UnableToPerformSave( String reason )
-	{
-		super( reason );
-	}
-
-	public UnableToPerformSave( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public UnableToPerformSave()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public UnableToPerformSave( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public UnableToPerformSave( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/AttributeNotPublished.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/AttributeNotPublished.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/AttributeNotPublished.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class AttributeNotPublished extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public AttributeNotPublished( String reason )
-	{
-		super( reason );
-	}
-
-	public AttributeNotPublished( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public AttributeNotPublished()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public AttributeNotPublished( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public AttributeNotPublished( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/ObjectAlreadyRegistered.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/ObjectAlreadyRegistered.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/ObjectAlreadyRegistered.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class ObjectAlreadyRegistered extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public ObjectAlreadyRegistered( String reason )
-	{
-		super( reason );
-	}
-
-	public ObjectAlreadyRegistered( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public ObjectAlreadyRegistered()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public ObjectAlreadyRegistered( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public ObjectAlreadyRegistered( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/InteractionClassNotPublished.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/InteractionClassNotPublished.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/InteractionClassNotPublished.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class InteractionClassNotPublished extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public InteractionClassNotPublished( String reason )
-	{
-		super( reason );
-	}
-
-	public InteractionClassNotPublished( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public InteractionClassNotPublished()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public InteractionClassNotPublished( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public InteractionClassNotPublished( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/CouldNotDiscover.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/CouldNotDiscover.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/CouldNotDiscover.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class CouldNotDiscover extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public CouldNotDiscover( String reason )
-	{
-		super( reason );
-	}
-
-	public CouldNotDiscover( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public CouldNotDiscover()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public CouldNotDiscover( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public CouldNotDiscover( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/DeletePrivilegeNotHeld.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/DeletePrivilegeNotHeld.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/DeletePrivilegeNotHeld.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class DeletePrivilegeNotHeld extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public DeletePrivilegeNotHeld( String reason )
-	{
-		super( reason );
-	}
-
-	public DeletePrivilegeNotHeld( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public DeletePrivilegeNotHeld()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public DeletePrivilegeNotHeld( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public DeletePrivilegeNotHeld( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/TimeAdvanceWasNotInProgress.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/TimeAdvanceWasNotInProgress.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/TimeAdvanceWasNotInProgress.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class TimeAdvanceWasNotInProgress extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public TimeAdvanceWasNotInProgress( String reason )
-	{
-		super( reason );
-	}
-
-	public TimeAdvanceWasNotInProgress( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public TimeAdvanceWasNotInProgress()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public TimeAdvanceWasNotInProgress( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public TimeAdvanceWasNotInProgress( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/AsynchronousDeliveryAlreadyDisabled.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/AsynchronousDeliveryAlreadyDisabled.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/AsynchronousDeliveryAlreadyDisabled.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class AsynchronousDeliveryAlreadyDisabled extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public AsynchronousDeliveryAlreadyDisabled( String reason )
-	{
-		super( reason );
-	}
-
-	public AsynchronousDeliveryAlreadyDisabled( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public AsynchronousDeliveryAlreadyDisabled()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public AsynchronousDeliveryAlreadyDisabled( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public AsynchronousDeliveryAlreadyDisabled( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/ObjectClassNotKnown.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/ObjectClassNotKnown.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/ObjectClassNotKnown.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class ObjectClassNotKnown extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public ObjectClassNotKnown( String reason )
-	{
-		super( reason );
-	}
-
-	public ObjectClassNotKnown( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public ObjectClassNotKnown()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public ObjectClassNotKnown( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public ObjectClassNotKnown( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/AttributeHandleSet.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/AttributeHandleSet.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/AttributeHandleSet.java	(working copy)
@@ -1,112 +0,0 @@
-/*
- *   Copyright 2008 The Portico Project
- *
- *   This file is part of portico.
- *
- *   portico is free software; you can redistribute it and/or modify
- *   it under the terms of the Common Developer and Distribution License (CDDL) 
- *   as published by Sun Microsystems. For more information see the LICENSE file.
- *   
- *   Use of this software is strictly AT YOUR OWN RISK!!!
- *   If something bad happens you do not have permission to come crying to me.
- *   (that goes for your lawyer as well)
- *
- */
-package hla.rti13.java1;
-
-import java.util.Set;
-
-import org.portico.impl.hla13.types.HLA13AttributeHandleSet;
-
-public class AttributeHandleSet
-{
-	//----------------------------------------------------------
-	//                    STATIC VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                   INSTANCE VARIABLES
-	//----------------------------------------------------------
-	private HLA13AttributeHandleSet set;
-
-	//----------------------------------------------------------
-	//                      CONSTRUCTORS
-	//----------------------------------------------------------
-
-	protected AttributeHandleSet()
-	{
-		this.set = new HLA13AttributeHandleSet();
-	}
-	
-	public AttributeHandleSet( Set<Integer> handles )
-	{
-		this.set = new HLA13AttributeHandleSet( handles );
-	}
-	
-	//----------------------------------------------------------
-	//                    INSTANCE METHODS
-	//----------------------------------------------------------
-	public void add( int handle ) throws ArrayIndexOutOfBounds, AttributeNotDefined
-	{
-		set.add( handle );
-	}
-
-	public void empty()
-	{
-		set.empty();
-	}
-
-	public int getHandle( int i ) throws ArrayIndexOutOfBounds
-	{
-		return set.get( i );
-	}
-
-	public boolean isEmpty()
-	{
-		return set.isEmpty();
-	}
-
-	public boolean isMember( int handle )
-	{
-		return set.isMember( handle );
-	}
-
-	public void remove( int handle ) throws AttributeNotDefined
-	{
-		set.remove( handle );
-	}
-
-	public int size()
-	{
-		return set.size();
-	}
-
-	public Object clone()
-	{
-		return set.clone();
-	}
-
-	public boolean equals( Object obj )
-	{
-		return set.equals( obj );
-	}
-
-	public int hashCode()
-	{
-		return set.hashCode();
-	}
-
-	public String toString()
-	{
-		return set.toString();
-	}
-
-	public HLA13AttributeHandleSet toPorticoSet()
-	{
-		return this.set;
-	}
-
-	//----------------------------------------------------------
-	//                     STATIC METHODS
-	//----------------------------------------------------------
-}
Index: codebase/src-java/portico/hla/rti13/java1/CouldNotRestore.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/CouldNotRestore.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/CouldNotRestore.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class CouldNotRestore extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public CouldNotRestore( String reason )
-	{
-		super( reason );
-	}
-
-	public CouldNotRestore( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public CouldNotRestore()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public CouldNotRestore( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public CouldNotRestore( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/RTIambassador.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/RTIambassador.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/RTIambassador.java	(working copy)
@@ -1,11 +0,0 @@
-package hla.rti13.java1;
-
-import org.portico.impl.hla13.RtiJava1Ambassador;
-
-public class RTIambassador extends RtiJava1Ambassador
-{
-	public RTIambassador() throws MemoryExhausted, RTIinternalError
-	{
-		super();
-	}
-}
Index: codebase/src-java/portico/hla/rti13/java1/RTIconstants.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/RTIconstants.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/RTIconstants.java	(working copy)
@@ -1,25 +0,0 @@
-package hla.rti13.java1;
-
-import org.portico.shared.PorticoConstants;
-
-/**
- * As with {@link MemoryExhausted}, this class is included in here only to prevent federates that
- * reference these variabled from breaking. These value have no use in Portico.
- */
-public final class RTIconstants
-{
-	public static final int MAX_FEDERATION           = 128; // arbitrary for now
-	public static final int MAX_FEDERATE             = PorticoConstants.MAX_FEDERATES;
-	public static final int MAX_NAME_LENGTH          = Integer.MAX_VALUE; // shouldn't be a problem
-	public static final int MAX_USER_TAG_LENGTH      = Integer.MAX_VALUE; // shouldn't be a problem
-	public static final int MAX_OBJECT_CLASSES       = Integer.MAX_VALUE; // shouldn't be a problem
-	public static final int MAX_ATTRIBUTES_PER_CLASS = Integer.MAX_VALUE; // shouldn't be a problem
-	public static final int MAX_INTERACTION_CLASSES  = Integer.MAX_VALUE; // shouldn't be a problem
-	public static final int MAX_PARAMETERS_PER_CLASS = Integer.MAX_VALUE; // shouldn't be a problem
-	public static final int MAX_SPACES               = Integer.MAX_VALUE; // shouldn't be a problem
-	public static final int MAX_DIMENSIONS_PER_SPACE = Integer.MAX_VALUE; // shouldn't be a problem
-	public static final long MIN_EXTENT              = PorticoConstants.MIN_EXTENT;
-	public static final long MAX_EXTENT              = PorticoConstants.MAX_EXTENT;
-	public static final String DEFAULT_SPACE_NAME    = "defaultSpace";
-	public static final String DEFAULT_SPACE_DIMENSION_NAME = "dimension";
-}
Index: codebase/src-java/portico/hla/rti13/java1/SuppliedAttributes.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/SuppliedAttributes.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/SuppliedAttributes.java	(working copy)
@@ -1,113 +0,0 @@
-/*
- *   Copyright 2008 The Portico Project
- *
- *   This file is part of portico.
- *
- *   portico is free software; you can redistribute it and/or modify
- *   it under the terms of the Common Developer and Distribution License (CDDL) 
- *   as published by Sun Microsystems. For more information see the LICENSE file.
- *   
- *   Use of this software is strictly AT YOUR OWN RISK!!!
- *   If something bad happens you do not have permission to come crying to me.
- *   (that goes for your lawyer as well)
- *
- */
-package hla.rti13.java1;
-
-import org.portico.impl.hla13.types.HLA13SuppliedAttributes;
-
-public class SuppliedAttributes
-{
-	//----------------------------------------------------------
-	//                    STATIC VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                   INSTANCE VARIABLES
-	//----------------------------------------------------------
-	private HLA13SuppliedAttributes attributes;
-
-	//----------------------------------------------------------
-	//                      CONSTRUCTORS
-	//----------------------------------------------------------
-
-	protected SuppliedAttributes()
-	{
-		this.attributes = new HLA13SuppliedAttributes();
-	}
-	
-	//----------------------------------------------------------
-	//                    INSTANCE METHODS
-	//----------------------------------------------------------
-	public void add( int h, byte[] buff ) throws ValueLengthExceeded, ValueCountExceeded
-	{
-		this.attributes.add( h, buff );
-	}
-
-	public void empty()
-	{
-		this.attributes.empty();
-	}
-
-	public int getHandle( int i ) throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			return this.attributes.getHandle( i );
-		}
-		catch( hla.rti.ArrayIndexOutOfBounds e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-
-	public byte[] getValue( int i ) throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			return this.attributes.getValue( i );
-		}
-		catch( hla.rti.ArrayIndexOutOfBounds e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-
-	public int getValueLength( int i ) throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			return this.attributes.getValueLength( i );
-		}
-		catch( hla.rti.ArrayIndexOutOfBounds e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-
-	public void remove( int h ) throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			this.attributes.remove( h );
-		}
-		catch( hla.rti.ArrayIndexOutOfBounds e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-
-	public int size()
-	{
-		return attributes.size();
-	}
-	
-	public HLA13SuppliedAttributes toPorticoMap()
-	{
-		return this.attributes;
-	}
-	
-	//----------------------------------------------------------
-	//                     STATIC METHODS
-	//----------------------------------------------------------
-}
Index: codebase/src-java/portico/hla/rti13/java1/ArrayIndexOutOfBounds.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/ArrayIndexOutOfBounds.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/ArrayIndexOutOfBounds.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class ArrayIndexOutOfBounds extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public ArrayIndexOutOfBounds( String reason )
-	{
-		super( reason );
-	}
-
-	public ArrayIndexOutOfBounds( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public ArrayIndexOutOfBounds()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public ArrayIndexOutOfBounds( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public ArrayIndexOutOfBounds( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/FederationTimeAlreadyPassed.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/FederationTimeAlreadyPassed.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/FederationTimeAlreadyPassed.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class FederationTimeAlreadyPassed extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public FederationTimeAlreadyPassed( String reason )
-	{
-		super( reason );
-	}
-
-	public FederationTimeAlreadyPassed( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public FederationTimeAlreadyPassed()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public FederationTimeAlreadyPassed( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public FederationTimeAlreadyPassed( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/ErrorReadingFED.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/ErrorReadingFED.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/ErrorReadingFED.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class ErrorReadingFED extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public ErrorReadingFED( String reason )
-	{
-		super( reason );
-	}
-
-	public ErrorReadingFED( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public ErrorReadingFED()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public ErrorReadingFED( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public ErrorReadingFED( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/EnableTimeRegulationPending.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/EnableTimeRegulationPending.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/EnableTimeRegulationPending.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class EnableTimeRegulationPending extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public EnableTimeRegulationPending( String reason )
-	{
-		super( reason );
-	}
-
-	public EnableTimeRegulationPending( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public EnableTimeRegulationPending()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public EnableTimeRegulationPending( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public EnableTimeRegulationPending( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/InvalidTransportationHandle.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/InvalidTransportationHandle.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/InvalidTransportationHandle.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class InvalidTransportationHandle extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public InvalidTransportationHandle( String reason )
-	{
-		super( reason );
-	}
-
-	public InvalidTransportationHandle( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public InvalidTransportationHandle()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public InvalidTransportationHandle( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public InvalidTransportationHandle( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/AsynchronousDeliveryAlreadyEnabled.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/AsynchronousDeliveryAlreadyEnabled.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/AsynchronousDeliveryAlreadyEnabled.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class AsynchronousDeliveryAlreadyEnabled extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public AsynchronousDeliveryAlreadyEnabled( String reason )
-	{
-		super( reason );
-	}
-
-	public AsynchronousDeliveryAlreadyEnabled( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public AsynchronousDeliveryAlreadyEnabled()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public AsynchronousDeliveryAlreadyEnabled( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public AsynchronousDeliveryAlreadyEnabled( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/FederateNotExecutionMember.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/FederateNotExecutionMember.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/FederateNotExecutionMember.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class FederateNotExecutionMember extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public FederateNotExecutionMember( String reason )
-	{
-		super( reason );
-	}
-
-	public FederateNotExecutionMember( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public FederateNotExecutionMember()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public FederateNotExecutionMember( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public FederateNotExecutionMember( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/AttributeNotOwned.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/AttributeNotOwned.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/AttributeNotOwned.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class AttributeNotOwned extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public AttributeNotOwned( String reason )
-	{
-		super( reason );
-	}
-
-	public AttributeNotOwned( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public AttributeNotOwned()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public AttributeNotOwned( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public AttributeNotOwned( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/MemoryExhausted.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/MemoryExhausted.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/MemoryExhausted.java	(working copy)
@@ -1,42 +0,0 @@
-package hla.rti13.java1;
-
-/**
- * This class will <b>NEVER BE THROWN BY Portico</b> (knowingly :P). I include it here only because
- * it is part of the DMSO rti13.java1 pacakge and people may be catching it for some reason.
- */
-public class MemoryExhausted extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public MemoryExhausted( String reason )
-	{
-		super( reason );
-	}
-
-	public MemoryExhausted( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public MemoryExhausted()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public MemoryExhausted( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public MemoryExhausted( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/DimensionNotDefined.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/DimensionNotDefined.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/DimensionNotDefined.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class DimensionNotDefined extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public DimensionNotDefined( String reason )
-	{
-		super( reason );
-	}
-
-	public DimensionNotDefined( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public DimensionNotDefined()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public DimensionNotDefined( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public DimensionNotDefined( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/ReceivedInteraction.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/ReceivedInteraction.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/ReceivedInteraction.java	(working copy)
@@ -1,113 +0,0 @@
-/*
- *   Copyright 2008 The Portico Project
- *
- *   This file is part of portico.
- *
- *   portico is free software; you can redistribute it and/or modify
- *   it under the terms of the Common Developer and Distribution License (CDDL) 
- *   as published by Sun Microsystems. For more information see the LICENSE file.
- *   
- *   Use of this software is strictly AT YOUR OWN RISK!!!
- *   If something bad happens you do not have permission to come crying to me.
- *   (that goes for your lawyer as well)
- *
- */
-package hla.rti13.java1;
-
-import java.util.HashMap;
-
-import org.portico.impl.hla13.types.HLA13ReceivedInteraction;
-
-public class ReceivedInteraction
-{
-	//----------------------------------------------------------
-	//                    STATIC VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                   INSTANCE VARIABLES
-	//----------------------------------------------------------
-	private HLA13ReceivedInteraction interaction;
-
-	//----------------------------------------------------------
-	//                      CONSTRUCTORS
-	//----------------------------------------------------------
-
-	protected ReceivedInteraction()
-	{
-		
-	}
-	
-	public ReceivedInteraction( HashMap<Integer,byte[]> params )
-	{
-		this.interaction = new HLA13ReceivedInteraction( params );
-	}
-
-	//----------------------------------------------------------
-	//                    INSTANCE METHODS
-	//----------------------------------------------------------
-	public void empty()
-	{
-		interaction.empty();
-	}
-
-	public int getHandle( int i ) throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			return interaction.getHandle( i );
-		}
-		catch( hla.rti.ArrayIndexOutOfBounds e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-
-	public int getOrderType() throws InvalidHandleValuePairSetContext
-	{
-		return interaction.getOrderType();
-	}
-
-	public Region getRegion() throws InvalidHandleValuePairSetContext
-	{
-		return new Region( interaction.getRegion() );
-	}
-
-	public int getTransportType() throws InvalidHandleValuePairSetContext
-	{
-		return interaction.getTransportType();
-	}
-
-	public byte[] getValue( int i ) throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			return interaction.getValue( i );
-		}
-		catch( hla.rti.ArrayIndexOutOfBounds e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-
-	public int getValueLength( int i ) throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			return interaction.getValueLength( i );
-		}
-		catch( hla.rti.ArrayIndexOutOfBounds e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-
-	public int size()
-	{
-		return interaction.size();
-	}
-	
-	//----------------------------------------------------------
-	//                     STATIC METHODS
-	//----------------------------------------------------------
-}
Index: codebase/src-java/portico/hla/rti13/java1/RegionInUse.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/RegionInUse.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/RegionInUse.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class RegionInUse extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public RegionInUse( String reason )
-	{
-		super( reason );
-	}
-
-	public RegionInUse( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public RegionInUse()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public RegionInUse( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public RegionInUse( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/CouldNotOpenFED.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/CouldNotOpenFED.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/CouldNotOpenFED.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class CouldNotOpenFED extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public CouldNotOpenFED( String reason )
-	{
-		super( reason );
-	}
-
-	public CouldNotOpenFED( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public CouldNotOpenFED()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public CouldNotOpenFED( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public CouldNotOpenFED( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/AttributeAlreadyBeingAcquired.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/AttributeAlreadyBeingAcquired.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/AttributeAlreadyBeingAcquired.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class AttributeAlreadyBeingAcquired extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public AttributeAlreadyBeingAcquired( String reason )
-	{
-		super( reason );
-	}
-
-	public AttributeAlreadyBeingAcquired( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public AttributeAlreadyBeingAcquired()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public AttributeAlreadyBeingAcquired( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public AttributeAlreadyBeingAcquired( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/OwnershipAcquisitionPending.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/OwnershipAcquisitionPending.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/OwnershipAcquisitionPending.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class OwnershipAcquisitionPending extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public OwnershipAcquisitionPending( String reason )
-	{
-		super( reason );
-	}
-
-	public OwnershipAcquisitionPending( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public OwnershipAcquisitionPending()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public OwnershipAcquisitionPending( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public OwnershipAcquisitionPending( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/InteractionClassNotSubscribed.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/InteractionClassNotSubscribed.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/InteractionClassNotSubscribed.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class InteractionClassNotSubscribed extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public InteractionClassNotSubscribed( String reason )
-	{
-		super( reason );
-	}
-
-	public InteractionClassNotSubscribed( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public InteractionClassNotSubscribed()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public InteractionClassNotSubscribed( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public InteractionClassNotSubscribed( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/ObjectClassNotDefined.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/ObjectClassNotDefined.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/ObjectClassNotDefined.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class ObjectClassNotDefined extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public ObjectClassNotDefined( String reason )
-	{
-		super( reason );
-	}
-
-	public ObjectClassNotDefined( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public ObjectClassNotDefined()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public ObjectClassNotDefined( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public ObjectClassNotDefined( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/FederateAlreadyExecutionMember.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/FederateAlreadyExecutionMember.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/FederateAlreadyExecutionMember.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class FederateAlreadyExecutionMember extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public FederateAlreadyExecutionMember( String reason )
-	{
-		super( reason );
-	}
-
-	public FederateAlreadyExecutionMember( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public FederateAlreadyExecutionMember()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public FederateAlreadyExecutionMember( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public FederateAlreadyExecutionMember( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/NameNotFound.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/NameNotFound.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/NameNotFound.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class NameNotFound extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public NameNotFound( String reason )
-	{
-		super( reason );
-	}
-
-	public NameNotFound( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public NameNotFound()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public NameNotFound( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public NameNotFound( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/InvalidLookahead.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/InvalidLookahead.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/InvalidLookahead.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class InvalidLookahead extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public InvalidLookahead( String reason )
-	{
-		super( reason );
-	}
-
-	public InvalidLookahead( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public InvalidLookahead()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public InvalidLookahead( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public InvalidLookahead( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/FederateHandleSetFactory.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/FederateHandleSetFactory.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/FederateHandleSetFactory.java	(working copy)
@@ -1,48 +0,0 @@
-/*
- *   Copyright 2008 The Portico Project
- *
- *   This file is part of portico.
- *
- *   portico is free software; you can redistribute it and/or modify
- *   it under the terms of the Common Developer and Distribution License (CDDL) 
- *   as published by Sun Microsystems. For more information see the LICENSE file.
- *   
- *   Use of this software is strictly AT YOUR OWN RISK!!!
- *   If something bad happens you do not have permission to come crying to me.
- *   (that goes for your lawyer as well)
- *
- */
-package hla.rti13.java1;
-
-public class FederateHandleSetFactory
-{
-	//----------------------------------------------------------
-	//                    STATIC VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                   INSTANCE VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                      CONSTRUCTORS
-	//----------------------------------------------------------
-
-	private FederateHandleSetFactory()
-	{
-		
-	}
-	
-	//----------------------------------------------------------
-	//                    INSTANCE METHODS
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                     STATIC METHODS
-	//----------------------------------------------------------
-	public static FederateHandleSet create( int count ) throws MemoryExhausted, ValueCountExceeded
-	{
-		return new FederateHandleSet();
-	}
-
-}
Index: codebase/src-java/portico/hla/rti13/java1/EnableTimeConstrainedWasNotPending.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/EnableTimeConstrainedWasNotPending.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/EnableTimeConstrainedWasNotPending.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class EnableTimeConstrainedWasNotPending extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public EnableTimeConstrainedWasNotPending( String reason )
-	{
-		super( reason );
-	}
-
-	public EnableTimeConstrainedWasNotPending( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public EnableTimeConstrainedWasNotPending()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public EnableTimeConstrainedWasNotPending( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public EnableTimeConstrainedWasNotPending( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/SuppliedParametersFactory.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/SuppliedParametersFactory.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/SuppliedParametersFactory.java	(working copy)
@@ -1,48 +0,0 @@
-/*
- *   Copyright 2008 The Portico Project
- *
- *   This file is part of portico.
- *
- *   portico is free software; you can redistribute it and/or modify
- *   it under the terms of the Common Developer and Distribution License (CDDL) 
- *   as published by Sun Microsystems. For more information see the LICENSE file.
- *   
- *   Use of this software is strictly AT YOUR OWN RISK!!!
- *   If something bad happens you do not have permission to come crying to me.
- *   (that goes for your lawyer as well)
- *
- */
-package hla.rti13.java1;
-
-public class SuppliedParametersFactory
-{
-	//----------------------------------------------------------
-	//                    STATIC VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                   INSTANCE VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                      CONSTRUCTORS
-	//----------------------------------------------------------
-
-	private SuppliedParametersFactory()
-	{
-		
-	}
-
-	//----------------------------------------------------------
-	//                    INSTANCE METHODS
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                     STATIC METHODS
-	//----------------------------------------------------------
-	public static SuppliedParameters create( int count )
-		throws MemoryExhausted, ValueCountExceeded, HandleValuePairMaximumExceeded
-	{
-		return new SuppliedParameters();
-	}
-}
Index: codebase/src-java/portico/hla/rti13/java1/InvalidExtents.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/InvalidExtents.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/InvalidExtents.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class InvalidExtents extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public InvalidExtents( String reason )
-	{
-		super( reason );
-	}
-
-	public InvalidExtents( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public InvalidExtents()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public InvalidExtents( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public InvalidExtents( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/SynchronizationPointLabelWasNotAnnounced.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/SynchronizationPointLabelWasNotAnnounced.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/SynchronizationPointLabelWasNotAnnounced.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class SynchronizationPointLabelWasNotAnnounced extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public SynchronizationPointLabelWasNotAnnounced( String reason )
-	{
-		super( reason );
-	}
-
-	public SynchronizationPointLabelWasNotAnnounced( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public SynchronizationPointLabelWasNotAnnounced()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public SynchronizationPointLabelWasNotAnnounced( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public SynchronizationPointLabelWasNotAnnounced( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/AttributeNotDefined.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/AttributeNotDefined.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/AttributeNotDefined.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class AttributeNotDefined extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public AttributeNotDefined( String reason )
-	{
-		super( reason );
-	}
-
-	public AttributeNotDefined( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public AttributeNotDefined()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public AttributeNotDefined( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public AttributeNotDefined( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/ReflectedAttributes.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/ReflectedAttributes.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/ReflectedAttributes.java	(working copy)
@@ -1,136 +0,0 @@
-/*
- *   Copyright 2008 The Portico Project
- *
- *   This file is part of portico.
- *
- *   portico is free software; you can redistribute it and/or modify
- *   it under the terms of the Common Developer and Distribution License (CDDL) 
- *   as published by Sun Microsystems. For more information see the LICENSE file.
- *   
- *   Use of this software is strictly AT YOUR OWN RISK!!!
- *   If something bad happens you do not have permission to come crying to me.
- *   (that goes for your lawyer as well)
- *
- */
-package hla.rti13.java1;
-
-import java.util.HashMap;
-
-import org.portico.impl.hla13.types.HLA13ReflectedAttributes;
-
-public class ReflectedAttributes
-{
-	//----------------------------------------------------------
-	//                    STATIC VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                   INSTANCE VARIABLES
-	//----------------------------------------------------------
-	private HLA13ReflectedAttributes attributes;
-
-	//----------------------------------------------------------
-	//                      CONSTRUCTORS
-	//----------------------------------------------------------
-
-	protected ReflectedAttributes()
-	{
-		
-	}
-	
-	public ReflectedAttributes( HashMap<Integer,byte[]> params )
-	{
-		this.attributes = new HLA13ReflectedAttributes( params );
-	}
-
-	
-	//----------------------------------------------------------
-	//                    INSTANCE METHODS
-	//----------------------------------------------------------
-	public void empty()
-	{
-		attributes.empty();
-	}
-
-	public int getHandle( int i ) throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			return attributes.getHandle( i );
-		}
-		catch( Exception e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-
-	public int getOrderType( int i ) throws ArrayIndexOutOfBounds, InvalidHandleValuePairSetContext
-	{
-		try
-		{
-			return attributes.getOrderType( i );
-		}
-		catch( hla.rti.ArrayIndexOutOfBounds e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-
-	public Region getRegion( int i ) throws ArrayIndexOutOfBounds, InvalidHandleValuePairSetContext
-	{
-		try
-		{
-			return new Region( attributes.getRegion(i) );
-		}
-		catch( hla.rti.ArrayIndexOutOfBounds e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-
-	public int getTransportType( int i ) throws ArrayIndexOutOfBounds,
-	                                            InvalidHandleValuePairSetContext
-	{
-		try
-		{
-			return attributes.getTransportType( i );
-		}
-		catch( hla.rti.ArrayIndexOutOfBounds e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-
-	public byte[] getValue( int i ) throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			return attributes.getValue( i );
-		}
-		catch( hla.rti.ArrayIndexOutOfBounds e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-
-	public int getValueLength( int i ) throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			return attributes.getValueLength( i );
-		}
-		catch( hla.rti.ArrayIndexOutOfBounds e )
-		{
-			throw new ArrayIndexOutOfBounds( e.getMessage() );
-		}
-	}
-
-	public int size()
-	{
-		return attributes.size();
-	}
-	
-	//----------------------------------------------------------
-	//                     STATIC METHODS
-	//----------------------------------------------------------
-}
Index: codebase/src-java/portico/hla/rti13/java1/ValueLengthExceeded.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/ValueLengthExceeded.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/ValueLengthExceeded.java	(working copy)
@@ -1,42 +0,0 @@
-package hla.rti13.java1;
-
-/**
- * This class will <b>NEVER BE THROWN BY Portico</b> (knowingly :P). I include it here only because
- * it is part of the DMSO rti13.java1 pacakge and people may be catching it for some reason.
- */
-public class ValueLengthExceeded extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public ValueLengthExceeded( String reason )
-	{
-		super( reason );
-	}
-
-	public ValueLengthExceeded( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public ValueLengthExceeded()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public ValueLengthExceeded( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public ValueLengthExceeded( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/InteractionClassNotDefined.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/InteractionClassNotDefined.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/InteractionClassNotDefined.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class InteractionClassNotDefined extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public InteractionClassNotDefined( String reason )
-	{
-		super( reason );
-	}
-
-	public InteractionClassNotDefined( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public InteractionClassNotDefined()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public InteractionClassNotDefined( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public InteractionClassNotDefined( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/InvalidFederationTime.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/InvalidFederationTime.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/InvalidFederationTime.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class InvalidFederationTime extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public InvalidFederationTime( String reason )
-	{
-		super( reason );
-	}
-
-	public InvalidFederationTime( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public InvalidFederationTime()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public InvalidFederationTime( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public InvalidFederationTime( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/NullFederateAmbassador.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/NullFederateAmbassador.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/NullFederateAmbassador.java	(working copy)
@@ -1,224 +0,0 @@
-package hla.rti13.java1;
-
-public class NullFederateAmbassador implements FederateAmbassador
-{
-	public void announceSynchronizationPoint( String label, String tag )
-	    throws FederateInternalError
-	{
-	}
-
-	public void attributeIsNotOwned( int theObject, int theAttribute ) throws ObjectNotKnown,
-	    AttributeNotKnown, FederateInternalError
-	{
-	}
-
-	public void attributeOwnedByRTI( int theObject, int theAttribute ) throws ObjectNotKnown,
-	    AttributeNotKnown, FederateInternalError
-	{
-	}
-
-	public void attributeOwnershipAcquisitionNotification( int theObject,
-	                                                       AttributeHandleSet securedAttributes )
-	    throws ObjectNotKnown, AttributeNotKnown, AttributeAcquisitionWasNotRequested,
-	    AttributeAlreadyOwned, AttributeNotPublished, FederateInternalError
-	{
-	}
-
-	public void attributeOwnershipDivestitureNotification( int theObject,
-	                                                       AttributeHandleSet releasedAttributes )
-	    throws ObjectNotKnown, AttributeNotKnown, AttributeNotOwned,
-	    AttributeDivestitureWasNotRequested, FederateInternalError
-	{
-	}
-
-	public void attributeOwnershipUnavailable( int theObject, AttributeHandleSet theAttributes )
-	    throws ObjectNotKnown, AttributeNotKnown, AttributeNotDefined, AttributeAlreadyOwned,
-	    AttributeAcquisitionWasNotRequested, FederateInternalError
-	{
-	}
-
-	public void attributesInScope( int theObject, AttributeHandleSet theAttributes )
-	    throws ObjectNotKnown, AttributeNotKnown, FederateInternalError
-	{
-	}
-
-	public void attributesOutOfScope( int theObject, AttributeHandleSet theAttributes )
-	    throws ObjectNotKnown, AttributeNotKnown, FederateInternalError
-	{
-	}
-
-	public void confirmAttributeOwnershipAcquisitionCancellation( int theObject,
-	                                                              AttributeHandleSet theAttributes )
-	    throws ObjectNotKnown, AttributeNotKnown, AttributeNotDefined, AttributeAlreadyOwned,
-	    AttributeAcquisitionWasNotCanceled, FederateInternalError
-	{
-	}
-
-	public void discoverObjectInstance( int theObject, int theObjectClass, String theObjectName )
-	    throws CouldNotDiscover, ObjectClassNotKnown, FederateInternalError
-	{
-	}
-
-	public void federationNotRestored() throws FederateInternalError
-	{
-	}
-
-	public void federationNotSaved() throws FederateInternalError
-	{
-	}
-
-	public void federationRestoreBegun() throws FederateInternalError
-	{
-	}
-
-	public void federationRestored() throws FederateInternalError
-	{
-	}
-
-	public void federationSaved() throws FederateInternalError
-	{
-	}
-
-	public void federationSynchronized( String label ) throws FederateInternalError
-	{
-	}
-
-	public void informAttributeOwnership( int theObject, int theAttribute, int theOwner )
-	    throws ObjectNotKnown, AttributeNotKnown, FederateInternalError
-	{
-	}
-
-	public void initiateFederateRestore( String label, int handle )
-	    throws SpecifiedSaveLabelDoesNotExist, CouldNotRestore, FederateInternalError
-	{
-	}
-
-	public void initiateFederateSave( String label ) throws UnableToPerformSave,
-	    FederateInternalError
-	{
-	}
-
-	public void provideAttributeValueUpdate( int theObject, AttributeHandleSet theAttributes )
-	    throws ObjectNotKnown, AttributeNotKnown, AttributeNotOwned, FederateInternalError
-	{
-	}
-
-	public void receiveInteraction( int theInteraction, ReceivedInteraction theParameters,
-	                                byte[] theTime, String theTag, EventRetractionHandle theHandle )
-	    throws InteractionClassNotKnown, InteractionParameterNotKnown, InvalidFederationTime,
-	    FederateInternalError
-	{
-	}
-
-	public void receiveInteraction( int theInteraction, ReceivedInteraction theParameters,
-	                                String theTag ) throws InteractionClassNotKnown,
-	    InteractionParameterNotKnown, FederateInternalError
-	{
-	}
-
-	public void reflectAttributeValues( int theObject, ReflectedAttributes theAttributes,
-	                                    byte[] theTime, String theTag,
-	                                    EventRetractionHandle theHandle ) throws ObjectNotKnown,
-	    AttributeNotKnown, FederateOwnsAttributes, InvalidFederationTime, FederateInternalError
-	{
-	}
-
-	public void reflectAttributeValues( int theObject, ReflectedAttributes theAttributes,
-	                                    String theTag ) throws ObjectNotKnown, AttributeNotKnown,
-	    FederateOwnsAttributes, FederateInternalError
-	{
-	}
-
-	public void removeObjectInstance( int theObject, byte[] theTime, String theTag,
-	                                  EventRetractionHandle theHandle ) throws ObjectNotKnown,
-	    InvalidFederationTime, FederateInternalError
-	{
-	}
-
-	public void removeObjectInstance( int theObject, String theTag ) throws ObjectNotKnown,
-	    FederateInternalError
-	{
-	}
-
-	public void requestAttributeOwnershipAssumption( int theObject,
-	                                                 AttributeHandleSet offeredAttributes,
-	                                                 String theTag ) throws ObjectNotKnown,
-	    AttributeNotKnown, AttributeAlreadyOwned, AttributeNotPublished, FederateInternalError
-	{
-	}
-
-	public void requestAttributeOwnershipRelease( int theObject,
-	                                              AttributeHandleSet candidateAttributes,
-	                                              String theTag ) throws ObjectNotKnown,
-	    AttributeNotKnown, AttributeNotOwned, FederateInternalError
-	{
-	}
-
-	public void requestFederationRestoreFailed( String label, String reason )
-	    throws FederateInternalError
-	{
-	}
-
-	public void requestFederationRestoreSucceeded( String label ) throws FederateInternalError
-	{
-	}
-
-	public void requestRetraction( EventRetractionHandle theHandle ) throws EventNotKnown,
-	    FederateInternalError
-	{
-	}
-
-	public void startRegistrationForObjectClass( int theClass ) throws ObjectClassNotPublished,
-	    FederateInternalError
-	{
-	}
-
-	public void stopRegistrationForObjectClass( int theClass ) throws ObjectClassNotPublished,
-	    FederateInternalError
-	{
-	}
-
-	public void synchronizationPointRegistrationFailed( String label ) throws FederateInternalError
-	{
-	}
-
-	public void synchronizationPointRegistrationSucceeded( String label )
-	    throws FederateInternalError
-	{
-	}
-
-	public void timeAdvanceGrant( byte[] theTime ) throws InvalidFederationTime,
-	    TimeAdvanceWasNotInProgress, FederationTimeAlreadyPassed, FederateInternalError
-	{
-	}
-
-	public void timeConstrainedEnabled( byte[] theFederateTime ) throws InvalidFederationTime,
-	    EnableTimeConstrainedWasNotPending, FederateInternalError
-	{
-	}
-
-	public void timeRegulationEnabled( byte[] theFederateTime ) throws InvalidFederationTime,
-	    EnableTimeRegulationWasNotPending, FederateInternalError
-	{
-	}
-
-	public void turnInteractionsOff( int theHandle ) throws InteractionClassNotPublished,
-	    FederateInternalError
-	{
-	}
-
-	public void turnInteractionsOn( int theHandle ) throws InteractionClassNotPublished,
-	    FederateInternalError
-	{
-	}
-
-	public void turnUpdatesOffForObjectInstance( int theObject, AttributeHandleSet theAttributes )
-	    throws ObjectNotKnown, AttributeNotOwned, FederateInternalError
-	{
-	}
-
-	public void turnUpdatesOnForObjectInstance( int theObject, AttributeHandleSet theAttributes )
-	    throws ObjectNotKnown, AttributeNotOwned, FederateInternalError
-	{
-	}
-}
Index: codebase/src-java/portico/hla/rti13/java1/FederateHandleSet.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/FederateHandleSet.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/FederateHandleSet.java	(working copy)
@@ -1,100 +0,0 @@
-/*
- *   Copyright 2008 The Portico Project
- *
- *   This file is part of portico.
- *
- *   portico is free software; you can redistribute it and/or modify
- *   it under the terms of the Common Developer and Distribution License (CDDL) 
- *   as published by Sun Microsystems. For more information see the LICENSE file.
- *   
- *   Use of this software is strictly AT YOUR OWN RISK!!!
- *   If something bad happens you do not have permission to come crying to me.
- *   (that goes for your lawyer as well)
- *
- */
-package hla.rti13.java1;
-
-import org.portico.impl.hla13.types.HLA13FederateHandleSet;
-
-public class FederateHandleSet
-{
-	//----------------------------------------------------------
-	//                    STATIC VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                   INSTANCE VARIABLES
-	//----------------------------------------------------------
-	private HLA13FederateHandleSet set;
-
-	//----------------------------------------------------------
-	//                      CONSTRUCTORS
-	//----------------------------------------------------------
-
-	protected FederateHandleSet()
-	{
-		this.set = new HLA13FederateHandleSet();
-	}
-	
-	//----------------------------------------------------------
-	//                    INSTANCE METHODS
-	//----------------------------------------------------------
-	public void add( int handle ) throws ArrayIndexOutOfBounds, AttributeNotDefined
-	{
-		set.add( handle );
-	}
-
-	public void empty()
-	{
-		set.empty();
-	}
-
-	public int getHandle( int i ) throws ArrayIndexOutOfBounds
-	{
-		return set.get( i );
-	}
-
-	public boolean isMember( int handle )
-	{
-		return set.isMember( handle );
-	}
-
-	public void remove( int handle ) throws AttributeNotDefined
-	{
-		set.remove( handle );
-	}
-
-	public int size()
-	{
-		return set.size();
-	}
-
-	public Object clone()
-	{
-		return set.clone();
-	}
-
-	public boolean equals( Object obj )
-	{
-		return set.equals( obj );
-	}
-
-	public int hashCode()
-	{
-		return set.hashCode();
-	}
-
-	public String toString()
-	{
-		return set.toString();
-	}
-
-	public HLA13FederateHandleSet toPorticoSet()
-	{
-		return this.set;
-	}
-
-	//----------------------------------------------------------
-	//                     STATIC METHODS
-	//----------------------------------------------------------
-}
Index: codebase/src-java/portico/hla/rti13/java1/EncodingHelpers.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/EncodingHelpers.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/EncodingHelpers.java	(working copy)
@@ -1,278 +0,0 @@
-package hla.rti13.java1;
-
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.IOException;
-
-public class EncodingHelpers
-{
-	public static byte[] encodeBoolean( boolean value ) throws RTIinternalError
-	{
-		try
-		{
-			ByteArrayOutputStream obuffer = new ByteArrayOutputStream();
-			DataOutputStream ostream = new DataOutputStream( obuffer );
-			ostream.writeBoolean( value );
-			ostream.flush();
-
-			return obuffer.toByteArray();
-		}
-		catch( IOException e )
-		{
-			throw new RTIinternalError( "error encoding boolean: " + e.getMessage() );
-		}
-	}
-
-	public static boolean decodeBoolean( byte[] bytes ) throws FederateInternalError
-	{
-		try
-		{
-			ByteArrayInputStream ibuffer = new ByteArrayInputStream( bytes );
-			DataInputStream istream = new DataInputStream( ibuffer );
-
-			return istream.readBoolean();
-		}
-		catch( IOException e )
-		{
-			throw new FederateInternalError( "error decoding boolean: " + e.getMessage() );
-		}
-	}
-
-	public static byte[] encodeByte( byte value ) throws RTIinternalError
-	{
-		try
-		{
-			ByteArrayOutputStream obuffer = new ByteArrayOutputStream();
-			DataOutputStream ostream = new DataOutputStream( obuffer );
-			ostream.writeByte( value );
-			ostream.flush();
-
-			return obuffer.toByteArray();
-		}
-		catch( IOException e )
-		{
-			throw new RTIinternalError( "error encoding byte: " + e.getMessage() );
-		}
-	}
-
-	public static byte decodeByte( byte[] bytes ) throws FederateInternalError
-	{
-		try
-		{
-			ByteArrayInputStream ibuffer = new ByteArrayInputStream( bytes );
-			DataInputStream istream = new DataInputStream( ibuffer );
-
-			return istream.readByte();
-		}
-		catch( IOException e )
-		{
-			throw new FederateInternalError( "error decoding byte: " + e.getMessage() );
-		}
-	}
-
-	public static byte[] encodeChar( char value ) throws RTIinternalError
-	{
-		try
-		{
-			ByteArrayOutputStream obuffer = new ByteArrayOutputStream();
-			DataOutputStream ostream = new DataOutputStream( obuffer );
-			ostream.writeChar( value );
-			ostream.flush();
-
-			return obuffer.toByteArray();
-		}
-		catch( IOException e )
-		{
-			throw new RTIinternalError( "error encoding char: " + e.getMessage() );
-		}
-	}
-
-	public static char decodeChar( byte[] bytes ) throws FederateInternalError
-	{
-		try
-		{
-			ByteArrayInputStream ibuffer = new ByteArrayInputStream( bytes );
-			DataInputStream istream = new DataInputStream( ibuffer );
-
-			return istream.readChar();
-		}
-		catch( IOException e )
-		{
-			throw new FederateInternalError( "error decoding char: " + e.getMessage() );
-		}
-	}
-
-	public static byte[] encodeDouble( double value ) throws RTIinternalError
-	{
-		try
-		{
-			ByteArrayOutputStream obuffer = new ByteArrayOutputStream();
-			DataOutputStream ostream = new DataOutputStream( obuffer );
-			ostream.writeDouble( value );
-			ostream.flush();
-
-			return obuffer.toByteArray();
-		}
-		catch( IOException e )
-		{
-			throw new RTIinternalError( "error encoding double: " + e.getMessage() );
-		}
-	}
-
-	public static double decodeDouble( byte[] bytes ) throws FederateInternalError
-	{
-		try
-		{
-			ByteArrayInputStream ibuffer = new ByteArrayInputStream( bytes );
-			DataInputStream istream = new DataInputStream( ibuffer );
-
-			return istream.readDouble();
-		}
-		catch( IOException e )
-		{
-			throw new FederateInternalError( "error decoding double: " + e.getMessage() );
-		}
-	}
-
-	public static byte[] encodeFloat( float value ) throws RTIinternalError
-	{
-		try
-		{
-			ByteArrayOutputStream obuffer = new ByteArrayOutputStream();
-			DataOutputStream ostream = new DataOutputStream( obuffer );
-			ostream.writeFloat( value );
-			ostream.flush();
-
-			return obuffer.toByteArray();
-		}
-		catch( IOException e )
-		{
-			throw new RTIinternalError( "error encoding float: " + e.getMessage() );
-		}
-	}
-
-	public static float decodeFloat( byte[] bytes ) throws FederateInternalError
-	{
-		try
-		{
-			ByteArrayInputStream ibuffer = new ByteArrayInputStream( bytes );
-			DataInputStream istream = new DataInputStream( ibuffer );
-
-			return istream.readFloat();
-		}
-		catch( IOException e )
-		{
-			throw new FederateInternalError( "error decoding float: " + e.getMessage() );
-		}
-	}
-
-	public static byte[] encodeInt( int value ) throws RTIinternalError
-	{
-		try
-		{
-			ByteArrayOutputStream obuffer = new ByteArrayOutputStream();
-			DataOutputStream ostream = new DataOutputStream( obuffer );
-			ostream.writeInt( value );
-			ostream.flush();
-
-			return obuffer.toByteArray();
-		}
-		catch( IOException e )
-		{
-			throw new RTIinternalError( "error encoding int: " + e.getMessage() );
-		}
-	}
-
-	public static int decodeInt( byte[] bytes ) throws FederateInternalError
-	{
-		try
-		{
-			ByteArrayInputStream ibuffer = new ByteArrayInputStream( bytes );
-			DataInputStream istream = new DataInputStream( ibuffer );
-
-			return istream.readInt();
-		}
-		catch( IOException e )
-		{
-			throw new FederateInternalError( "error decoding int: " + e.getMessage() );
-		}
-	}
-
-	public static byte[] encodeLong( long value ) throws RTIinternalError
-	{
-		try
-		{
-			ByteArrayOutputStream obuffer = new ByteArrayOutputStream();
-			DataOutputStream ostream = new DataOutputStream( obuffer );
-			ostream.writeLong( value );
-			ostream.flush();
-
-			return obuffer.toByteArray();
-		}
-		catch( IOException e )
-		{
-			throw new RTIinternalError( "error encoding long: " + e.getMessage() );
-		}
-	}
-
-	public static long decodeLong( byte[] bytes ) throws FederateInternalError
-	{
-		try
-		{
-			ByteArrayInputStream ibuffer = new ByteArrayInputStream( bytes );
-			DataInputStream istream = new DataInputStream( ibuffer );
-
-			return istream.readLong();
-		}
-		catch( IOException e )
-		{
-			throw new FederateInternalError( "error decoding long: " + e.getMessage() );
-		}
-	}
-
-	public static byte[] encodeShort( short value ) throws RTIinternalError
-	{
-		try
-		{
-			ByteArrayOutputStream obuffer = new ByteArrayOutputStream();
-			DataOutputStream ostream = new DataOutputStream( obuffer );
-			ostream.writeShort( value );
-			ostream.flush();
-
-			return obuffer.toByteArray();
-		}
-		catch( IOException e )
-		{
-			throw new RTIinternalError( "error encoding short: " + e.getMessage() );
-		}
-	}
-
-	public static short decodeShort( byte[] bytes ) throws FederateInternalError
-	{
-		try
-		{
-			ByteArrayInputStream ibuffer = new ByteArrayInputStream( bytes );
-			DataInputStream istream = new DataInputStream( ibuffer );
-
-			return istream.readShort();
-		}
-		catch( IOException e )
-		{
-			throw new FederateInternalError( "error decoding short: " + e.getMessage() );
-		}
-	}
-
-	public static byte[] encodeString( String theString ) throws RTIinternalError
-	{
-		// append the null character
-		return (theString + "\0").getBytes();
-	}
-
-	public static String decodeString( byte[] bytes ) throws FederateInternalError
-	{
-		// lop off the null character
-		return new String( bytes, 0, bytes.length - 1 );
-	}
-}
Index: codebase/src-java/portico/hla/rti13/java1/SaveInProgress.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/SaveInProgress.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/SaveInProgress.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class SaveInProgress extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public SaveInProgress( String reason )
-	{
-		super( reason );
-	}
-
-	public SaveInProgress( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public SaveInProgress()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public SaveInProgress( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public SaveInProgress( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/ValueCountExceeded.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/ValueCountExceeded.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/ValueCountExceeded.java	(working copy)
@@ -1,42 +0,0 @@
-package hla.rti13.java1;
-
-/**
- * This class will <b>NEVER BE THROWN BY Portico</b> (knowingly :P). I include it here only because
- * it is part of the DMSO rti13.java1 pacakge and people may be catching it for some reason.
- */
-public class ValueCountExceeded extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public ValueCountExceeded( String reason )
-	{
-		super( reason );
-	}
-
-	public ValueCountExceeded( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public ValueCountExceeded()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public ValueCountExceeded( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public ValueCountExceeded( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/ObjectClassNotPublished.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/ObjectClassNotPublished.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/ObjectClassNotPublished.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class ObjectClassNotPublished extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public ObjectClassNotPublished( String reason )
-	{
-		super( reason );
-	}
-
-	public ObjectClassNotPublished( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public ObjectClassNotPublished()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public ObjectClassNotPublished( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public ObjectClassNotPublished( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/InteractionParameterNotKnown.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/InteractionParameterNotKnown.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/InteractionParameterNotKnown.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class InteractionParameterNotKnown extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public InteractionParameterNotKnown( String reason )
-	{
-		super( reason );
-	}
-
-	public InteractionParameterNotKnown( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public InteractionParameterNotKnown()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public InteractionParameterNotKnown( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public InteractionParameterNotKnown( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/RegionNotKnown.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/RegionNotKnown.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/RegionNotKnown.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class RegionNotKnown extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public RegionNotKnown( String reason )
-	{
-		super( reason );
-	}
-
-	public RegionNotKnown( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public RegionNotKnown()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public RegionNotKnown( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public RegionNotKnown( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/ObjectClassNotSubscribed.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/ObjectClassNotSubscribed.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/ObjectClassNotSubscribed.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class ObjectClassNotSubscribed extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public ObjectClassNotSubscribed( String reason )
-	{
-		super( reason );
-	}
-
-	public ObjectClassNotSubscribed( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public ObjectClassNotSubscribed()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public ObjectClassNotSubscribed( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public ObjectClassNotSubscribed( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/ResignAction.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/ResignAction.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/ResignAction.java	(working copy)
@@ -1,16 +0,0 @@
-package hla.rti13.java1;
-
-public final class ResignAction
-{
-	public static final int RELEASE_ATTRIBUTES = 1;
-
-	public static final int DELETE_OBJECTS = 2;
-	
-	public static final int DELETE_OBJECTS_AND_RELEASE_ATTRIBUTES = 3;
-	
-	public static final int NO_ACTION = 4;
-
-	private ResignAction()
-	{
-	}
-}
Index: codebase/src-java/portico/hla/rti13/java1/FederateLoggingServiceCalls.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/FederateLoggingServiceCalls.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/FederateLoggingServiceCalls.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class FederateLoggingServiceCalls extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public FederateLoggingServiceCalls( String reason )
-	{
-		super( reason );
-	}
-
-	public FederateLoggingServiceCalls( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public FederateLoggingServiceCalls()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public FederateLoggingServiceCalls( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public FederateLoggingServiceCalls( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/FederateInternalError.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/FederateInternalError.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/FederateInternalError.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class FederateInternalError extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public FederateInternalError( String reason )
-	{
-		super( reason );
-	}
-
-	public FederateInternalError( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public FederateInternalError()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public FederateInternalError( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public FederateInternalError( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/RestoreNotRequested.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/RestoreNotRequested.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/RestoreNotRequested.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class RestoreNotRequested extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public RestoreNotRequested( String reason )
-	{
-		super( reason );
-	}
-
-	public RestoreNotRequested( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public RestoreNotRequested()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public RestoreNotRequested( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public RestoreNotRequested( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/EventRetractionHandle.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/EventRetractionHandle.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/EventRetractionHandle.java	(working copy)
@@ -1,32 +0,0 @@
-package hla.rti13.java1;
-
-public class EventRetractionHandle extends java.lang.Object
-{
-	public int theSerialNumber;
-
-	public int sendingFederate;
-
-	protected EventRetractionHandle( int argtheSerialNumber, int argsendingFederate )
-	{
-		theSerialNumber = argtheSerialNumber;
-		sendingFederate = argsendingFederate;
-	}
-
-	public boolean equals( Object obj )
-	{
-		EventRetractionHandle rhs = (EventRetractionHandle)obj;
-		return ((rhs.theSerialNumber == theSerialNumber) &&
-			   (rhs.sendingFederate == sendingFederate));
-	}
-
-	public String toString()
-	{
-		return new String( "[theSerialNumber=" + theSerialNumber +
-		                   " sendingFederate=" + sendingFederate + "]" );
-	}
-
-	public int hashCode()
-	{
-		return theSerialNumber ^ sendingFederate;
-	}
-}
Index: codebase/src-java/portico/hla/rti13/java1/SpaceNotDefined.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/SpaceNotDefined.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/SpaceNotDefined.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class SpaceNotDefined extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public SpaceNotDefined( String reason )
-	{
-		super( reason );
-	}
-
-	public SpaceNotDefined( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public SpaceNotDefined()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public SpaceNotDefined( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public SpaceNotDefined( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/InvalidOrderingHandle.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/InvalidOrderingHandle.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/InvalidOrderingHandle.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class InvalidOrderingHandle extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public InvalidOrderingHandle( String reason )
-	{
-		super( reason );
-	}
-
-	public InvalidOrderingHandle( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public InvalidOrderingHandle()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public InvalidOrderingHandle( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public InvalidOrderingHandle( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/InvalidHandleValuePairSetContext.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/InvalidHandleValuePairSetContext.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/InvalidHandleValuePairSetContext.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class InvalidHandleValuePairSetContext extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public InvalidHandleValuePairSetContext( String reason )
-	{
-		super( reason );
-	}
-
-	public InvalidHandleValuePairSetContext( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public InvalidHandleValuePairSetContext()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public InvalidHandleValuePairSetContext( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public InvalidHandleValuePairSetContext( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/FederateOwnsAttributes.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/FederateOwnsAttributes.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/FederateOwnsAttributes.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class FederateOwnsAttributes extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public FederateOwnsAttributes( String reason )
-	{
-		super( reason );
-	}
-
-	public FederateOwnsAttributes( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public FederateOwnsAttributes()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public FederateOwnsAttributes( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public FederateOwnsAttributes( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/TimeAdvanceAlreadyInProgress.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/TimeAdvanceAlreadyInProgress.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/TimeAdvanceAlreadyInProgress.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class TimeAdvanceAlreadyInProgress extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public TimeAdvanceAlreadyInProgress( String reason )
-	{
-		super( reason );
-	}
-
-	public TimeAdvanceAlreadyInProgress( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public TimeAdvanceAlreadyInProgress()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public TimeAdvanceAlreadyInProgress( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public TimeAdvanceAlreadyInProgress( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/InvalidRegionContext.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/InvalidRegionContext.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/InvalidRegionContext.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class InvalidRegionContext extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public InvalidRegionContext( String reason )
-	{
-		super( reason );
-	}
-
-	public InvalidRegionContext( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public InvalidRegionContext()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public InvalidRegionContext( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public InvalidRegionContext( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/EnableTimeRegulationWasNotPending.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/EnableTimeRegulationWasNotPending.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/EnableTimeRegulationWasNotPending.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class EnableTimeRegulationWasNotPending extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public EnableTimeRegulationWasNotPending( String reason )
-	{
-		super( reason );
-	}
-
-	public EnableTimeRegulationWasNotPending( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public EnableTimeRegulationWasNotPending()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public EnableTimeRegulationWasNotPending( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public EnableTimeRegulationWasNotPending( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/AttributeNotKnown.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/AttributeNotKnown.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/AttributeNotKnown.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class AttributeNotKnown extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public AttributeNotKnown( String reason )
-	{
-		super( reason );
-	}
-
-	public AttributeNotKnown( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public AttributeNotKnown()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public AttributeNotKnown( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public AttributeNotKnown( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/InteractionClassNotKnown.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/InteractionClassNotKnown.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/InteractionClassNotKnown.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class InteractionClassNotKnown extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public InteractionClassNotKnown( String reason )
-	{
-		super( reason );
-	}
-
-	public InteractionClassNotKnown( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public InteractionClassNotKnown()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public InteractionClassNotKnown( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public InteractionClassNotKnown( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/ObjectNotKnown.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/ObjectNotKnown.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/ObjectNotKnown.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class ObjectNotKnown extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public ObjectNotKnown( String reason )
-	{
-		super( reason );
-	}
-
-	public ObjectNotKnown( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public ObjectNotKnown()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public ObjectNotKnown( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public ObjectNotKnown( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/FederationExecutionAlreadyExists.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/FederationExecutionAlreadyExists.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/FederationExecutionAlreadyExists.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class FederationExecutionAlreadyExists extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public FederationExecutionAlreadyExists( String reason )
-	{
-		super( reason );
-	}
-
-	public FederationExecutionAlreadyExists( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public FederationExecutionAlreadyExists()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public FederationExecutionAlreadyExists( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public FederationExecutionAlreadyExists( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/SaveNotInitiated.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/SaveNotInitiated.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/SaveNotInitiated.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class SaveNotInitiated extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public SaveNotInitiated( String reason )
-	{
-		super( reason );
-	}
-
-	public SaveNotInitiated( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public SaveNotInitiated()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public SaveNotInitiated( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public SaveNotInitiated( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/RTIexception.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/RTIexception.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/RTIexception.java	(working copy)
@@ -1,52 +0,0 @@
-package hla.rti13.java1;
-
-public class RTIexception extends java.lang.Exception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public int _serial;
-
-	public RTIexception( String reason, int serial )
-	{
-		super( reason );
-		_serial = serial;
-	}
-
-	/**
-     * Just create an empty exception
-     */
-    public RTIexception()
-    {
-	    super();
-    }
-
-    /**
-     * @param message The message to create the exception with
-     */
-    public RTIexception( String message )
-    {
-	    super( message );
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public RTIexception( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public RTIexception( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-   
-	public String toString()
-	{
-		return super.toString() + " (serial " + _serial + ")";
-	}
-}
Index: codebase/src-java/portico/hla/rti13/java1/EventNotKnown.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/EventNotKnown.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/EventNotKnown.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class EventNotKnown extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public EventNotKnown( String reason )
-	{
-		super( reason );
-	}
-
-	public EventNotKnown( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public EventNotKnown()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public EventNotKnown( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public EventNotKnown( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/InteractionParameterNotDefined.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/InteractionParameterNotDefined.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/InteractionParameterNotDefined.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class InteractionParameterNotDefined extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public InteractionParameterNotDefined( String reason )
-	{
-		super( reason );
-	}
-
-	public InteractionParameterNotDefined( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public InteractionParameterNotDefined()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public InteractionParameterNotDefined( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public InteractionParameterNotDefined( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/Region.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/Region.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/Region.java	(working copy)
@@ -1,91 +0,0 @@
-/*
- *   Copyright 2006 The Portico Project
- *
- *   This file is part of portico.
- *
- *   portico is free software; you can redistribute it and/or modify
- *   it under the terms of the Common Developer and Distribution License (CDDL) 
- *   as published by Sun Microsystems. For more information see the LICENSE file.
- *   
- *   Use of this software is strictly AT YOUR OWN RISK!!!
- *   If something bad happens you do not have permission to come crying to me.
- *   (that goes for your lawyer as well)
- *
- */
-package hla.rti13.java1;
-
-public class Region
-{
-	//----------------------------------------------------------
-	//                    STATIC VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                   INSTANCE VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                      CONSTRUCTORS
-	//----------------------------------------------------------
-
-	protected Region()
-	{
-		throw new IllegalArgumentException( "You can't construct Regions this way with Portico" );
-	}
-
-	protected Region( hla.rti.Region region )
-	{
-		throw new IllegalArgumentException( "You can't construct Regions this way with Portico" );
-	}
-
-	//----------------------------------------------------------
-	//                    INSTANCE METHODS
-	//----------------------------------------------------------
-
-	public long getNumberOfExtents()
-	{
-		return 0;
-	}
-
-	public long getRangeLowerBound( int theExtent, int theDimension ) throws ArrayIndexOutOfBounds
-	{
-		return 0;
-	}
-
-	public long getRangeLowerBoundNotificationLimit( int theExtent, int theDimension )
-	    throws ArrayIndexOutOfBounds
-	{
-		return 0;
-	}
-
-	public long getRangeUpperBound( int theExtent, int theDimension )
-	    throws ArrayIndexOutOfBounds
-	{
-		return 0;
-	}
-
-	public long getRangeUpperBoundNotificationLimit( int theExtent, int theDimension )
-	    throws ArrayIndexOutOfBounds
-	{
-		return 0;
-	}
-
-	public int getSpaceHandle()
-	{
-		return 0;
-	}
-
-	public void setRangeLowerBound( int theExtent, int theDimension, long theLowerBound )
-	    throws ArrayIndexOutOfBounds
-	{
-	}
-
-	public void setRangeUpperBound( int theExtent, int theDimension, long theUpperBound )
-	    throws ArrayIndexOutOfBounds
-	{
-	}
-
-	//----------------------------------------------------------
-	//                     STATIC METHODS
-	//----------------------------------------------------------
-}
Index: codebase/src-java/portico/hla/rti13/java1/SuppliedAttributesFactory.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/SuppliedAttributesFactory.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/SuppliedAttributesFactory.java	(working copy)
@@ -1,48 +0,0 @@
-/*
- *   Copyright 2008 The Portico Project
- *
- *   This file is part of portico.
- *
- *   portico is free software; you can redistribute it and/or modify
- *   it under the terms of the Common Developer and Distribution License (CDDL) 
- *   as published by Sun Microsystems. For more information see the LICENSE file.
- *   
- *   Use of this software is strictly AT YOUR OWN RISK!!!
- *   If something bad happens you do not have permission to come crying to me.
- *   (that goes for your lawyer as well)
- *
- */
-package hla.rti13.java1;
-
-public class SuppliedAttributesFactory
-{
-	//----------------------------------------------------------
-	//                    STATIC VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                   INSTANCE VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                      CONSTRUCTORS
-	//----------------------------------------------------------
-
-	private SuppliedAttributesFactory()
-	{
-		
-	}
-
-	//----------------------------------------------------------
-	//                    INSTANCE METHODS
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                     STATIC METHODS
-	//----------------------------------------------------------
-	public static SuppliedAttributes create( int count )
-		throws MemoryExhausted, ValueCountExceeded, HandleValuePairMaximumExceeded
-	{
-		return new SuppliedAttributes();
-	}
-}
Index: codebase/src-java/portico/hla/rti13/java1/AttributeAcquisitionWasNotCanceled.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/AttributeAcquisitionWasNotCanceled.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/AttributeAcquisitionWasNotCanceled.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class AttributeAcquisitionWasNotCanceled extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public AttributeAcquisitionWasNotCanceled( String reason )
-	{
-		super( reason );
-	}
-
-	public AttributeAcquisitionWasNotCanceled( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public AttributeAcquisitionWasNotCanceled()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public AttributeAcquisitionWasNotCanceled( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public AttributeAcquisitionWasNotCanceled( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/HandleValuePairMaximumExceeded.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/HandleValuePairMaximumExceeded.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/HandleValuePairMaximumExceeded.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class HandleValuePairMaximumExceeded extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public HandleValuePairMaximumExceeded( String reason )
-	{
-		super( reason );
-	}
-
-	public HandleValuePairMaximumExceeded( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public HandleValuePairMaximumExceeded()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public HandleValuePairMaximumExceeded( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public HandleValuePairMaximumExceeded( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/AttributeAcquisitionWasNotRequested.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/AttributeAcquisitionWasNotRequested.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/AttributeAcquisitionWasNotRequested.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class AttributeAcquisitionWasNotRequested extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public AttributeAcquisitionWasNotRequested( String reason )
-	{
-		super( reason );
-	}
-
-	public AttributeAcquisitionWasNotRequested( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public AttributeAcquisitionWasNotRequested()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public AttributeAcquisitionWasNotRequested( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public AttributeAcquisitionWasNotRequested( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/InvalidResignAction.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/InvalidResignAction.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/InvalidResignAction.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class InvalidResignAction extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public InvalidResignAction( String reason )
-	{
-		super( reason );
-	}
-
-	public InvalidResignAction( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public InvalidResignAction()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public InvalidResignAction( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public InvalidResignAction( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/hla/rti13/java1/InvalidRetractionHandle.java
===================================================================
--- codebase/src-java/portico/hla/rti13/java1/InvalidRetractionHandle.java	(revision 1552)
+++ codebase/src-java/portico/hla/rti13/java1/InvalidRetractionHandle.java	(working copy)
@@ -1,38 +0,0 @@
-package hla.rti13.java1;
-
-public class InvalidRetractionHandle extends RTIexception
-{
-	private static final long serialVersionUID = 98121116105109L;
-	
-	public InvalidRetractionHandle( String reason )
-	{
-		super( reason );
-	}
-
-	public InvalidRetractionHandle( String reason, int serial )
-	{
-		super( reason, serial );
-	}
-	
-	public InvalidRetractionHandle()
-    {
-	    super();
-    }
-
-    /**
-     * @param cause The cause of the exception
-     */
-    public InvalidRetractionHandle( Throwable cause )
-    {
-	    super( cause );
-    }
-
-    /**
-     * @param message The message to create the exception with
-     * @param cause The cause of the exception
-     */
-    public InvalidRetractionHandle( String message, Throwable cause )
-    {
-	    super( message, cause );
-    }
-}
Index: codebase/src-java/portico/org/portico/lrc/object/RegionStore.java
===================================================================
--- codebase/src-java/portico/org/portico/lrc/object/RegionStore.java	(revision 1553)
+++ codebase/src-java/portico/org/portico/lrc/object/RegionStore.java	(working copy)
@@ -19,7 +19,6 @@
 import java.util.Set;
 
 import org.portico.impl.hla13.types.HLA13Region;
-import org.portico.impl.hla13.types.Java1Region;
 import org.portico.lrc.LRCState;
 import org.portico.shared.compat.JInvalidRegionContext;
 import org.portico.shared.model.ACInstance;
@@ -150,19 +149,6 @@
 		return regions.containsKey( region.getWrappedRegion().getToken() );
 	}
 
-	/**
-	 * Returns <code>true</code> if the store contains the given {@link Java1Region},
-	 * <code>false</code> otherwise. It will actually get the wrapped {@link RegionInstance}
-	 * instance inside the {@link Java1Region} and check using that.
-	 */
-	public boolean containsRegion( Java1Region region )
-	{
-		if( region == null )
-			return false;
-
-		return regions.containsKey( region.getWrappedRegion().getToken() );
-	}
-
 	//----------------------------------------------------------
 	//                     STATIC METHODS
 	//----------------------------------------------------------
Index: codebase/src-java/portico/org/portico/impl/hla13/types/Java1Region.java
===================================================================
--- codebase/src-java/portico/org/portico/impl/hla13/types/Java1Region.java	(revision 1552)
+++ codebase/src-java/portico/org/portico/impl/hla13/types/Java1Region.java	(working copy)
@@ -1,230 +0,0 @@
-/*
- *   Copyright 2007 The Portico Project
- *
- *   This file is part of portico.
- *
- *   portico is free software; you can redistribute it and/or modify
- *   it under the terms of the Common Developer and Distribution License (CDDL) 
- *   as published by Sun Microsystems. For more information see the LICENSE file.
- *   
- *   Use of this software is strictly AT YOUR OWN RISK!!!
- *   If something bad happens you do not have permission to come crying to me.
- *   (that goes for your lawyer as well)
- *
- */
-package org.portico.impl.hla13.types;
-
-import org.portico.shared.compat.JArrayIndexOutOfBounds;
-import org.portico.shared.model.RegionInstance;
-
-import hla.rti13.java1.Region;
-import hla.rti13.java1.ArrayIndexOutOfBounds;
-import hla.rti13.java1.RTIinternalError;
-
-/**
- * This class represents a <code>hla.rti13.java1.Region</code>. Unlike with the HLA 1.3 spec where
- * the Region type is an interface, in the java1 package, it is a concrete class. To avoid putting
- * Portico specific code into that class, this class just extends it. This class wraps around an
- * instance of {@link RegionInstance} (from the Portico object model types) and passes all requests
- * on through to it. 
- */
-public class Java1Region extends hla.rti13.java1.Region
-{
-	//----------------------------------------------------------
-	//                    STATIC VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                   INSTANCE VARIABLES
-	//----------------------------------------------------------
-	private RegionInstance region;
-
-	//----------------------------------------------------------
-	//                      CONSTRUCTORS
-	//----------------------------------------------------------
-
-	public Java1Region( RegionInstance region )
-	{
-		// check the region
-		if( region == null )
-			throw new IllegalArgumentException( "Can't pass null region to constructor" );
-
-		this.region = region;
-	}
-	
-	//----------------------------------------------------------
-	//                    INSTANCE METHODS
-	//----------------------------------------------------------
-
-	/**
-	 * Return the wrapped Portico region insance
-	 */
-	public RegionInstance getWrappedRegion()
-	{
-		return region;
-	}
-
-	/**
-	 * Gets the region handle for the wrapped region
-	 */
-	public int getRegionHandle()
-	{
-		return region.getToken();
-	}
-	
-	public boolean equals( Object otherRegion )
-	{
-		try
-		{
-			Java1Region other = (Java1Region)otherRegion;
-			return this.region.equals( other.region );
-		}
-		catch( ClassCastException cce )
-		{
-			return false;
-		}
-	}
-
-	/////////////////////////////////////////////////////////////////////////////////////////
-	///////////////////////////////// HLA Interface Methods /////////////////////////////////
-	/////////////////////////////////////////////////////////////////////////////////////////
-	/**
-	 * @return long Number of extents in this Region
-	 */
-	@Override
-	public long getNumberOfExtents()
-	{
-		return region.getNumberOfExtents();
-	}
-
-	/**
-	 * @return long Lower bound of extent along indicated dimension
-	 */
-	@Override
-	public long getRangeLowerBound( int extentIndex, int dimensionHandle )
-		throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			return region.getRangeLowerBound( extentIndex, dimensionHandle );
-		}
-		catch( JArrayIndexOutOfBounds oob )
-		{
-			throw new ArrayIndexOutOfBounds( oob );
-		}
-	}
-
-	/**
-	 * @return long Upper bound of extent along indicated dimension
-	 */
-	@Override
-	public long getRangeUpperBound( int extentIndex, int dimensionHandle )
-		throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			return region.getRangeUpperBound( extentIndex, dimensionHandle );
-		}
-		catch( JArrayIndexOutOfBounds oob )
-		{
-			throw new ArrayIndexOutOfBounds( oob );
-		}
-	}
-
-	/**
-	 * @return int Handle of routing space of which this Region is a subset
-	 */
-	@Override
-	public int getSpaceHandle()
-	{
-		return region.getSpaceHandle();
-	}
-
-	/**
-	 * Modify lower bound of extent along indicated dimension.
-	 */
-	@Override
-	public void setRangeLowerBound( int extentIndex, int dimensionHandle, long newLowerBound )
-		throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			region.setRangeLowerBound( extentIndex, dimensionHandle, newLowerBound );
-		}
-		catch( JArrayIndexOutOfBounds oob )
-		{
-			throw new ArrayIndexOutOfBounds( oob );
-		}
-	}
-
-	/**
-	 * Modify upper bound of extent along indicated dimension.
-	 */
-	@Override
-	public void setRangeUpperBound( int extentIndex, int dimensionHandle, long newUpperBound )
-		throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			region.setRangeUpperBound( extentIndex, dimensionHandle, newUpperBound );
-		}
-		catch( JArrayIndexOutOfBounds oob )
-		{
-			throw new ArrayIndexOutOfBounds( oob );
-		}
-	}
-
-	@Override
-	public long getRangeUpperBoundNotificationLimit( int theExtent, int theDimension )
-		throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			return region.getRangeUpperBoundNotificationLimit( theExtent, theDimension );
-		}
-		catch( JArrayIndexOutOfBounds oob )
-		{
-			throw new ArrayIndexOutOfBounds( oob );
-		}
-	}
-
-	@Override
-	public long getRangeLowerBoundNotificationLimit( int theExtent, int theDimension )
-		throws ArrayIndexOutOfBounds
-	{
-		try
-		{
-			return region.getRangeLowerBoundNotificationLimit( theExtent, theDimension );
-		}
-		catch( JArrayIndexOutOfBounds oob )
-		{
-			throw new ArrayIndexOutOfBounds( oob );
-		}
-	}
-
-	//----------------------------------------------------------
-	//                     STATIC METHODS
-	//----------------------------------------------------------
-	/**
-	 * This method will take a region as the HLA1.3(java1) type and attempt to convert and extract
-	 * from it the wrapped {@link RegionInstance}. If there is a problem during this conversion
-	 * (such as the method not being passed an instance of {@link Java1Region}), an exception
-	 * will be thrown.
-	 */
-	public static RegionInstance toPorticoRegion( Region region ) throws RTIinternalError
-	{
-		// convert the region and extract the underlying wrapped instance
-		try
-		{
-			return ((Java1Region)region).region;
-		}
-		catch( ClassCastException cce )
-		{
-			throw new RTIinternalError( "Region not of appropriate type (expecting Java1Region)" );
-		}
-		catch( Exception e )
-		{
-			throw new RTIinternalError( "Problem converting Region: " + e.getMessage(), e );
-		}
-	}
-}
Index: codebase/src-java/portico/org/portico/impl/hla13/ImplJava1Helper.java
===================================================================
--- codebase/src-java/portico/org/portico/impl/hla13/ImplJava1Helper.java	(revision 1552)
+++ codebase/src-java/portico/org/portico/impl/hla13/ImplJava1Helper.java	(working copy)
@@ -1,294 +0,0 @@
-/*
- *   Copyright 2008 The Portico Project
- *
- *   This file is part of portico.
- *
- *   portico is free software; you can redistribute it and/or modify
- *   it under the terms of the Common Developer and Distribution License (CDDL) 
- *   as published by Sun Microsystems. For more information see the LICENSE file.
- *   
- *   Use of this software is strictly AT YOUR OWN RISK!!!
- *   If something bad happens you do not have permission to come crying to me.
- *   (that goes for your lawyer as well)
- *
- */
-package org.portico.impl.hla13;
-
-import hla.rti13.java1.ConcurrentAccessAttempted;
-import hla.rti13.java1.EnableTimeConstrainedPending;
-import hla.rti13.java1.EnableTimeRegulationPending;
-import hla.rti13.java1.FederateAmbassador;
-import hla.rti13.java1.FederateNotExecutionMember;
-import hla.rti13.java1.InvalidFederationTime;
-import hla.rti13.java1.RTIinternalError;
-import hla.rti13.java1.RestoreInProgress;
-import hla.rti13.java1.SaveInProgress;
-import hla.rti13.java1.SynchronizationPointLabelWasNotAnnounced;
-import hla.rti13.java1.TimeAdvanceAlreadyInProgress;
-
-import org.apache.log4j.Logger;
-
-import org.portico.lrc.ISpecHelper;
-import org.portico.lrc.LRC;
-import org.portico.lrc.LRCState;
-import org.portico.shared.HLAVersion;
-import org.portico.shared.compat.JConcurrentAccessAttempted;
-import org.portico.shared.compat.JEnableTimeConstrainedPending;
-import org.portico.shared.compat.JEnableTimeRegulationPending;
-import org.portico.shared.compat.JFederateNotExecutionMember;
-import org.portico.shared.compat.JInvalidFederationTime;
-import org.portico.shared.compat.JRTIinternalError;
-import org.portico.shared.compat.JRestoreInProgress;
-import org.portico.shared.compat.JSaveInProgress;
-import org.portico.shared.compat.JSynchronizationLabelNotAnnounced;
-import org.portico.shared.compat.JTimeAdvanceAlreadyInProgress;
-import org.portico.shared.model.ObjectModel;
-
-import com.lbf.commons.messaging.MessageContext;
-
-public class ImplJava1Helper implements ISpecHelper
-{
-	//----------------------------------------------------------
-	//                    STATIC VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                   INSTANCE VARIABLES
-	//----------------------------------------------------------
-	private LRC lrc;
-	private LRCState state;
-	private FederateAmbassador federateAmbassador;
-
-	//----------------------------------------------------------
-	//                      CONSTRUCTORS
-	//----------------------------------------------------------
-
-	public ImplJava1Helper() throws RTIinternalError
-	{
-		try
-		{
-			this.lrc = new LRC( this );
-			this.state = this.lrc.getState();
-		}
-		catch( JRTIinternalError rtie )
-		{
-			throw new RTIinternalError( rtie );
-		}
-	}
-
-	//----------------------------------------------------------
-	//                    INSTANCE METHODS
-	//----------------------------------------------------------
-
-	public HLAVersion getHlaVersion()
-	{
-		return HLAVersion.HLA13;
-	}
-
-	public LRC getLrc()
-	{
-		return this.lrc;
-	}
-
-	public Logger getLrcLogger()
-	{
-		return this.lrc.getLrcLogger();
-	}
-
-	public FederateAmbassador getFederateAmbassador()
-	{
-		return this.federateAmbassador;
-	}
-	
-	public void setFederateAmbassador( FederateAmbassador federateAmbassador )
-	{
-		this.federateAmbassador = federateAmbassador;
-	}
-
-	public LRCState getState()
-	{
-		return this.state;
-	}
-	
-	public ObjectModel getFOM()
-	{
-		return this.state.getFOM();
-	}
-
-	////////////////////////////////////////////////////////////////////////////
-	/////////////////////////// Convenience Methods ////////////////////////////
-	////////////////////////////////////////////////////////////////////////////
-	public void processMessage( MessageContext context ) throws Exception
-	{
-		this.lrc.getKernel().getOutgoingSink().process( context );
-	}
-	
-	public void tick() throws ConcurrentAccessAttempted, RTIinternalError
-	{
-		try
-		{
-			this.lrc.tick();
-		}
-		catch( JRTIinternalError je )
-		{
-			throw new RTIinternalError( je.getMessage(), je );
-		}
-		catch( JConcurrentAccessAttempted ce )
-		{
-			throw new ConcurrentAccessAttempted( ce.getMessage() );
-		}
-	}
-	
-	public void tick( double min, double max ) throws ConcurrentAccessAttempted, RTIinternalError
-	{
-		try
-		{
-			this.lrc.tick( min, max );
-		}
-		catch( JRTIinternalError je )
-		{
-			throw new RTIinternalError( je.getMessage() );
-		}
-		catch( JConcurrentAccessAttempted ce )
-		{
-			throw new ConcurrentAccessAttempted( ce.getMessage() );
-		}
-	}
-
-	/**
-	 * Check to see if we are currently ticking (and thus not able to make an RTI callback). If
-	 * we are currently ticking, a {@link hla.rti.ConcurrentAccessAttempted
-	 * ConcurrentAccessAttempted} will be thrown. 
-	 */
-	public void checkAccess() throws ConcurrentAccessAttempted
-	{
-		try
-		{
-			state.checkAccess();
-		}
-		catch( JConcurrentAccessAttempted ca )
-		{
-			throw new ConcurrentAccessAttempted( ca.getMessage() );
-		}
-	}
-	
-	/**
-	 * Check to see if we are advancing. If we are, throw an exception. 
-	 */
-	public void checkAdvancing() throws TimeAdvanceAlreadyInProgress
-	{
-		try
-		{
-			state.checkAdvancing();
-		}
-		catch( JTimeAdvanceAlreadyInProgress ca )
-		{
-			throw new TimeAdvanceAlreadyInProgress( ca.getMessage() );
-		}
-	}
-	
-	/**
-	 * Check to see if there is a time regulation enable pending. If there is, throw an exception 
-	 */
-	public void checkTimeRegulation() throws EnableTimeRegulationPending
-	{
-		try
-		{
-			state.checkTimeRegulation();
-		}
-		catch( JEnableTimeRegulationPending erp )
-		{
-			throw new EnableTimeRegulationPending( erp.getMessage() );
-		}
-	}
-	
-	/**
-	 * Check to see if there is a time constrained enable pending. If there is, throw an exception 
-	 */
-	public void checkTimeConstrained() throws EnableTimeConstrainedPending
-	{
-		try
-		{
-			state.checkTimeConstrained();
-		}
-		catch( JEnableTimeConstrainedPending ecp )
-		{
-			throw new EnableTimeConstrainedPending( ecp.getMessage() );
-		}
-	}
-	
-	/**
-	 * Validate that the given time is valid for the current state (that it is equal to or greater
-	 * than the current LBTS for <b>this federate</b>).
-	 */
-	public void checkValidTime( double time ) throws InvalidFederationTime
-	{
-		try
-		{
-			state.checkValidTime( time );
-		}
-		catch( JInvalidFederationTime ift )
-		{
-			throw new InvalidFederationTime( ift.getMessage() );
-		}
-	}
-	
-	public void checkSave() throws SaveInProgress
-	{
-		try
-		{
-			state.checkSave();
-		}
-		catch( JSaveInProgress sip )
-		{
-			throw new SaveInProgress( sip.getMessage() );
-		}
-	}
-	
-	public void checkRestore() throws RestoreInProgress
-	{
-		try
-		{
-			state.checkRestore();
-		}
-		catch( JRestoreInProgress sip )
-		{
-			throw new RestoreInProgress( sip.getMessage() );
-		}
-	}
-	
-	/**
-	 * This method checks to see if the federate associated with this LRC is joined
-	 * to a federation. If it is not, a FederateNotExecutionMember exception is thrown. 
-	 */
-	public void checkJoined() throws FederateNotExecutionMember
-	{
-		try
-		{
-			state.checkJoined();
-		}
-		catch( JFederateNotExecutionMember nem )
-		{
-			throw new FederateNotExecutionMember( nem.getMessage() );
-		}
-	}
-	
-	/**
-	 * Checks to see if the given synchronization point label has been announced 
-	 */
-	public void checkSyncAnnounced( String label ) throws SynchronizationPointLabelWasNotAnnounced
-	{
-		try
-		{
-			state.checkSyncAnnounced( label );
-		}
-		catch( JSynchronizationLabelNotAnnounced na )
-		{
-			throw new SynchronizationPointLabelWasNotAnnounced( na.getMessage() );
-		}
-	}
-	
-	//----------------------------------------------------------
-	//                     STATIC METHODS
-	//----------------------------------------------------------
-}
Index: codebase/src-java/portico/org/portico/impl/hla13/RtiJava1Ambassador.java
===================================================================
--- codebase/src-java/portico/org/portico/impl/hla13/RtiJava1Ambassador.java	(revision 1552)
+++ codebase/src-java/portico/org/portico/impl/hla13/RtiJava1Ambassador.java	(working copy)
@@ -1,4819 +0,0 @@
-/*
- *   Copyright 2008 The Portico Project
- *
- *   This file is part of portico.
- *
- *   portico is free software; you can redistribute it and/or modify
- *   it under the terms of the Common Developer and Distribution License (CDDL) 
- *   as published by Sun Microsystems. For more information see the LICENSE file.
- *   
- *   Use of this software is strictly AT YOUR OWN RISK!!!
- *   If something bad happens you do not have permission to come crying to me.
- *   (that goes for your lawyer as well)
- *
- */
-package org.portico.impl.hla13;
-
-import java.io.File;
-import java.net.URL;
-import java.util.HashSet;
-
-import com.lbf.commons.messaging.ErrorResponse;
-import com.lbf.commons.messaging.ExtendedSuccessMessage;
-import com.lbf.commons.messaging.MessageContext;
-import com.lbf.commons.messaging.ResponseMessage;
-import org.portico.impl.hla13.types.HLA13ByteArrayMap;
-import org.portico.impl.hla13.types.Java1Region;
-import org.portico.kernel.PorticoMessage;
-import org.portico.shared.PorticoConstants;
-import org.portico.shared.compat.JAttributeNotDefined;
-import org.portico.shared.compat.JAttributeNotOwned;
-import org.portico.shared.compat.JAttributeNotPublished;
-import org.portico.shared.compat.JConcurrentAccessAttempted;
-import org.portico.shared.compat.JCouldNotOpenFED;
-import org.portico.shared.compat.JDeletePrivilegeNotHeld;
-import org.portico.shared.compat.JEnableTimeConstrainedPending;
-import org.portico.shared.compat.JEnableTimeRegulationPending;
-import org.portico.shared.compat.JErrorReadingFED;
-import org.portico.shared.compat.JFederateAlreadyExecutionMember;
-import org.portico.shared.compat.JFederateNotExecutionMember;
-import org.portico.shared.compat.JFederateOwnsAttributes;
-import org.portico.shared.compat.JFederatesCurrentlyJoined;
-import org.portico.shared.compat.JFederationExecutionAlreadyExists;
-import org.portico.shared.compat.JFederationExecutionDoesNotExist;
-import org.portico.shared.compat.JFederationTimeAlreadyPassed;
-import org.portico.shared.compat.JInteractionClassNotDefined;
-import org.portico.shared.compat.JInteractionClassNotPublished;
-import org.portico.shared.compat.JInteractionClassNotSubscribed;
-import org.portico.shared.compat.JInteractionParameterNotDefined;
-import org.portico.shared.compat.JInvalidExtents;
-import org.portico.shared.compat.JInvalidFederationTime;
-import org.portico.shared.compat.JInvalidLookahead;
-import org.portico.shared.compat.JInvalidRegionContext;
-import org.portico.shared.compat.JInvalidResignAction;
-import org.portico.shared.compat.JObjectAlreadyRegistered;
-import org.portico.shared.compat.JObjectClassNotDefined;
-import org.portico.shared.compat.JObjectClassNotPublished;
-import org.portico.shared.compat.JObjectClassNotSubscribed;
-import org.portico.shared.compat.JObjectNotKnown;
-import org.portico.shared.compat.JOwnershipAcquisitionPending;
-import org.portico.shared.compat.JRTIinternalError;
-import org.portico.shared.compat.JRegionInUse;
-import org.portico.shared.compat.JRegionNotKnown;
-import org.portico.shared.compat.JResignAction;
-import org.portico.shared.compat.JRestoreInProgress;
-import org.portico.shared.compat.JSaveInProgress;
-import org.portico.shared.compat.JSpaceNotDefined;
-import org.portico.shared.compat.JSynchronizationLabelNotAnnounced;
-import org.portico.shared.compat.JTimeAdvanceAlreadyInProgress;
-import org.portico.shared.compat.JTimeConstrainedAlreadyEnabled;
-import org.portico.shared.compat.JTimeConstrainedWasNotEnabled;
-import org.portico.shared.compat.JTimeRegulationAlreadyEnabled;
-import org.portico.shared.compat.JTimeRegulationWasNotEnabled;
-import org.portico.shared.model.ACInstance;
-import org.portico.shared.model.ACMetadata;
-import org.portico.shared.model.Dimension;
-import org.portico.shared.model.ICMetadata;
-import org.portico.shared.model.MOMHelper;
-import org.portico.shared.model.OCInstance;
-import org.portico.shared.model.OCMetadata;
-import org.portico.shared.model.ObjectModel;
-import org.portico.shared.model.RegionInstance;
-import org.portico.shared.model.Space;
-import org.portico.shared.msg.CreateFederation;
-import org.portico.shared.msg.DestroyFederation;
-import org.portico.shared.msg.JoinFederation;
-import org.portico.shared.msg.ResignFederation;
-import org.portico.shared.msg.ddm.AssociateRegion;
-import org.portico.shared.msg.ddm.CreateRegion;
-import org.portico.shared.msg.ddm.DeleteRegion;
-import org.portico.shared.msg.ddm.ModifyRegion;
-import org.portico.shared.msg.ddm.UnassociateRegion;
-import org.portico.shared.msg.object.DeleteObject;
-import org.portico.shared.msg.object.LocalDelete;
-import org.portico.shared.msg.object.RegisterObject;
-import org.portico.shared.msg.object.RequestClassUpdate;
-import org.portico.shared.msg.object.RequestObjectUpdate;
-import org.portico.shared.msg.object.SendInteraction;
-import org.portico.shared.msg.object.UpdateAttributes;
-import org.portico.shared.msg.pubsub.PublishInteractionClass;
-import org.portico.shared.msg.pubsub.PublishObjectClass;
-import org.portico.shared.msg.pubsub.SubscribeInteractionClass;
-import org.portico.shared.msg.pubsub.SubscribeObjectClass;
-import org.portico.shared.msg.pubsub.UnpublishInteractionClass;
-import org.portico.shared.msg.pubsub.UnpublishObjectClass;
-import org.portico.shared.msg.pubsub.UnsubscribeInteractionClass;
-import org.portico.shared.msg.pubsub.UnsubscribeObjectClass;
-import org.portico.shared.msg.sync.SyncPointAchieved;
-import org.portico.shared.msg.sync.SyncPointAnnouncement;
-import org.portico.shared.msg.time.DisableTimeConstrained;
-import org.portico.shared.msg.time.DisableTimeRegulation;
-import org.portico.shared.msg.time.EnableTimeConstrained;
-import org.portico.shared.msg.time.EnableTimeRegulation;
-import org.portico.shared.msg.time.ModifyLookahead;
-import org.portico.shared.msg.time.NextEventRequest;
-import org.portico.shared.msg.time.TimeAdvanceRequest;
-
-import hla.rti13.java1.*;
-
-/**
- * This class is the Portico implementation of the HLA 1.3 Annex A RTIambassador class.
- */
-public class RtiJava1Ambassador
-{
-	//----------------------------------------------------------
-	//                    STATIC VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                   INSTANCE VARIABLES
-	//----------------------------------------------------------
-	private ImplJava1Helper helper;
-
-	//----------------------------------------------------------
-	//                      CONSTRUCTORS
-	//----------------------------------------------------------
-
-	public RtiJava1Ambassador() throws RTIinternalError
-	{
-		this.helper = new ImplJava1Helper();
-	}
-
-	//----------------------------------------------------------
-	//                    INSTANCE METHODS
-	//----------------------------------------------------------	
-	
-	public ImplJava1Helper getHelper()
-	{
-		return this.helper;
-	}
-
-	//////////////////////////////////// 
-	// Federation Management Services // 
-	//////////////////////////////////// 
-	public void createFederationExecution( String executionName, String FED )
-	    throws FederationExecutionAlreadyExists,
-	           CouldNotOpenFED,
-	           ErrorReadingFED,
-	           ConcurrentAccessAttempted,
-	           RTIinternalError
-	{
-		// validate that the given fed location is actually a file on the local file system
-		// in order to maintain compatibility with NG, then turn it into a URL and we're off
-		File fedfile = new File( FED );
-		if( fedfile.canRead() == false )
-		{
-			throw new CouldNotOpenFED( "The file [" + FED + "] does not exist or can't be read" );
-		}
-		
-		URL fedURL = null;
-		try
-		{
-			fedURL = fedfile.toURL();
-		}
-		catch( Exception e )
-		{
-			throw new RTIinternalError( "Problem turning ["+FED+"] into URL: "+e.getMessage(), e );
-		}
-		
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		CreateFederation request = new CreateFederation( executionName, fedURL );	
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-			
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError(theException);
-			}
-			else if( theException instanceof JFederationExecutionAlreadyExists )
-			{
-				throw new FederationExecutionAlreadyExists( theException );
-			}
-			else if( theException instanceof JCouldNotOpenFED )
-			{
-				throw new CouldNotOpenFED( theException );
-			}
-			else if( theException instanceof JErrorReadingFED )
-			{
-				throw new ErrorReadingFED( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "createFederationExecution", theException );
-				throw new RTIinternalError( theException );
-			}
-		}
-	}
-
-	public void destroyFederationExecution( String executionName )
-		throws FederatesCurrentlyJoined,
-		       FederationExecutionDoesNotExist,
-		       ConcurrentAccessAttempted,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		DestroyFederation request = new DestroyFederation( executionName );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-			
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JFederatesCurrentlyJoined )
-			{
-				throw new FederatesCurrentlyJoined( theException );
-			}
-			else if( theException instanceof JFederationExecutionDoesNotExist )
-			{
-				throw new FederationExecutionDoesNotExist( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "destroyFederationExecution", theException );
-			}
-		}
-	}
-
-	public int joinFederationExecution( String federateName,
-	                                    String federationName,
-	                                    FederateAmbassador federateAmbassador )
-	    throws FederateAlreadyExecutionMember,
-	           FederationExecutionDoesNotExist,
-	           CouldNotOpenFED,
-	           ErrorReadingFED,
-	           ConcurrentAccessAttempted,
-	           SaveInProgress,
-	           RestoreInProgress,
-	           RTIinternalError
-	{
-		// 0. check the federate ambassador //
-		// Has to be done here as part of fix for PORT-132 //
-		if( federateAmbassador == null )
-			throw new RTIinternalError( "FederateAmbassador was null" );
-		
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		JoinFederation request = new JoinFederation( federateName, federationName );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			ExtendedSuccessMessage success = (ExtendedSuccessMessage)response;
-
-			// set the federate ambassador
-			this.helper.setFederateAmbassador( federateAmbassador );
-			
-			// return the "handle"
-			return (Integer)success.getResult();
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JFederateAlreadyExecutionMember )
-			{
-				throw new FederateAlreadyExecutionMember( theException );
-			}
-			else if( theException instanceof JFederationExecutionDoesNotExist )
-			{
-				throw new FederationExecutionDoesNotExist( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "joinFederationExecution", theException );
-				return -1;
-			}
-		}
-	}
-
-	public void resignFederationExecution( int theAction )
-		throws FederateOwnsAttributes,
-		       FederateNotExecutionMember,
-		       InvalidResignAction,
-		       ConcurrentAccessAttempted,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		// the constructor below will throw InvalidResignAction for a dodgy value
-		ResignFederation request;
-		try
-		{
-			request = new ResignFederation( JResignAction.for13Value(theAction) );
-		}
-		catch( JInvalidResignAction e )
-		{
-			throw new InvalidResignAction( e.getMessage() );
-		}
-		
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JFederateOwnsAttributes )
-			{
-				throw new FederateOwnsAttributes( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else if( theException instanceof JInvalidResignAction )
-			{
-				// even though the message creation will check for it, this could still
-				// occur, perhaps in a situation where the action didn't decode properly
-				// on the RTI side or the like. Think outside the box people.
-				throw new InvalidResignAction( theException );
-			}
-			else
-			{
-				logException( "resignFederationExecution", theException );
-			}
-		}
-	}	
-	
-	public void registerFederationSynchronizationPoint( String label, String tag )
-	    throws FederateNotExecutionMember,
-	           ConcurrentAccessAttempted,
-	           SaveInProgress,
-	           RestoreInProgress,
-	           RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		SyncPointAnnouncement request =
-			new SyncPointAnnouncement( label, EncodingHelpers.encodeString(tag) );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "registerFederationSynchronizationPoint", theException );
-			}
-		}
-	}
-
-	public void registerFederationSynchronizationPoint( String label,
-	                                                    String tag,
-	                                                    FederateHandleSet syncset )
-	    throws FederateNotExecutionMember,
-	           ConcurrentAccessAttempted,
-	           SaveInProgress,
-	           RestoreInProgress,
-	           RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		SyncPointAnnouncement request =
-			new SyncPointAnnouncement(label, EncodingHelpers.encodeString(tag), convertSet(syncset));
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "registerFederationSynchronizationPoint", theException );
-			}
-		}
-	}
-	
-	public void synchronizationPointAchieved( String label )
-	    throws SynchronizationPointLabelWasNotAnnounced,
-	           FederateNotExecutionMember,
-	           ConcurrentAccessAttempted,
-	           SaveInProgress,
-	           RestoreInProgress,
-	           RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		SyncPointAchieved request = new SyncPointAchieved( label );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSynchronizationLabelNotAnnounced )
-			{
-				throw new SynchronizationPointLabelWasNotAnnounced( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "synchronizationPointAchieved", theException );
-			}
-		}
-	}
-	
-	public void requestFederationSave( String label )
-		throws FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void requestFederationSave( String label, byte[] theTime )
-	    throws FederationTimeAlreadyPassed,
-	           InvalidFederationTime,
-	           FederateNotExecutionMember,
-	           ConcurrentAccessAttempted,
-	           SaveInProgress,
-	           RestoreInProgress,
-	           RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void federateSaveBegun()
-		throws SaveNotInitiated,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void federateSaveComplete()
-		throws SaveNotInitiated,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void federateSaveNotComplete()
-		throws SaveNotInitiated,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void requestFederationRestore( String label )
-		throws FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void federateRestoreComplete()
-		throws RestoreNotRequested,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void federateRestoreNotComplete()
-		throws RestoreNotRequested,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	///////////////////////////////////// 
-	// Declaration Management Services // 
-	///////////////////////////////////// 
-	public void publishObjectClass( int theClass, AttributeHandleSet attributes )
-	    throws ObjectClassNotDefined,
-	           AttributeNotDefined,
-	           OwnershipAcquisitionPending,
-	           FederateNotExecutionMember,
-	           ConcurrentAccessAttempted,
-	           SaveInProgress,
-	           RestoreInProgress,
-	           RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		PublishObjectClass request = new PublishObjectClass( theClass, convertSet(attributes) );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectClassNotDefined )
-			{
-				throw new ObjectClassNotDefined( theException );
-			}
-			else if( theException instanceof JAttributeNotDefined )
-			{
-				throw new AttributeNotDefined( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "publishObjectClass", theException );
-			}
-		}
-	}
-
-	public void unpublishObjectClass( int theClass )
-		throws ObjectClassNotDefined,
-		       ObjectClassNotPublished,
-		       OwnershipAcquisitionPending,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		UnpublishObjectClass request = new UnpublishObjectClass( theClass );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectClassNotDefined )
-			{
-				throw new ObjectClassNotDefined( theException );
-			}
-			else if( theException instanceof JObjectClassNotPublished )
-			{
-				throw new ObjectClassNotPublished( theException );
-			}
-			else if( theException instanceof JOwnershipAcquisitionPending )
-			{
-				throw new OwnershipAcquisitionPending( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "unpublishObjectClass", theException );
-			}
-		}
-	}
-
-	public void publishInteractionClass( int theInteraction )
-		throws InteractionClassNotDefined,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		PublishInteractionClass request = new PublishInteractionClass( theInteraction );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JInteractionClassNotDefined )
-			{
-				throw new InteractionClassNotDefined( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "publishInteractionClass", theException );
-			}
-		}
-	}
-
-	public void unpublishInteractionClass( int theInteraction )
-		throws InteractionClassNotDefined,
-		       InteractionClassNotPublished,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		UnpublishInteractionClass request = new UnpublishInteractionClass( theInteraction );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JInteractionClassNotDefined )
-			{
-				throw new InteractionClassNotDefined( theException );
-			}
-			else if( theException instanceof JInteractionClassNotPublished )
-			{
-				throw new InteractionClassNotPublished( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "unpublishInteractionClass", theException );
-			}
-		}
-	}
-
-	public void subscribeObjectClassAttributes( int theClass, AttributeHandleSet attributes )
-	    throws ObjectClassNotDefined,
-	           AttributeNotDefined,
-	           FederateNotExecutionMember,
-	           ConcurrentAccessAttempted,
-	           SaveInProgress,
-	           RestoreInProgress,
-	           RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		SubscribeObjectClass request =
-			new SubscribeObjectClass( theClass, convertSet(attributes), true );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectClassNotDefined )
-			{
-				throw new ObjectClassNotDefined( theException );
-			}
-			else if( theException instanceof JAttributeNotDefined )
-			{
-				throw new AttributeNotDefined( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "subscribeObjectClassAttributes", theException );
-			}
-		}
-	}
-
-	public void subscribeObjectClassAttributesPassively( int theClass,
-	                                                     AttributeHandleSet attributeList )
-	    throws ObjectClassNotDefined,
-	           AttributeNotDefined,
-	           FederateNotExecutionMember,
-	           ConcurrentAccessAttempted,
-	           SaveInProgress,
-	           RestoreInProgress,
-	           RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void unsubscribeObjectClass( int theClass )
-		throws ObjectClassNotDefined,
-		       ObjectClassNotSubscribed,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		UnsubscribeObjectClass request = new UnsubscribeObjectClass( theClass );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectClassNotDefined )
-			{
-				throw new ObjectClassNotDefined( theException );
-			}
-			else if( theException instanceof JObjectClassNotSubscribed )
-			{
-				throw new ObjectClassNotSubscribed( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "unsubscirbeObjectClass", theException );
-			}
-		}
-	}
-
-	public void subscribeInteractionClass( int theClass )
-		throws InteractionClassNotDefined,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       FederateLoggingServiceCalls,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		SubscribeInteractionClass request = new SubscribeInteractionClass( theClass );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JInteractionClassNotDefined )
-			{
-				throw new InteractionClassNotDefined( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "subscribeInteractionClass", theException );
-			}
-		}
-	}
-
-	public void subscribeInteractionClassPassively( int theClass )
-	    throws InteractionClassNotDefined,
-	           FederateNotExecutionMember,
-	           ConcurrentAccessAttempted,
-	           FederateLoggingServiceCalls,
-	           SaveInProgress,
-	           RestoreInProgress,
-	           RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void unsubscribeInteractionClass( int theClass )
-		throws InteractionClassNotDefined,
-		       InteractionClassNotSubscribed,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		UnsubscribeInteractionClass request = new UnsubscribeInteractionClass( theClass );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JInteractionClassNotDefined )
-			{
-				throw new InteractionClassNotDefined( theException );
-			}
-			else if( theException instanceof JInteractionClassNotSubscribed )
-			{
-				throw new InteractionClassNotSubscribed( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "unsubscribeInteractionClass", theException );
-			}
-		}
-	}
-	
-	////////////////////////////////
-	// Object Management Services // 
-	////////////////////////////////
-	public int registerObjectInstance( int theClass )
-		throws ObjectClassNotDefined,
-		       ObjectClassNotPublished,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		RegisterObject request = new RegisterObject( theClass );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return ((OCInstance)response.getResult()).getHandle();
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectClassNotDefined )
-			{
-				throw new ObjectClassNotDefined( theException );
-			}
-			else if( theException instanceof JObjectClassNotPublished )
-			{
-				throw new ObjectClassNotPublished( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "registerObjectInstance", theException );
-				return -1;
-			}
-		}
-	}
-
-	public int registerObjectInstance( int theClass, String theObject )
-	    throws ObjectClassNotDefined,
-	           ObjectClassNotPublished,
-	           ObjectAlreadyRegistered,
-	           FederateNotExecutionMember,
-	           ConcurrentAccessAttempted,
-	           SaveInProgress,
-	           RestoreInProgress,
-	           RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		RegisterObject request = new RegisterObject( theClass, theObject );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return ((OCInstance)response.getResult()).getHandle();
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectClassNotDefined )
-			{
-				throw new ObjectClassNotDefined( theException );
-			}
-			else if( theException instanceof JObjectClassNotPublished )
-			{
-				throw new ObjectClassNotPublished( theException );
-			}
-			else if( theException instanceof JObjectAlreadyRegistered )
-			{
-				throw new ObjectAlreadyRegistered( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "registerObjectInstance", theException );
-				return -1;
-			}
-		}
-	}
-
-	public EventRetractionHandle updateAttributeValues( int theObject,
-	                                                    SuppliedAttributes theAttributes,
-	                                                    byte[] theTime,
-	                                                    String tag )
-	    throws ObjectNotKnown,
-	           AttributeNotDefined,
-	           AttributeNotOwned,
-	           InvalidFederationTime,
-	           FederateNotExecutionMember,
-	           ConcurrentAccessAttempted,
-	           SaveInProgress,
-	           RestoreInProgress,
-	           RTIinternalError
-	{
-		////////////////////////////////////////////////////////
-		// 0. check that we have the right logical time class //
-		////////////////////////////////////////////////////////
-		HLA13ByteArrayMap map = theAttributes.toPorticoMap();
-		double time = 0.0;
-		try
-		{
-			time = EncodingHelpers.decodeDouble( theTime );
-		}
-		catch( Exception e )
-		{
-			throw new InvalidFederationTime( "Exception decoding time to double: "+e.getMessage() );
-		}
-	
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		UpdateAttributes request = new UpdateAttributes( theObject,
-		                                                 EncodingHelpers.encodeString(tag),
-		                                                 map.toJavaMap(),
-		                                                 time );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return null;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectNotKnown )
-			{
-				throw new ObjectNotKnown( theException );
-			}
-			else if( theException instanceof JAttributeNotDefined )
-			{
-				throw new AttributeNotDefined( theException );
-			}
-			else if( theException instanceof JAttributeNotOwned )
-			{
-				throw new AttributeNotOwned( theException );
-			}
-			else if( theException instanceof JInvalidFederationTime )
-			{
-				throw new InvalidFederationTime( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "updateAttributeValues(LogicalTime)", theException );
-				throw new RTIinternalError( theException.getMessage(), theException );
-			}
-		}
-	}
-
-	public void updateAttributeValues( int theObject,
-	                                   SuppliedAttributes theAttributes,
-	                                   String tag )
-		throws ObjectNotKnown,
-		       AttributeNotDefined,
-		       AttributeNotOwned,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		HLA13ByteArrayMap map = theAttributes.toPorticoMap();
-		UpdateAttributes request = new UpdateAttributes( theObject,
-		                                                 EncodingHelpers.encodeString(tag),
-		                                                 map.toJavaMap() );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectNotKnown )
-			{
-				throw new ObjectNotKnown( theException );
-			}
-			else if( theException instanceof JAttributeNotDefined )
-			{
-				throw new AttributeNotDefined( theException );
-			}
-			else if( theException instanceof JAttributeNotOwned )
-			{
-				throw new AttributeNotOwned( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "updateAttributeValues", theException );
-			}
-		}
-	}
-
-	public EventRetractionHandle sendInteraction( int theInteraction,
-	                                              SuppliedParameters theParameters,
-	                                              byte[] theTime,
-	                                              String tag )
-	    throws InteractionClassNotDefined,
-	           InteractionClassNotPublished,
-	           InteractionParameterNotDefined,
-	           InvalidFederationTime,
-	           FederateNotExecutionMember,
-	           ConcurrentAccessAttempted,
-	           SaveInProgress,
-	           RestoreInProgress,
-	           RTIinternalError
-	{
-		////////////////////////////////////////////////////////
-		// 0. check that we have the right logical time class //
-		////////////////////////////////////////////////////////
-		HLA13ByteArrayMap map = theParameters.toPorticoMap();
-		double time = 0.0;
-		try
-		{
-			time = EncodingHelpers.decodeDouble( theTime );
-		}
-		catch( Exception e )
-		{
-			throw new InvalidFederationTime( "Exception decoding time to double: "+e.getMessage() );
-		}
-
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		SendInteraction request = new SendInteraction( theInteraction,
-		                                               EncodingHelpers.encodeString(tag),
-		                                               map.toJavaMap(),
-		                                               time );
-		ResponseMessage response = processMessage( request );
-		
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return null;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JInteractionClassNotDefined )
-			{
-				throw new InteractionClassNotDefined( theException );
-			}
-			else if( theException instanceof JInteractionClassNotPublished )
-			{
-				throw new InteractionClassNotPublished( theException );
-			}
-			else if( theException instanceof JInteractionParameterNotDefined )
-			{
-				throw new InteractionParameterNotDefined( theException );
-			}
-			else if( theException instanceof JInvalidFederationTime )
-			{
-				throw new InvalidFederationTime( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "sentInteraction(LogicalTime)", theException );
-				throw new RTIinternalError( theException.getMessage(), theException );
-			}
-		}
-	}
-
-	public void sendInteraction( int iHandle, SuppliedParameters theParameters, String tag )
-		throws InteractionClassNotDefined,
-		       InteractionClassNotPublished,
-		       InteractionParameterNotDefined,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		HLA13ByteArrayMap map = theParameters.toPorticoMap();
-		
-		SendInteraction request =
-			new SendInteraction( iHandle, EncodingHelpers.encodeString(tag), map.toJavaMap() );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JInteractionClassNotDefined )
-			{
-				throw new InteractionClassNotDefined( theException );
-			}
-			else if( theException instanceof JInteractionClassNotPublished )
-			{
-				throw new InteractionClassNotPublished( theException );
-			}
-			else if( theException instanceof JInteractionParameterNotDefined )
-			{
-				throw new InteractionParameterNotDefined( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "sendInteraction", theException );
-			}
-		}
-	}
-
-	public EventRetractionHandle deleteObjectInstance( int theObject, byte[] theTime, String tag )
-	    throws ObjectNotKnown,
-	           DeletePrivilegeNotHeld,
-	           InvalidFederationTime,
-	           FederateNotExecutionMember,
-	           ConcurrentAccessAttempted,
-	           SaveInProgress,
-	           RestoreInProgress,
-	           RTIinternalError
-	{
-		////////////////////////////////////////////////////////
-		// 0. check that we have the right logical time class //
-		////////////////////////////////////////////////////////
-		double time = 0.0;
-		try
-		{
-			time = EncodingHelpers.decodeDouble( theTime );
-		}
-		catch( Exception e )
-		{
-			throw new InvalidFederationTime( "Exception decoding time to double: "+e.getMessage() );
-		}
-
-		
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		DeleteObject request = new DeleteObject(theObject, EncodingHelpers.encodeString(tag), time);
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return null;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectNotKnown )
-			{
-				throw new ObjectNotKnown( theException );
-			}
-			else if( theException instanceof JDeletePrivilegeNotHeld )
-			{
-				throw new DeletePrivilegeNotHeld( theException );
-			}
-			else if( theException instanceof JInvalidFederationTime )
-			{
-				throw new InvalidFederationTime( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "deleteObjectInstance", theException );
-				return null;
-			}
-		}
-	}
-
-	public void deleteObjectInstance( int theObject, String tag )
-		throws ObjectNotKnown,
-		       DeletePrivilegeNotHeld,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		DeleteObject request = new DeleteObject( theObject, EncodingHelpers.encodeString(tag) );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectNotKnown )
-			{
-				throw new ObjectNotKnown( theException );
-			}
-			else if( theException instanceof JDeletePrivilegeNotHeld )
-			{
-				throw new DeletePrivilegeNotHeld( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "deleteObjectInstance", theException );
-			}
-		}
-	}
-
-	public void localDeleteObjectInstance( int theObject )
-		throws ObjectNotKnown,
-		       FederateOwnsAttributes,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		LocalDelete request = new LocalDelete( theObject );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectNotKnown )
-			{
-				throw new ObjectNotKnown( theException );
-			}
-			else if( theException instanceof JFederateOwnsAttributes )
-			{
-				throw new FederateOwnsAttributes( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "localDeleteObjectInstance", theException );
-			}
-		}
-	}
-
-	public void changeAttributeTransportationType( int theObject,
-	                                               AttributeHandleSet theAttributes,
-	                                               int theType )
-		throws ObjectNotKnown,
-		       AttributeNotDefined,
-		       AttributeNotOwned,
-		       InvalidTransportationHandle,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void changeInteractionTransportationType( int theClass, int theType )
-		throws InteractionClassNotDefined,
-		       InteractionClassNotPublished,
-		       InvalidTransportationHandle,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void requestObjectAttributeValueUpdate( int theObject, AttributeHandleSet attributes )
-		throws ObjectNotKnown,
-		       AttributeNotDefined,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		RequestObjectUpdate request = new RequestObjectUpdate( theObject, convertSet(attributes) );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectNotKnown )
-			{
-				throw new ObjectNotKnown( theException );
-			}
-			else if( theException instanceof JAttributeNotDefined )
-			{
-				throw new AttributeNotDefined( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "requestObjectAttributeValueUpdate", theException );
-			}
-		}
-	}
-
-	public void requestClassAttributeValueUpdate( int theClass, AttributeHandleSet attributes )
-		throws ObjectClassNotDefined,
-		       AttributeNotDefined,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		RequestClassUpdate request = new RequestClassUpdate(theClass, convertSet(attributes), null);
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectClassNotDefined )
-			{
-				throw new ObjectClassNotDefined( theException );
-			}
-			else if( theException instanceof JAttributeNotDefined )
-			{
-				throw new AttributeNotDefined( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "requestClassAttributeValueUpdate", theException );
-			}
-		}
-	}
-
-	/////////////////////////////////// 
-	// Ownership Management Services // 
-	/////////////////////////////////// 
-
-	public void unconditionalAttributeOwnershipDivestiture( int theObject,
-	                                                        AttributeHandleSet theAttributes )
-		throws ObjectNotKnown,
-		       AttributeNotDefined,
-		       AttributeNotOwned,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-	
-	public void negotiatedAttributeOwnershipDivestiture( int theObject,
-	                                                     AttributeHandleSet theAttributes,
-	                                                     String theTag )
-		throws ObjectNotKnown,
-		       AttributeNotDefined,
-		       AttributeNotOwned,
-		       AttributeAlreadyBeingDivested,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-	
-	public void attributeOwnershipAcquisition( int theObject,
-	                                           AttributeHandleSet desiredAttributes,
-	                                           String theTag )
-		throws ObjectNotKnown,
-		       ObjectClassNotPublished,
-		       AttributeNotDefined,
-		       AttributeNotPublished,
-		       FederateOwnsAttributes,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void attributeOwnershipAcquisitionIfAvailable( int theObject,
-	                                                      AttributeHandleSet desiredAttributes )
-		throws ObjectNotKnown,
-		       ObjectClassNotPublished,
-		       AttributeNotDefined,
-		       AttributeNotPublished,
-		       FederateOwnsAttributes,
-		       AttributeAlreadyBeingAcquired,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public AttributeHandleSet attributeOwnershipReleaseResponse( int theObject,
-	                                                             AttributeHandleSet theAttributes )
-		throws ObjectNotKnown,
-		       AttributeNotDefined,
-		       AttributeNotOwned,
-		       FederateWasNotAskedToReleaseAttribute,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-	
-	public void cancelNegotiatedAttributeOwnershipDivestiture( int theObject,
-	                                                           AttributeHandleSet theAttributes )
-		throws ObjectNotKnown,
-		       AttributeNotDefined,
-		       AttributeNotOwned,
-		       AttributeDivestitureWasNotRequested,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-	
-	public void cancelAttributeOwnershipAcquisition( int theObject,
-	                                                 AttributeHandleSet theAttributes )
-		throws ObjectNotKnown,
-		       AttributeNotDefined,
-		       AttributeAlreadyOwned,
-		       AttributeAcquisitionWasNotRequested,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-	
-	public void queryAttributeOwnership( int theObject, int theAttribute )
-		throws ObjectNotKnown,
-		       AttributeNotDefined,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-	
-	public boolean isAttributeOwnedByFederate( int theObject, int theAttribute )
-		throws ObjectNotKnown,
-		       AttributeNotDefined,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-		
-		OCInstance instance = helper.getState().getRepository().getInstance( theObject );
-		if( instance == null )
-		{
-			throw new ObjectNotKnown( "handle: " + theObject );
-		}
-		else
-		{
-			ACInstance attribute = instance.getAttribute( theAttribute );
-			if( attribute == null )
-				throw new AttributeNotDefined( "handle: " + theAttribute );
-			else
-				return attribute.getOwner() == helper.getState().getFederateHandle();
-		}
-	}
-	
-	////////////////////////////// 
-	// Time Management Services // 
-	////////////////////////////// 
-	public void enableTimeRegulation( byte[] theFederateTime, byte[] theLookahead )
-		throws TimeRegulationAlreadyEnabled,
-		       EnableTimeRegulationPending,
-		       TimeAdvanceAlreadyInProgress,
-		       InvalidFederationTime,
-		       InvalidLookahead,
-		       ConcurrentAccessAttempted,
-		       FederateNotExecutionMember,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		////////////////////////////////////////////////////////
-		// 0. check that we have the right logical time class //
-		////////////////////////////////////////////////////////
-		double doubleLA = 0.0;
-		try
-		{
-			doubleLA = EncodingHelpers.decodeDouble( theLookahead );
-		}
-		catch( Exception e )
-		{
-			throw new InvalidFederationTime( "Exception decoding time to double: "+e.getMessage() );
-		}
-		
-		// check that it is valid
-		if( doubleLA < 0.0 )
-		{
-			throw new InvalidLookahead( "Negative Lookahead is invalid" );
-		}
-		
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		EnableTimeRegulation request = new EnableTimeRegulation( 0.0, doubleLA );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-			
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JTimeRegulationAlreadyEnabled )
-			{
-				throw new TimeRegulationAlreadyEnabled( theException );
-			}
-			else if( theException instanceof JEnableTimeRegulationPending )
-			{
-				throw new EnableTimeRegulationPending( theException );
-			}
-			else if( theException instanceof JTimeAdvanceAlreadyInProgress )
-			{
-				throw new TimeAdvanceAlreadyInProgress( theException );
-			}
-			else if( theException instanceof JInvalidFederationTime )
-			{
-				throw new InvalidFederationTime( theException );
-			}
-			else if( theException instanceof JInvalidLookahead )
-			{
-				throw new InvalidLookahead( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "enableTimeRegulation", theException );
-			}
-		}
-	}
-
-	public void disableTimeRegulation()
-		throws TimeRegulationWasNotEnabled,
-		       ConcurrentAccessAttempted,
-		       FederateNotExecutionMember,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		DisableTimeRegulation request = new DisableTimeRegulation();
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-			
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JTimeRegulationWasNotEnabled )
-			{
-				throw new TimeRegulationWasNotEnabled( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "disableTimeRegulation", theException );
-			}
-		}
-	}
-
-
-	public void enableTimeConstrained()
-		throws TimeConstrainedAlreadyEnabled,
-		       EnableTimeConstrainedPending,
-		       TimeAdvanceAlreadyInProgress,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		EnableTimeConstrained request = new EnableTimeConstrained();
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-			
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JTimeConstrainedAlreadyEnabled )
-			{
-				throw new TimeConstrainedAlreadyEnabled( theException );
-			}
-			else if( theException instanceof JEnableTimeConstrainedPending )
-			{
-				throw new EnableTimeConstrainedPending( theException );
-			}
-			else if( theException instanceof JTimeAdvanceAlreadyInProgress )
-			{
-				throw new TimeAdvanceAlreadyInProgress( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "enbaleTimeConstrained", theException );
-			}
-		}
-	}
-
-	public void disableTimeConstrained()
-		throws TimeConstrainedWasNotEnabled,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		DisableTimeConstrained request = new DisableTimeConstrained();
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-			
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JTimeConstrainedWasNotEnabled )
-			{
-				throw new TimeConstrainedWasNotEnabled( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "disableTimeConstrained", theException );
-			}
-		}
-	}
-	
-	public void timeAdvanceRequest( byte[] theTime )
-		throws InvalidFederationTime,
-		       FederationTimeAlreadyPassed,
-		       TimeAdvanceAlreadyInProgress,
-		       EnableTimeRegulationPending,
-		       EnableTimeConstrainedPending,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		////////////////////////////////////////////////////////
-		// 0. check that we have the right logical time class //
-		////////////////////////////////////////////////////////
-		double time = 0.0;
-		try
-		{
-			time = EncodingHelpers.decodeDouble( theTime );
-		}
-		catch( Exception e )
-		{
-			throw new InvalidFederationTime( "Exception decoding time to double: "+e.getMessage() );
-		}
-		
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		// the constructor below will throw InvalidResignAction for a dodgy value
-		TimeAdvanceRequest request = new TimeAdvanceRequest( time );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// request was fine
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JInvalidFederationTime )
-			{
-				throw new InvalidFederationTime( theException );
-			}
-			else if( theException instanceof JFederationTimeAlreadyPassed )
-			{
-				throw new FederationTimeAlreadyPassed( theException );
-			}
-			else if( theException instanceof JTimeAdvanceAlreadyInProgress )
-			{
-				throw new TimeAdvanceAlreadyInProgress( theException );
-			}
-			else if( theException instanceof JEnableTimeRegulationPending )
-			{
-				throw new EnableTimeRegulationPending( theException );
-			}
-			else if( theException instanceof JEnableTimeConstrainedPending )
-			{
-				throw new EnableTimeConstrainedPending( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "timeAdvanceRequest", theException );
-			}
-		}
-	}
-
-	public void timeAdvanceRequestAvailable( byte[] theTime )
-		throws InvalidFederationTime,
-		       FederationTimeAlreadyPassed,
-		       TimeAdvanceAlreadyInProgress,
-		       EnableTimeRegulationPending,
-		       EnableTimeConstrainedPending,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		////////////////////////////////////////////////////////
-		// 0. check that we have the right logical time class //
-		////////////////////////////////////////////////////////
-		double time = 0.0;
-		try
-		{
-			time = EncodingHelpers.decodeDouble( theTime );
-		}
-		catch( Exception e )
-		{
-			throw new InvalidFederationTime( "Exception decoding time to double: "+e.getMessage() );
-		}
-		
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		// the constructor below will throw InvalidResignAction for a dodgy value
-		TimeAdvanceRequest request = new TimeAdvanceRequest( time, true );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// request was fine
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JInvalidFederationTime )
-			{
-				throw new InvalidFederationTime( theException );
-			}
-			else if( theException instanceof JFederationTimeAlreadyPassed )
-			{
-				throw new FederationTimeAlreadyPassed( theException );
-			}
-			else if( theException instanceof JTimeAdvanceAlreadyInProgress )
-			{
-				throw new TimeAdvanceAlreadyInProgress( theException );
-			}
-			else if( theException instanceof JEnableTimeRegulationPending )
-			{
-				throw new EnableTimeRegulationPending( theException );
-			}
-			else if( theException instanceof JEnableTimeConstrainedPending )
-			{
-				throw new EnableTimeConstrainedPending( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "timeAdvanceRequestAvailable", theException );
-			}
-		}
-	}
-
-	public void nextEventRequest( byte[] theTime )
-		throws InvalidFederationTime,
-		       FederationTimeAlreadyPassed,
-		       TimeAdvanceAlreadyInProgress,
-		       EnableTimeRegulationPending,
-		       EnableTimeConstrainedPending,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		////////////////////////////////////////////////////////
-		// 0. check that we have the right logical time class //
-		////////////////////////////////////////////////////////
-		double time = 0.0;
-		try
-		{
-			time = EncodingHelpers.decodeDouble( theTime );
-		}
-		catch( Exception e )
-		{
-			throw new InvalidFederationTime( "Exception decoding time to double: "+e.getMessage() );
-		}
-		
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		// the constructor below will throw InvalidResignAction for a dodgy value
-		NextEventRequest request = new NextEventRequest( time );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// request was fine
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JInvalidFederationTime )
-			{
-				throw new InvalidFederationTime( theException );
-			}
-			else if( theException instanceof JFederationTimeAlreadyPassed )
-			{
-				throw new FederationTimeAlreadyPassed( theException );
-			}
-			else if( theException instanceof JTimeAdvanceAlreadyInProgress )
-			{
-				throw new TimeAdvanceAlreadyInProgress( theException );
-			}
-			else if( theException instanceof JEnableTimeRegulationPending )
-			{
-				throw new EnableTimeRegulationPending( theException );
-			}
-			else if( theException instanceof JEnableTimeConstrainedPending )
-			{
-				throw new EnableTimeConstrainedPending( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "nextEventRequest", theException );
-			}
-		}
-	}
-
-	public void nextEventRequestAvailable( byte[] theTime )
-		throws InvalidFederationTime,
-		       FederationTimeAlreadyPassed,
-		       TimeAdvanceAlreadyInProgress,
-		       EnableTimeRegulationPending,
-		       EnableTimeConstrainedPending,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		////////////////////////////////////////////////////////
-		// 0. check that we have the right logical time class //
-		////////////////////////////////////////////////////////
-		double time = 0.0;
-		try
-		{
-			time = EncodingHelpers.decodeDouble( theTime );
-		}
-		catch( Exception e )
-		{
-			throw new InvalidFederationTime( "Exception decoding time to double: "+e.getMessage() );
-		}
-		
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		// the constructor below will throw InvalidResignAction for a dodgy value
-		NextEventRequest request = new NextEventRequest( time, true );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// request was fine
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JInvalidFederationTime )
-			{
-				throw new InvalidFederationTime( theException );
-			}
-			else if( theException instanceof JFederationTimeAlreadyPassed )
-			{
-				throw new FederationTimeAlreadyPassed( theException );
-			}
-			else if( theException instanceof JTimeAdvanceAlreadyInProgress )
-			{
-				throw new TimeAdvanceAlreadyInProgress( theException );
-			}
-			else if( theException instanceof JEnableTimeRegulationPending )
-			{
-				throw new EnableTimeRegulationPending( theException );
-			}
-			else if( theException instanceof JEnableTimeConstrainedPending )
-			{
-				throw new EnableTimeConstrainedPending( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "nextEventRequestAvailable", theException );
-			}
-		}
-	}
-
-	public void flushQueueRequest( byte[] theTime )
-		throws InvalidFederationTime,
-		       FederationTimeAlreadyPassed,
-		       TimeAdvanceAlreadyInProgress,
-		       EnableTimeRegulationPending,
-		       EnableTimeConstrainedPending,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void enableAsynchronousDelivery()
-		throws AsynchronousDeliveryAlreadyEnabled,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		helper.getState().setAsynchronousDelivery( true );
-	}
-
-	public void disableAsynchronousDelivery()
-		throws AsynchronousDeliveryAlreadyDisabled,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		helper.getState().setAsynchronousDelivery( false );
-	}
-
-	public byte[] queryLBTS()
-		throws FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-		helper.checkSave();
-		helper.checkRestore();
-		
-		return EncodingHelpers.encodeDouble( helper.getState().getFederateLbts() );
-	}
-
-	public byte[] queryFederateTime()
-		throws FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-		helper.checkSave();
-		helper.checkRestore();
-		
-		return EncodingHelpers.encodeDouble( helper.getState().getCurrentTime() );
-	}
-
-	public byte[] queryMinNextEventTime()
-		throws FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-		helper.checkSave();
-		helper.checkRestore();
-		
-		// return the next min event time = current requested time + lookahead //
-		return EncodingHelpers.encodeDouble( helper.getState().getRequestedTime() + 
-		                                     helper.getState().getLookahead() );
-	}
-	
-	public void modifyLookahead( byte[] theLookahead )
-		throws InvalidLookahead,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		////////////////////////////////////////////////////////
-		// 0. check that we have the right logical time class //
-		////////////////////////////////////////////////////////
-		double time = 0.0;
-		try
-		{
-			time = EncodingHelpers.decodeDouble( theLookahead );
-		}
-		catch( Exception e )
-		{
-			throw new InvalidLookahead( "Exception decoding time to double: "+e.getMessage() );
-		}
-
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		ModifyLookahead request = new ModifyLookahead( time );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// request was fine
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JInvalidLookahead )
-			{
-				throw new InvalidLookahead( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "modifyLookahead", theException );
-			}
-		}
-	}
-
-	public byte[] queryLookahead()
-		throws FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-		helper.checkSave();
-		helper.checkRestore();
-		
-		return EncodingHelpers.encodeDouble( helper.getState().getLookahead() ); 
-	}
-
-	public void retract( EventRetractionHandle theHandle )
-		throws InvalidRetractionHandle,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-	
-	public void changeAttributeOrderType( int theObject,
-	                                      AttributeHandleSet theAttributes,
-	                                      int theType )
-		throws ObjectNotKnown,
-		       AttributeNotDefined,
-		       AttributeNotOwned,
-		       InvalidOrderingHandle,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-
-	public void changeInteractionOrderType( int theClass, int theType )
-		throws InteractionClassNotDefined,
-		       InteractionClassNotPublished,
-		       InvalidOrderingHandle,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	////////////////////////////////// 
-	// Data Distribution Management // 
-	////////////////////////////////// 
-	public Region createRegion( int theSpace, int numberOfExtents )
-		throws SpaceNotDefined,
-		       InvalidExtents,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		// create and process the message
-		CreateRegion request = new CreateRegion( theSpace, numberOfExtents );
-		ResponseMessage response = processMessage( request );
-
-		// check the response
-		if( response.isError() == false )
-		{
-			// we have a successful response, extract the region and return it
-			return new Java1Region( (RegionInstance)response.getResult() );
-		}
-
-		// an exception was caused by the request, figure out what it is and throw it
-		Throwable theException = ((ErrorResponse)response).getCause();
-		if( theException instanceof JRTIinternalError )
-		{
-			throw new RTIinternalError( theException );
-		}
-		else if( theException instanceof JSpaceNotDefined )
-		{
-			throw new SpaceNotDefined( theException );
-		}
-		else if( theException instanceof JInvalidExtents )
-		{
-			throw new InvalidExtents( theException );
-		}
-		else if( theException instanceof JFederateNotExecutionMember )
-		{
-			throw new FederateNotExecutionMember( theException );
-		}
-		else if( theException instanceof JSaveInProgress )
-		{
-			throw new SaveInProgress( theException );
-		}
-		else if( theException instanceof JRestoreInProgress )
-		{
-			throw new RestoreInProgress( theException );
-		}
-		else if( theException instanceof JConcurrentAccessAttempted )
-		{
-			throw new ConcurrentAccessAttempted( theException );
-		}
-		else
-		{
-			logException( "createRegion", theException );
-			return null; // will never get here, previous method will throw an exception always
-		}
-	}
-
-	public void notifyAboutRegionModification( Region theRegion )
-		throws RegionNotKnown,
-		       InvalidExtents,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		// construct the message and process it
-		ModifyRegion request = new ModifyRegion( Java1Region.toPorticoRegion(theRegion) );
-		ResponseMessage response = processMessage( request );
-		
-		// if we were successful, just return
-		if( response.isError() )
-		{
-			// an exception was caused by the request, figure out what it is and throw it
-			Throwable theException = ((ErrorResponse)response).getCause();
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JRegionNotKnown )
-			{
-				throw new RegionNotKnown( theException );
-			}
-			else if( theException instanceof JInvalidExtents )
-			{
-				throw new InvalidExtents( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "notifyOfRegionModification", theException );
-			}
-		}
-	}
-
-	public void deleteRegion( Region theRegion )
-		throws RegionNotKnown,
-		       RegionInUse,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		// construct the message, we'll need the region token for this
-		int regionToken = Java1Region.toPorticoRegion(theRegion).getToken();
-		ResponseMessage response = processMessage( new DeleteRegion(regionToken) );
-		
-		// if we were successful, just return, otherwise, process the error
-		if( response.isError() )
-		{
-			Throwable theException = ((ErrorResponse)response).getCause();
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JRegionNotKnown )
-			{
-				throw new RegionNotKnown( theException );
-			}
-			else if( theException instanceof JRegionInUse )
-			{
-				throw new RegionInUse( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "deleteRegion", theException );
-			}
-		}
-	}
-
-	public int registerObjectInstanceWithRegion( int theClass,
-	                                             int[] theAttributes,
-	                                             Region[] theRegions )
-		throws ObjectClassNotDefined,
-		       ObjectClassNotPublished,
-		       AttributeNotDefined,
-		       AttributeNotPublished,
-		       RegionNotKnown,
-		       InvalidRegionContext,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		if( theAttributes == null )
-			throw new RTIinternalError( "null passed for attribute array" );
-
-		RegisterObject request =
-			new RegisterObject( theClass, theAttributes, convertRegions(theRegions) );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return ((OCInstance)response.getResult()).getHandle();
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectClassNotDefined )
-			{
-				throw new ObjectClassNotDefined( theException );
-			}
-			else if( theException instanceof JObjectClassNotPublished )
-			{
-				throw new ObjectClassNotPublished( theException );
-			}
-			else if( theException instanceof JAttributeNotDefined )
-			{
-				throw new AttributeNotDefined( theException );
-			}
-			else if( theException instanceof JAttributeNotPublished )
-			{
-				throw new AttributeNotPublished( theException );
-			}
-			else if( theException instanceof JRegionNotKnown )
-			{
-				throw new RegionNotKnown( theException );
-			}
-			else if( theException instanceof JInvalidRegionContext )
-			{
-				throw new InvalidRegionContext( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "registerObjectInstanceWithRegion", theException );
-				return -1;
-			}
-		}
-	}
-
-	public int registerObjectInstanceWithRegion( int theClass,
-	                                             String theObject,
-	                                             int[] theAttributes,
-	                                             Region[] theRegions )
-		throws ObjectClassNotDefined,
-		       ObjectClassNotPublished,
-		       AttributeNotDefined,
-		       AttributeNotPublished,
-		       RegionNotKnown,
-		       InvalidRegionContext,
-		       ObjectAlreadyRegistered,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		if( theAttributes == null )
-			throw new RTIinternalError( "null passed for attribute array" );
-
-		RegisterObject request =
-			new RegisterObject( theClass, theObject, theAttributes, convertRegions(theRegions) );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return ((OCInstance)response.getResult()).getHandle();
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectClassNotDefined )
-			{
-				throw new ObjectClassNotDefined( theException );
-			}
-			else if( theException instanceof JObjectClassNotPublished )
-			{
-				throw new ObjectClassNotPublished( theException );
-			}
-			else if( theException instanceof JAttributeNotDefined )
-			{
-				throw new AttributeNotDefined( theException );
-			}
-			else if( theException instanceof JAttributeNotPublished )
-			{
-				throw new AttributeNotPublished( theException );
-			}
-			else if( theException instanceof JRegionNotKnown )
-			{
-				throw new RegionNotKnown( theException );
-			}
-			else if( theException instanceof JInvalidRegionContext )
-			{
-				throw new InvalidRegionContext( theException );
-			}
-			else if( theException instanceof JObjectAlreadyRegistered )
-			{
-				throw new ObjectAlreadyRegistered( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "registerObjectInstanceWithRegion", theException );
-				return -1;
-			}
-		}
-	}
-	
-	public void associateRegionForUpdates( Region theRegion,
-	                                       int theObject,
-	                                       AttributeHandleSet attributes )
-		throws ObjectNotKnown,
-		       AttributeNotDefined,
-		       InvalidRegionContext,
-		       RegionNotKnown,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		// construct the message, we'll need the region token for this
-		AssociateRegion request = new AssociateRegion( convertRegion(theRegion).getToken(),
-		                                               theObject,
-		                                               convertSet(attributes) );
-		ResponseMessage response = processMessage( request );
-		
-		// if we were successful, just return, otherwise, process the error
-		if( response.isError() )
-		{
-			Throwable theException = ((ErrorResponse)response).getCause();
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectNotKnown )
-			{
-				throw new ObjectNotKnown( theException );
-			}
-			else if( theException instanceof JAttributeNotDefined )
-			{
-				throw new AttributeNotDefined( theException );
-			}
-			else if( theException instanceof JInvalidRegionContext )
-			{
-				throw new InvalidRegionContext( theException );
-			}
-			else if( theException instanceof JRegionNotKnown )
-			{
-				throw new RegionNotKnown( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "associateRegionForUpdates", theException );
-			}
-		}
-	}
-
-	public void unassociateRegionForUpdates( Region theRegion, int theObject )
-		throws ObjectNotKnown,
-		       InvalidRegionContext,
-		       RegionNotKnown,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		// construct the message, we'll need the region token for this
-		UnassociateRegion request = new UnassociateRegion( convertRegion(theRegion).getToken(),
-		                                                   theObject );
-		ResponseMessage response = processMessage( request );
-		
-		// if we were successful, just return, otherwise, process the error
-		if( response.isError() )
-		{
-			Throwable theException = ((ErrorResponse)response).getCause();
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectNotKnown )
-			{
-				throw new ObjectNotKnown( theException );
-			}
-			else if( theException instanceof JInvalidRegionContext )
-			{
-				throw new InvalidRegionContext( theException );
-			}
-			else if( theException instanceof JRegionNotKnown )
-			{
-				throw new RegionNotKnown( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "unassociateRegionForUpdates", theException );
-			}
-		}
-	}
-
-	public void subscribeObjectClassAttributesWithRegion( int theClass,
-	                                                      Region theRegion,
-	                                                      AttributeHandleSet attributes )
-		throws ObjectClassNotDefined,
-		       AttributeNotDefined,
-		       RegionNotKnown,
-		       InvalidRegionContext,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		int regionToken = convertRegion(theRegion).getToken();
-		SubscribeObjectClass request =
-			new SubscribeObjectClass( theClass, convertSet(attributes), true, regionToken );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectClassNotDefined )
-			{
-				throw new ObjectClassNotDefined( theException );
-			}
-			else if( theException instanceof JAttributeNotDefined )
-			{
-				throw new AttributeNotDefined( theException );
-			}
-			else if( theException instanceof JRegionNotKnown )
-			{
-				throw new RegionNotKnown( theException );
-			}
-			else if( theException instanceof JInvalidRegionContext )
-			{
-				throw new InvalidRegionContext( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "subscribeObjectClassAttributesWithRegion", theException );
-			}
-		}
-	}
-
-	public void subscribeObjectClassAttributesPassivelyWithRegion( int theClass,
-	                                                               Region theRegion,
-	                                                               AttributeHandleSet attributes )
-		throws ObjectClassNotDefined,
-		       AttributeNotDefined,
-		       RegionNotKnown,
-		       InvalidRegionContext,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void unsubscribeObjectClassWithRegion( int theClass, Region theRegion )
-		throws ObjectClassNotDefined,
-		       RegionNotKnown,
-		       ObjectClassNotSubscribed,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		UnsubscribeObjectClass request =
-			new UnsubscribeObjectClass( theClass, convertRegion(theRegion).getToken() );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectClassNotDefined )
-			{
-				throw new ObjectClassNotDefined( theException );
-			}
-			else if( theException instanceof JRegionNotKnown )
-			{
-				throw new RegionNotKnown( theException );
-			}
-			else if( theException instanceof JObjectClassNotSubscribed )
-			{
-				throw new ObjectClassNotSubscribed( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "unsubscirbeObjectClassWithRegion", theException );
-			}
-		}
-	}
-
-	public void subscribeInteractionClassWithRegion( int theClass, Region theRegion )
-		throws InteractionClassNotDefined,
-		       RegionNotKnown,
-		       InvalidRegionContext,
-		       FederateLoggingServiceCalls,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		SubscribeInteractionClass request =
-			new SubscribeInteractionClass( theClass, false, convertRegion(theRegion).getToken() );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JInteractionClassNotDefined )
-			{
-				throw new InteractionClassNotDefined( theException );
-			}
-			else if( theException instanceof JRegionNotKnown )
-			{
-				throw new RegionNotKnown( theException );
-			}
-			else if( theException instanceof JInvalidRegionContext )
-			{
-				throw new InvalidRegionContext( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "subscribeInteractionClassWithRegion", theException );
-			}
-		}
-	}
-
-	public void subscribeInteractionClassPassivelyWithRegion( int theClass, Region theRegion )
-		throws InteractionClassNotDefined,
-		       RegionNotKnown,
-		       InvalidRegionContext,
-		       FederateLoggingServiceCalls,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void unsubscribeInteractionClassWithRegion( int theClass, Region theRegion )
-		throws InteractionClassNotDefined,
-		       InteractionClassNotSubscribed,
-		       RegionNotKnown,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		UnsubscribeInteractionClass request =
-			new UnsubscribeInteractionClass( theClass, convertRegion(theRegion).getToken() );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JInteractionClassNotDefined )
-			{
-				throw new InteractionClassNotDefined( theException );
-			}
-			else if( theException instanceof JInteractionClassNotSubscribed )
-			{
-				throw new InteractionClassNotSubscribed( theException );
-			}
-			else if( theException instanceof JRegionNotKnown )
-			{
-				throw new RegionNotKnown( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "unsubscribeInteractionClassWithRegion", theException );
-			}
-		}
-	}
-
-	public EventRetractionHandle sendInteractionWithRegion( int theInteraction,
-	                                                        SuppliedParameters theParameters,
-	                                                        byte[] theTime,
-	                                                        String tag,
-	                                                        Region theRegion )
-		throws InteractionClassNotDefined,
-		       InteractionClassNotPublished,
-		       InteractionParameterNotDefined,
-		       InvalidFederationTime,
-		       RegionNotKnown,
-		       InvalidRegionContext,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		HLA13ByteArrayMap map = theParameters.toPorticoMap();
-		double time = 0.0;
-		try
-		{
-			time = EncodingHelpers.decodeDouble( theTime );
-		}
-		catch( Exception e )
-		{
-			throw new InvalidFederationTime( "Exception decoding time to double: "+e.getMessage() );
-		}
-
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		SendInteraction request = new SendInteraction( theInteraction,
-		                                               EncodingHelpers.encodeString(tag),
-		                                               map.toJavaMap(),
-		                                               convertRegion(theRegion).getToken(),
-		                                               time );
-		ResponseMessage response = processMessage( request );
-		
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return null;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JInteractionClassNotDefined )
-			{
-				throw new InteractionClassNotDefined( theException );
-			}
-			else if( theException instanceof JInteractionClassNotPublished )
-			{
-				throw new InteractionClassNotPublished( theException );
-			}
-			else if( theException instanceof JInteractionParameterNotDefined )
-			{
-				throw new InteractionParameterNotDefined( theException );
-			}
-			else if( theException instanceof JInvalidFederationTime )
-			{
-				throw new InvalidFederationTime( theException );
-			}
-			else if( theException instanceof JRegionNotKnown )
-			{
-				throw new RegionNotKnown( theException );
-			}
-			else if( theException instanceof JInvalidRegionContext )
-			{
-				throw new InvalidRegionContext( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "sentInteractionWithRegion(LogicalTime)", theException );
-				throw new RTIinternalError( theException.getMessage(), theException );
-			}
-		}
-	}
-
-	public void sendInteractionWithRegion( int theInteraction,
-	                                       SuppliedParameters theParameters,
-	                                       String tag,
-	                                       Region theRegion )
-		throws InteractionClassNotDefined,
-		       InteractionClassNotPublished,
-		       InteractionParameterNotDefined,
-		       RegionNotKnown,
-		       InvalidRegionContext,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		HLA13ByteArrayMap map = theParameters.toPorticoMap();
-		SendInteraction request = new SendInteraction( theInteraction,
-		                                               EncodingHelpers.encodeString(tag),
-		                                               map.toJavaMap(),
-		                                               convertRegion(theRegion).getToken() );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JInteractionClassNotDefined )
-			{
-				throw new InteractionClassNotDefined( theException );
-			}
-			else if( theException instanceof JInteractionClassNotPublished )
-			{
-				throw new InteractionClassNotPublished( theException );
-			}
-			else if( theException instanceof JInteractionParameterNotDefined )
-			{
-				throw new InteractionParameterNotDefined( theException );
-			}
-			else if( theException instanceof JRegionNotKnown )
-			{
-				throw new RegionNotKnown( theException );
-			}
-			else if( theException instanceof JInvalidRegionContext )
-			{
-				throw new InvalidRegionContext( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "sendInteractionWithRegion", theException );
-			}
-		}
-	}
-	
-	public void requestClassAttributeValueUpdateWithRegion( int theClass,
-	                                                        AttributeHandleSet attributes,
-	                                                        Region theRegion )
-		throws ObjectClassNotDefined,
-		       AttributeNotDefined,
-		       RegionNotKnown,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		///////////////////////////////////////////////////////
-		// 1. create the message and pass it to the LRC sink //
-		///////////////////////////////////////////////////////
-		RequestClassUpdate request = new RequestClassUpdate( theClass,
-		                                                     convertSet(attributes),
-		                                                     null,
-		                                                     convertRegion(theRegion).getToken() );
-		ResponseMessage response = processMessage( request );
-
-		////////////////////////////
-		// 2. process the results //
-		////////////////////////////
-		// check to see if we got an error or a success
-		if( response.isError() == false )
-		{
-			// everything went fine!
-			return;
-		}
-		else
-		{
-			// an exception was caused :(
-			Throwable theException = ((ErrorResponse)response).getCause();
-
-			if( theException instanceof JRTIinternalError )
-			{
-				throw new RTIinternalError( theException );
-			}
-			else if( theException instanceof JObjectClassNotDefined )
-			{
-				throw new ObjectClassNotDefined( theException );
-			}
-			else if( theException instanceof JAttributeNotDefined )
-			{
-				throw new AttributeNotDefined( theException );
-			}
-			else if( theException instanceof JRegionNotKnown )
-			{
-				throw new RegionNotKnown( theException );
-			}
-			else if( theException instanceof JFederateNotExecutionMember )
-			{
-				throw new FederateNotExecutionMember( theException );
-			}
-			else if( theException instanceof JSaveInProgress )
-			{
-				throw new SaveInProgress( theException );
-			}
-			else if( theException instanceof JRestoreInProgress )
-			{
-				throw new RestoreInProgress( theException );
-			}
-			else if( theException instanceof JConcurrentAccessAttempted )
-			{
-				throw new ConcurrentAccessAttempted( theException );
-			}
-			else
-			{
-				logException( "requestClassAttributeValueUpdateWithRegion", theException );
-			}
-		}
-	}
-	
-	////////////////////////// 
-	// RTI Support Services // 
-	////////////////////////// 
-	public int getObjectClassHandle( String theName )
-		throws NameNotFound,
-		       FederateNotExecutionMember,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-
-		// get the class
-		OCMetadata cls = helper.getFOM().getObjectClass( theName );
-		if( cls == null )
-			throw new NameNotFound( theName );
-		else
-			return cls.getHandle();
-	}
-
-	// 10.3
-	public String getObjectClassName( int theHandle )
-		throws ObjectClassNotDefined,
-		       FederateNotExecutionMember,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-
-		// get the class
-		OCMetadata cls = helper.getFOM().getObjectClass( theHandle );
-		if( cls == null )
-		{
-			throw new ObjectClassNotDefined( "handle: " + theHandle );
-		}
-		else
-		{
-			if( theHandle < ObjectModel.MAX_MOM_HANDLE )
-				return MOMHelper.strip1516Crap( cls.getQualifiedName() );
-			else
-				return cls.getQualifiedName();
-		}
-	}
-
-	// 10.4
-	public int getAttributeHandle( String theName, int whichClass )
-		throws ObjectClassNotDefined,
-		       NameNotFound,
-		       FederateNotExecutionMember,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-
-		OCMetadata cls = helper.getFOM().getObjectClass( whichClass );
-		if( cls == null )
-			throw new ObjectClassNotDefined( "handle: " + whichClass );
-		
-		ACMetadata aClass = helper.getFOM().getAttributeClass( whichClass, theName );
-		if( aClass == null )
-			throw new NameNotFound( "name: " + theName );
-		else
-			return aClass.getHandle();
-	}
-
-	// 10.5
-	public String getAttributeName( int theHandle, int whichClass )
-		throws ObjectClassNotDefined,
-		       AttributeNotDefined, 
-		       FederateNotExecutionMember,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-
-		OCMetadata cls = helper.getFOM().getObjectClass( whichClass );
-		if( cls == null )
-		{
-			throw new ObjectClassNotDefined( "handle: " + whichClass );
-		}
-		else
-		{
-			String name = cls.getAttributeName( theHandle );
-			if( name == null )
-			{
-				throw new AttributeNotDefined( "handle: " + theHandle );
-			}
-			else
-			{
-				if( theHandle < ObjectModel.MAX_MOM_HANDLE )
-					return MOMHelper.strip1516Crap( name );
-				else
-					return name;
-			}
-		}
-	}
-
-	// 10.6
-	public int getInteractionClassHandle( String theName )
-		throws NameNotFound,
-		       FederateNotExecutionMember,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-
-		// get the class
-		ICMetadata cls = helper.getFOM().getInteractionClass( theName );
-		if( cls == null )
-			throw new NameNotFound( theName );
-		else
-			return cls.getHandle();
-	}
-
-	// 10.7
-	public String getInteractionClassName( int theHandle )
-		throws InteractionClassNotDefined,
-		       FederateNotExecutionMember,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-
-		// get the class
-		ICMetadata cls = helper.getFOM().getInteractionClass( theHandle );
-		if( cls == null )
-			throw new InteractionClassNotDefined( "handle: " + theHandle );
-		else
-			return cls.getQualifiedName();
-	}
-
-	// 10.8
-	public int getParameterHandle( String theName, int whichClass )
-		throws InteractionClassNotDefined,
-		       NameNotFound,
-		       FederateNotExecutionMember,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-
-		ICMetadata cls = helper.getFOM().getInteractionClass( whichClass );
-		if( cls == null )
-		{
-			throw new InteractionClassNotDefined( "handle: " + whichClass );
-		}
-		else
-		{
-			int handle = cls.getParameterHandle( theName );
-			if( handle == ObjectModel.INVALID_HANDLE )
-			{
-				throw new NameNotFound( "name: " + theName );
-			}
-			else
-			{
-				return handle;
-			}
-		}
-	}
-
-	// 10.9
-	public String getParameterName( int theHandle, int whichClass )
-		throws InteractionClassNotDefined,
-		       InteractionParameterNotDefined,
-		       FederateNotExecutionMember,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-
-		ICMetadata cls = helper.getFOM().getInteractionClass( whichClass );
-		if( cls == null )
-		{
-			throw new InteractionClassNotDefined( "handle: " + whichClass );
-		}
-		else
-		{
-			String name = cls.getParameterName( theHandle );
-			if( name == null )
-			{
-				throw new InteractionParameterNotDefined( "handle: " + theHandle );
-			}
-			else
-			{
-				return name;
-			}
-		}
-	}
-
-	// 10.10
-	public int getObjectInstanceHandle( String theName )
-		throws ObjectNotKnown,
-		       FederateNotExecutionMember,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-
-		OCInstance instance = helper.getState().getRepository().getInstance( theName );
-		if( instance == null )
-			throw new ObjectNotKnown( "name: " + theName );
-		else
-			return instance.getHandle();
-	}
-
-	// 10.11
-	public String getObjectInstanceName( int theHandle )
-		throws ObjectNotKnown,
-		       FederateNotExecutionMember,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-
-		OCInstance instance = helper.getState().getRepository().getInstance( theHandle );
-		if( instance == null )
-			throw new ObjectNotKnown( "handle: " + theHandle );
-		else
-			return instance.getName();
-	}
-
-	public int getRoutingSpaceHandle( String theName )
-		throws NameNotFound,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-		helper.checkAccess();
-		
-		Space space = helper.getFOM().getSpace( theName );
-		if( space == null )
-			throw new NameNotFound( "space: " + theName );
-		else
-			return space.getHandle();
-	}
-
-	public String getRoutingSpaceName( int theHandle )
-		throws SpaceNotDefined,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-		helper.checkAccess();
-
-		Space space = helper.getFOM().getSpace( theHandle );
-		if( space == null )
-			throw new SpaceNotDefined( "space: " + theHandle );
-		else
-			return space.getName();
-	}
-	
-	public int getDimensionHandle( String theName, int whichSpace )
-		throws SpaceNotDefined,
-		       NameNotFound,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-		helper.checkAccess();
-
-		// get the space
-		Space space = helper.getFOM().getSpace( whichSpace );
-		if( space == null )
-			throw new SpaceNotDefined( "space: " + whichSpace );
-		
-		// get the dimension
-		Dimension dimension = space.getDimension( theName );
-		if( dimension == null )
-		{
-			throw new NameNotFound( "dimension: " + theName + ", space: " + whichSpace );
-		}
-		else
-		{
-			return dimension.getHandle();
-		}
-	}
-
-	public String getDimensionName( int theHandle, int whichSpace )
-		throws SpaceNotDefined,
-		       DimensionNotDefined,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-		helper.checkAccess();
-
-		// get the space
-		Space space = helper.getFOM().getSpace( whichSpace );
-		if( space == null )
-		{
-			throw new SpaceNotDefined( "space: " + whichSpace );
-		}
-		
-		// get the dimension
-		Dimension dimension = space.getDimension( theHandle );
-		if( dimension == null )
-		{
-			throw new DimensionNotDefined( "dimension: " + theHandle + ", space: " + whichSpace );
-		}
-		else
-		{
-			return dimension.getName();
-		}
-	}
-	
-	public int getAttributeRoutingSpaceHandle( int theHandle, int whichClass )
-		throws ObjectClassNotDefined,
-		       AttributeNotDefined,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-
-		// get the class
-		OCMetadata objectClass = helper.getFOM().getObjectClass( whichClass );
-		if( objectClass == null )
-			throw new ObjectClassNotDefined( "handle: " + whichClass );
-		
-		// get the attribute
-		ACMetadata attributeClass = objectClass.getAttribute( theHandle );
-		if( attributeClass == null )
-			throw new AttributeNotDefined( "handle: " + theHandle + ", class: " + objectClass );
-		
-		if( attributeClass.getSpace() == null )
-			return PorticoConstants.NULL_HANDLE;
-		else
-			return attributeClass.getSpace().getHandle();
-	}
-
-	// 10.17 
-	public int getObjectClass( int theObject )
-		throws ObjectNotKnown,
-		       FederateNotExecutionMember,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-		
-		OCInstance instance = helper.getState().getRepository().getInstance( theObject );
-		if( instance == null )
-			throw new ObjectNotKnown( "handle: " + theObject );
-		else
-			return instance.getDiscoveredType().getHandle();
-	}
-
-	public int getInteractionRoutingSpaceHandle( int theHandle )
-		throws InteractionClassNotDefined,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-
-		// get the class
-		ICMetadata interactionClass = helper.getFOM().getInteractionClass( theHandle );
-		if( interactionClass == null )
-			throw new InteractionClassNotDefined( "handle: " + theHandle );
-		
-		if( interactionClass.getSpace() == null )
-			return PorticoConstants.NULL_HANDLE;
-		else
-			return interactionClass.getSpace().getHandle();
-	}
-
-	public int getTransportationHandle( String theName )
-		throws NameNotFound,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public String getTransportationName( int theHandle )
-		throws InvalidTransportationHandle,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public int getOrderingHandle( String theName )
-		throws NameNotFound,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public String getOrderingName( int theHandle )
-		throws InvalidOrderingHandle,
-		       FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void enableClassRelevanceAdvisorySwitch()
-		throws FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void disableClassRelevanceAdvisorySwitch()
-		throws FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void enableAttributeRelevanceAdvisorySwitch()
-		throws FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void disableAttributeRelevanceAdvisorySwitch()
-		throws FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void enableAttributeScopeAdvisorySwitch()
-		throws FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void disableAttributeScopeAdvisorySwitch()
-		throws FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void enableInteractionRelevanceAdvisorySwitch()
-		throws FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public void disableInteractionRelevanceAdvisorySwitch()
-		throws FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       SaveInProgress,
-		       RestoreInProgress,
-		       RTIinternalError
-	{
-		throw new RTIinternalError( "Feature not yet supported" );
-	}
-
-	public Region getRegion( int regionToken )
-		throws FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       RegionNotKnown,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-		helper.checkAccess();
-		
-		// look the region up in the region store
-		RegionInstance region = helper.getState().getRegionStore().getRegion( regionToken );
-		if( region == null )
-			throw new RegionNotKnown( "region token: " + regionToken );
-		else
-			return new Java1Region( region );
-	}
-
-	public int getRegionToken( Region region )
-		throws FederateNotExecutionMember,
-		       ConcurrentAccessAttempted,
-		       RegionNotKnown,
-		       RTIinternalError
-	{
-		helper.checkJoined();
-		helper.checkAccess();
-		
-		// make sure we have the appropriate type of region
-		try
-		{
-			Java1Region java1Region = (Java1Region)region;
-			// we could just get the region handle directly from the given instance, but
-			// we only want to return the handle if this is a region WE (the current LRC)
-			// knows about. Thus, we have to consult the LRCRegionStore
-			if( helper.getState().getRegionStore().containsRegion(java1Region) )
-				return java1Region.getRegionHandle();
-			else
-				throw new RegionNotKnown( "Region is unknown to this federate" );
-		}
-		catch( ClassCastException e )
-		{
-			throw new RTIinternalError( "Non-Portico Region Implementation" );
-		}
-	}
-	
-	public boolean tick()
-		throws SpecifiedSaveLabelDoesNotExist,
-		       ConcurrentAccessAttempted,
-		       RTIinternalError
-	{
-		helper.tick();
-		return true;
-	}
-
-	public boolean tick( double minimum, double maximum )
-		throws SpecifiedSaveLabelDoesNotExist,
-		       ConcurrentAccessAttempted,
-		       RTIinternalError
-	{
-		helper.tick( minimum, maximum );
-		return true;
-	}
-
-	/////////////////////////////////////////////////////////////////////////////////////////
-	//////////////////////////////// Private Utility Methods ////////////////////////////////
-	/////////////////////////////////////////////////////////////////////////////////////////
-	/**
-	 * This method will take a given {@link PorticoMessage} and pass it to the LRC for processing.
-	 * If the LRC isn't regulating, it will remove any timestamp. The current handle of the LRC
-	 * (returned from the joinFederation method) will be added to the message as the source
-	 * federate handle. If the response is null, an RTIinternalError will be thrown, otherwise the
-	 * ResponseMessage that was given back will be returned.
-	 */
-	private ResponseMessage processMessage( PorticoMessage request )
-	{
-		try
-		{
-			// make sure we don't have concurrent access problems
-			this.helper.checkAccess();
-			
-			// FIX: PORT-106: remove the time from the message if we are not constrained
-			if( this.helper.getState().isRegulating() == false )
-			{
-				request.setTimestamp( PorticoConstants.NULL_TIME );
-			}
-			
-			// set the target federate, if we have not joined yet (or have resigned)
-			// this will be null
-			request.setSourceFederate( this.helper.getState().getFederateHandle() );
-			
-			// create the context
-			MessageContext message = new MessageContext( request );
-	
-			// pass it to the sink
-			helper.processMessage( message );
-
-			// check for a response
-			if( message.getResponse() == null )
-			{
-				throw new RTIinternalError( "No response from RTI (null) for message type: " +
-											request.getIdentifier() );
-			}
-
-			// if the response is an error, log it
-			if( message.isSuccessResponse() == false && message.getResponse() != null )
-			{
-				helper.getLrcLogger().error( ((ErrorResponse)message.getResponse()).getCause() );
-			}
-			
-			// return the response
-			return message.getResponse();
-		}
-		catch( Exception e )
-		{
-			// log the exception
-			this.helper.getLrcLogger().error( e );
-			
-			// there was an exception, pacakge a response
-			return new ErrorResponse( e );
-		}
-	}
-	
-	/**
-	 * This method prints the stack trace for the exception and then throws an RTIinternalError 
-	 */
-	private void logException( String method, Throwable e ) throws RTIinternalError
-	{
-		throw new RTIinternalError( "Unknown exception received from RTI (" + e.getClass() +
-			") for " + method + "(): "+ e.getMessage(), e );
-	}
-
-	/////////////////////////////////////////////////////////////////////////////////////////
-	//////////////////////////////// Type Conversion Methods ////////////////////////////////
-	/////////////////////////////////////////////////////////////////////////////////////////
-	/**
-	 * Converts the given FederateHandleSet to a pure java HashSet. If the given set is null,
-	 * null will be returned.
-	 */
-	private HashSet<Integer> convertSet( FederateHandleSet fhs ) throws RTIinternalError
-	{
-		if( fhs == null )
-			return null;
-		else
-			return fhs.toPorticoSet().toJavaSet();
-	}
-	
-	/**
-	 * Converts the given AttributeHandleSet to a pure java HashSet. If the given set is null,
-	 * null will be returned.
-	 */
-	private HashSet<Integer> convertSet( AttributeHandleSet ahs ) throws RTIinternalError
-	{
-		if( ahs == null )
-			return null;
-		else
-			return ahs.toPorticoSet().toJavaSet();
-	}
-
-	/**
-	 * This method will take in a given region instance, check that it is of the appropriate
-	 * Portico type, convert it to the type and return it. If it isn't the right type, an
-	 * exception will be thrown. If the region is null, an exception will be thrown.
-	 */
-	private RegionInstance convertRegion( Region region ) throws RegionNotKnown
-	{
-		if( region == null )
-			throw new RegionNotKnown( "Null region received" );
-
-		try
-		{
-			return ((Java1Region)region).getWrappedRegion();
-		}
-		catch( ClassCastException cce )
-		{
-			throw new RegionNotKnown( "Supplied region is not a Portico region", cce );
-		}
-	}
-
-	/**
-	 * Convert the given array of regions to an array of integers that represents the region
-	 * tokens of each of the regions.
-	 */
-	private int[] convertRegions( Region[] regions ) throws RegionNotKnown
-	{
-		if( regions == null )
-			throw new RegionNotKnown( "Null region array received" );
-
-		int[] tokenArray = new int[regions.length];
-		
-		for( int i = 0; i < regions.length; i++ )
-		{
-			Region current = regions[i];
-			
-			// make sure we have a region
-			if( current == null )
-				throw new RegionNotKnown( "Null region in array at index: " + i );
-			
-			// try to convert the region to get its token
-			try
-			{
-				tokenArray[i] = ((Java1Region)current).getWrappedRegion().getToken();
-			}
-			catch( ClassCastException cce )
-			{
-				throw new RegionNotKnown( "Supplied region was not a Portico implementation: " +
-				                          current.getClass(), cce );
-			}
-		}
-		
-		return tokenArray;
-	}
-	
-	//----------------------------------------------------------
-	//                     STATIC METHODS
-	//----------------------------------------------------------
-}
Index: codebase/src-java/example/hla13java1/src/hla13java1/ExampleJava1FederateAmbassador.java
===================================================================
--- codebase/src-java/example/hla13java1/src/hla13java1/ExampleJava1FederateAmbassador.java	(revision 1552)
+++ codebase/src-java/example/hla13java1/src/hla13java1/ExampleJava1FederateAmbassador.java	(working copy)
@@ -1,261 +0,0 @@
-/*
- *   Copyright 2007 The Portico Project
- *
- *   This file is part of portico.
- *
- *   portico is free software; you can redistribute it and/or modify
- *   it under the terms of the Common Developer and Distribution License (CDDL) 
- *   as published by Sun Microsystems. For more information see the LICENSE file.
- *   
- *   Use of this software is strictly AT YOUR OWN RISK!!!
- *   If something bad happens you do not have permission to come crying to me.
- *   (that goes for your lawyer as well)
- *
- */
-package hla13java1;
-
-import hla.rti13.java1.EncodingHelpers;
-import hla.rti13.java1.EventRetractionHandle;
-import hla.rti13.java1.NullFederateAmbassador;
-import hla.rti13.java1.ReceivedInteraction;
-import hla.rti13.java1.ReflectedAttributes;
-
-/**
- * This class handles all incoming callbacks from the RTI regarding a particular
- * {@link ExampleJava1Federate}. It will log information about any callbacks it
- * receives, thus demonstrating how to deal with the provided callback information.
- */
-public class ExampleJava1FederateAmbassador extends NullFederateAmbassador
-{
-	//----------------------------------------------------------
-	//                    STATIC VARIABLES
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                   INSTANCE VARIABLES
-	//----------------------------------------------------------
-	// these variables are accessible in the package
-	protected double federateTime        = 0.0;
-	protected double federateLookahead   = 1.0;
-	
-	protected boolean isRegulating       = false;
-	protected boolean isConstrained      = false;
-	protected boolean isAdvancing        = false;
-	
-	protected boolean isAnnounced        = false;
-	protected boolean isReadyToRun       = false;
-
-	//----------------------------------------------------------
-	//                      CONSTRUCTORS
-	//----------------------------------------------------------
-
-	public ExampleJava1FederateAmbassador()
-	{
-	}
-
-	//----------------------------------------------------------
-	//                    INSTANCE METHODS
-	//----------------------------------------------------------
-	
-	public double convertTime( byte[] time )
-	{
-		try
-		{
-			return EncodingHelpers.decodeDouble( time );
-		}
-		catch( Exception e )
-		{
-			e.printStackTrace();
-			return -1.0;
-		}
-	}
-	
-	private void log( String message )
-	{
-		System.out.println( "FederateAmbassador: " + message );
-	}
-	
-	//////////////////////////////////////////////////////////////////////////
-	////////////////////////// RTI Callback Methods //////////////////////////
-	//////////////////////////////////////////////////////////////////////////
-	public void synchronizationPointRegistrationFailed( String label )
-	{
-		log( "Failed to register sync point: " + label );
-	}
-
-	public void synchronizationPointRegistrationSucceeded( String label )
-	{
-		log( "Successfully registered sync point: " + label );
-	}
-
-	public void announceSynchronizationPoint( String label, String tag )
-	{
-		log( "Synchronization point announced: " + label );
-		if( label.equals(ExampleJava1Federate.READY_TO_RUN) )
-			this.isAnnounced = true;
-	}
-
-	public void federationSynchronized( String label )
-	{
-		log( "Federation Synchronized: " + label );
-		if( label.equals(ExampleJava1Federate.READY_TO_RUN) )
-			this.isReadyToRun = true;
-	}
-
-	/**
-	 * The RTI has informed us that time regulation is now enabled.
-	 */
-	public void timeRegulationEnabled( byte[] theFederateTime )
-	{
-		this.federateTime = convertTime( theFederateTime );
-		this.isRegulating = true;
-	}
-
-	public void timeConstrainedEnabled( byte[] theFederateTime )
-	{
-		this.federateTime = convertTime( theFederateTime );
-		this.isConstrained = true;
-	}
-
-	public void timeAdvanceGrant( byte[] theTime )
-	{
-		this.federateTime = convertTime( theTime );
-		this.isAdvancing = false;
-	}
-
-	public void discoverObjectInstance( int theObject,
-	                                    int theObjectClass,
-	                                    String objectName )
-	{
-		log( "Discoverd Object: handle=" + theObject + ", classHandle=" +
-		     theObjectClass + ", name=" + objectName );
-	}
-
-	public void reflectAttributeValues( int theObject,
-	                                    ReflectedAttributes theAttributes,
-	                                    String tag )
-	{
-		// just pass it on to the other method for printing purposes
-		// passing null as the time will let the other method know it
-		// it from us, not from the RTI
-		reflectAttributeValues( theObject, theAttributes, null, tag, null );
-	}
-
-	public void reflectAttributeValues( int theObject,
-	                                    ReflectedAttributes theAttributes,
-	                                    byte[] theTime,
-	                                    String theTag,
-	                                    EventRetractionHandle theHandle )
-	{
-		StringBuilder builder = new StringBuilder( "Reflection for object:" );
-		
-		// print the handle
-		builder.append( " handle=" + theObject );
-		// print the tag
-		builder.append( ", tag=" + theTag );
-		// print the time (if we have it) we'll get null if we are just receiving
-		// a forwarded call from the other reflect callback above
-		if( theTime != null )
-		{
-			builder.append( ", time=" + convertTime(theTime) );
-		}
-		
-		// print the attribute information
-		builder.append( ", attributeCount=" + theAttributes.size() );
-		builder.append( "\n" );
-		for( int i = 0; i < theAttributes.size(); i++ )
-		{
-			try
-			{
-				// print the attibute handle
-				builder.append( "\tattributeHandle=" );
-				builder.append( theAttributes.getHandle(i) );
-				// print the attribute value
-				builder.append( ", attributeValue=" );
-				builder.append(
-				    EncodingHelpers.decodeString(theAttributes.getValue(i)) );
-				builder.append( "\n" );
-			}
-			catch( Exception e )
-			{
-				log( "Exception processing received reflection" );
-				e.printStackTrace();
-			}
-		}
-		
-		log( builder.toString() );
-	}
-
-	public void receiveInteraction( int interactionClass,
-	                                ReceivedInteraction theInteraction,
-	                                String tag )
-	{
-		// just pass it on to the other method for printing purposes
-		// passing null as the time will let the other method know it
-		// it from us, not from the RTI
-		receiveInteraction( interactionClass, theInteraction, null, tag, null );
-	}
-
-	public void receiveInteraction( int interactionClass,
-	                                ReceivedInteraction theInteraction,
-	                                byte[] theTime,
-	                                String theTag,
-	                                EventRetractionHandle eventRetractionHandle )
-	{
-		StringBuilder builder = new StringBuilder( "Interaction Received:" );
-		
-		// print the handle
-		builder.append( " handle=" + interactionClass );
-		// print the tag
-		builder.append( ", tag=" + theTag );
-		// print the time (if we have it) we'll get null if we are just receiving
-		// a forwarded call from the other reflect callback above
-		if( theTime != null )
-		{
-			builder.append( ", time=" + convertTime(theTime) );
-		}
-		
-		// print the parameter information
-		builder.append( ", parameterCount=" + theInteraction.size() );
-		builder.append( "\n" );
-		for( int i = 0; i < theInteraction.size(); i++ )
-		{
-			try
-			{
-				// print the parameter handle
-				builder.append( "\tparamHandle=" );
-				builder.append( theInteraction.getHandle(i) );
-				// print the parameter value
-				builder.append( ", paramValue=" );
-				builder.append(
-				    EncodingHelpers.decodeString(theInteraction.getValue(i)) );
-				builder.append( "\n" );
-			}
-			catch( Exception e )
-			{
-				log( "Exception processing received interaction" );
-				e.printStackTrace();
-			}
-		}
-
-		log( builder.toString() );
-	}
-
-	public void removeObjectInstance( int theObject, String userSuppliedTag )
-	{
-		log( "Object Removed: handle=" + theObject );
-	}
-
-	public void removeObjectInstance( int theObject,
-	                                  byte[] theTime,
-	                                  String theTag,
-	                                  EventRetractionHandle theHandle )
-	{
-		log( "Object Removed: handle=" + theObject );
-	}
-
-
-	//----------------------------------------------------------
-	//                     STATIC METHODS
-	//----------------------------------------------------------
-}
Index: codebase/src-java/example/hla13java1/src/hla13java1/ExampleJava1Federate.java
===================================================================
--- codebase/src-java/example/hla13java1/src/hla13java1/ExampleJava1Federate.java	(revision 1552)
+++ codebase/src-java/example/hla13java1/src/hla13java1/ExampleJava1Federate.java	(working copy)
@@ -1,546 +0,0 @@
-/*
- *   Copyright 2007 The Portico Project
- *
- *   This file is part of portico.
- *
- *   portico is free software; you can redistribute it and/or modify
- *   it under the terms of the Common Developer and Distribution License (CDDL) 
- *   as published by Sun Microsystems. For more information see the LICENSE file.
- *   
- *   Use of this software is strictly AT YOUR OWN RISK!!!
- *   If something bad happens you do not have permission to come crying to me.
- *   (that goes for your lawyer as well)
- *
- */
-package hla13java1;
-
-import hla.rti13.java1.AttributeHandleSet;
-import hla.rti13.java1.AttributeHandleSetFactory;
-import hla.rti13.java1.EncodingHelpers;
-import hla.rti13.java1.FederatesCurrentlyJoined;
-import hla.rti13.java1.FederationExecutionAlreadyExists;
-import hla.rti13.java1.FederationExecutionDoesNotExist;
-import hla.rti13.java1.RTIambassador;
-import hla.rti13.java1.RTIexception;
-import hla.rti13.java1.ResignAction;
-import hla.rti13.java1.SuppliedAttributes;
-import hla.rti13.java1.SuppliedAttributesFactory;
-import hla.rti13.java1.SuppliedParameters;
-import hla.rti13.java1.SuppliedParametersFactory;
-
-import java.io.BufferedReader;
-import java.io.InputStreamReader;
-
-/**
- * This is an example federate demonstrating how to properly use the HLA 1.3 Java
- * interface supplied with Portico.
- * 
- * As it is intended for example purposes, this is a rather simple federate. The
- * process is goes through is as follows:
- * 
- *  1. Create the RTIambassador
- *  2. Try to create the federation (nofail)
- *  3. Join the federation
- *  4. Announce a Synchronization Point (nofail)
- *  5. Wait for the federation to Synchronized on the point
- *  6. Enable Time Regulation and Constrained
- *  7. Publish and Subscribe
- *  8. Register an Object Instance
- *  9. Main Simulation Loop (executes 20 times)
- *       9.1 Update attributes of registered object
- *       9.2 Send an Interaction
- *       9.3 Advance time by 1.0
- * 10. Delete the Object Instance
- * 11. Resign from Federation
- * 12. Try to destroy the federation (nofail)
- * 
- * NOTE: Those items marked with (nofail) deal with situations where multiple
- *       federates may be working in the federation. In this sitaution, the
- *       federate will attempt to carry out the tasks defined, but it won't
- *       stop or exit if they fail. For example, if another federate has already
- *       created the federation, the call to create it again will result in an
- *       exception. The example federate expects this and will not fail.
- * NOTE: Between actions 4. and 5., the federate will pause until the uses presses
- *       the enter key. This will give other federates a chance to enter the
- *       federation and prevent other federates from racing ahead.
- * 
- * 
- * The main method to take notice of is {@link #runFederate(String)}. It controls the
- * main simulation loop and triggers most of the important behaviour. To make the code
- * simpler to read and navigate, many of the important HLA activities are broken down
- * into separate methods. For example, if you want to know how to send an interaction,
- * see the {@link #sendInteraction()} method.
- * 
- * With regard to the FederateAmbassador, it will log all incoming information. Thus,
- * if it receives any reflects or interactions etc... you will be notified of them.
- * 
- * Note that all of the methods throw an RTIexception. This class is the parent of all
- * HLA exceptions. The HLA Java interface is full of exceptions, with only a handful 
- * being actually useful. To make matters worse, they're all checked exceptions, so
- * unlike C++, we are forced to handle them by the compiler. This is unnecessary in
- * this small example, so we'll just throw all exceptions out to the main method and
- * handle them there, rather than handling each exception independently as they arise.
- */
-public class ExampleJava1Federate
-{
-	//----------------------------------------------------------
-	//                    STATIC VARIABLES
-	//----------------------------------------------------------
-	/** The number of times we will update our attributes and send an interaction */
-	public static final int ITERATIONS = 20;
-
-	/** The sync point all federates will sync up on before starting */
-	public static final String READY_TO_RUN = "ReadyToRun";
-
-	//----------------------------------------------------------
-	//                   INSTANCE VARIABLES
-	//----------------------------------------------------------
-	private RTIambassador rtiamb;
-	private ExampleJava1FederateAmbassador fedamb;
-
-	//----------------------------------------------------------
-	//                      CONSTRUCTORS
-	//----------------------------------------------------------
-
-	//----------------------------------------------------------
-	//                    INSTANCE METHODS
-	//----------------------------------------------------------
-	/**
-	 * This is just a helper method to make sure all logging it output in the same form
-	 */
-	private void log( String message )
-	{
-		System.out.println( "ExampleFederate   : " + message );
-	}
-
-	/**
-	 * This method will block until the user presses enter
-	 */
-	private void waitForUser()
-	{
-		log( " >>>>>>>>>> Press Enter to Continue <<<<<<<<<<" );
-		BufferedReader reader = new BufferedReader( new InputStreamReader(System.in) );
-		try
-		{
-			reader.readLine();
-		}
-		catch( Exception e )
-		{
-			log( "Error while waiting for user input: " + e.getMessage() );
-			e.printStackTrace();
-		}
-	}
-
-	/**
-	 * Convers a double time to the expected serialized form
-	 */
-	private byte[] convertTime( double time )
-	{
-		try
-		{
-			// PORTICO SPECIFIC!!
-			return EncodingHelpers.encodeDouble( time );
-		}
-		catch( Exception e )
-		{
-			log( "Exception during time conversion" );
-			e.printStackTrace();
-			return null;
-		}
-	}
-	
-	///////////////////////////////////////////////////////////////////////////
-	////////////////////////// Main Simulation Method /////////////////////////
-	///////////////////////////////////////////////////////////////////////////
-
-	/**
-	 * This is the main simulation loop. It can be thought of as the main method of
-	 * the federate. For a description of the basic flow of this federate, see the
-	 * class level comments
-	 */
-	public void runFederate( String federateName ) throws RTIexception
-	{
-		/////////////////////////////////
-		// 1. create the RTIambassador //
-		/////////////////////////////////
-		rtiamb = new RTIambassador();
-
-		//////////////////////////////////////////
-		// 2. create and join to the federation //
-		//////////////////////////////////////////
-		// create
-		// NOTE: some other federate may have already created the federation,
-		//       in that case, we'll just try and join it
-		try
-		{
-			rtiamb.createFederationExecution( "ExampleFederation", "testfom.fed" );
-			log( "Created Federation" );
-		}
-		catch( FederationExecutionAlreadyExists exists )
-		{
-			log( "Didn't create federation, it already existed" );
-		}
-		
-		////////////////////////////
-		// 3. join the federation //
-		////////////////////////////
-		// create the federate ambassador and join the federation
-		fedamb = new ExampleJava1FederateAmbassador();
-		rtiamb.joinFederationExecution( federateName, "ExampleFederation", fedamb );
-		log( "Joined Federation as " + federateName );
-
-		////////////////////////////////
-		// 4. announce the sync point //
-		////////////////////////////////
-		// announce a sync point to get everyone on the same page. if the point
-		// has already been registered, we'll get a callback saying it failed,
-		// but we don't care about that, as long as someone registered it
-		rtiamb.registerFederationSynchronizationPoint( READY_TO_RUN, null );
-		// wait until the point is announced
-		while( fedamb.isAnnounced == false )
-		{
-			rtiamb.tick();
-		}
-
-		// WAIT FOR USER TO KICK US OFF
-		// So that there is time to add other federates, we will wait until the
-		// user hits enter before proceeding. That was, you have time to start
-		// other federates.
-		waitForUser();
-
-		///////////////////////////////////////////////////////
-		// 5. achieve the point and wait for synchronization //
-		///////////////////////////////////////////////////////
-		// tell the RTI we are ready to move past the sync point and then wait
-		// until the federation has synchronized on
-		rtiamb.synchronizationPointAchieved( READY_TO_RUN );
-		log( "Achieved sync point: " +READY_TO_RUN+ ", waiting for federation..." );
-		while( fedamb.isReadyToRun == false )
-		{
-			rtiamb.tick();
-		}
-
-		/////////////////////////////
-		// 6. enable time policies //
-		/////////////////////////////
-		// in this section we enable/disable all time policies
-		// note that this step is optional!
-		enableTimePolicy();
-		log( "Time Policy Enabled" );
-
-		//////////////////////////////
-		// 7. publish and subscribe //
-		//////////////////////////////
-		// in this section we tell the RTI of all the data we are going to
-		// produce, and all the data we want to know about
-		publishAndSubscribe();
-		log( "Published and Subscribed" );
-
-		/////////////////////////////////////
-		// 8. register an object to update //
-		/////////////////////////////////////
-		int objectHandle = registerObject();
-		log( "Registered Object, handle=" + objectHandle );
-		
-		////////////////////////////////////
-		// 9. do the main simulation loop //
-		////////////////////////////////////
-		// here is where we do the meat of our work. in each iteration, we will
-		// update the attribute values of the object we registered, and will
-		// send an interaction.
-		for( int i = 0; i < ITERATIONS; i++ )
-		{
-			// 9.1 update the attribute values of the instance //
-			updateAttributeValues( objectHandle );
-			
-			// 9.2 send an interaction
-			sendInteraction();
-			
-			// 9.3 request a time advance and wait until we get it
-			advanceTime( 1.0 );
-			log( "Time Advanced to " + fedamb.federateTime );
-		}
-
-		//////////////////////////////////////
-		// 10. delete the object we created //
-		//////////////////////////////////////
-		deleteObject( objectHandle );
-		log( "Deleted Object, handle=" + objectHandle );
-
-		////////////////////////////////////
-		// 11. resign from the federation //
-		////////////////////////////////////
-		rtiamb.resignFederationExecution( ResignAction.NO_ACTION );
-		log( "Resigned from Federation" );
-
-		////////////////////////////////////////
-		// 12. try and destroy the federation //
-		////////////////////////////////////////
-		// NOTE: we won't die if we can't do this because other federates
-		//       remain. in that case we'll leave it for them to clean up
-		try
-		{
-			rtiamb.destroyFederationExecution( "ExampleFederation" );
-			log( "Destroyed Federation" );
-		}
-		catch( FederationExecutionDoesNotExist dne )
-		{
-			log( "No need to destroy federation, it doesn't exist" );
-		}
-		catch( FederatesCurrentlyJoined fcj )
-		{
-			log( "Didn't destroy federation, federates still joined" );
-		}
-	}
-	
-	////////////////////////////////////////////////////////////////////////////
-	////////////////////////////// Helper Methods //////////////////////////////
-	////////////////////////////////////////////////////////////////////////////
-	/**
-	 * This method will attempt to enable the various time related properties for
-	 * the federate
-	 */
-	private void enableTimePolicy() throws RTIexception
-	{
-		////////////////////////////
-		// enable time regulation //
-		////////////////////////////
-		this.rtiamb.enableTimeRegulation( convertTime(fedamb.federateTime),
-		                                  convertTime(fedamb.federateLookahead) );
-
-		// tick until we get the callback
-		while( fedamb.isRegulating == false )
-		{
-			rtiamb.tick();
-		}
-		
-		/////////////////////////////
-		// enable time constrained //
-		/////////////////////////////
-		this.rtiamb.enableTimeConstrained();
-		
-		// tick until we get the callback
-		while( fedamb.isConstrained == false )
-		{
-			rtiamb.tick();
-		}
-	}
-	
-	/**
-	 * This method will inform the RTI about the types of data that the federate will
-	 * be creating, and the types of data we are interested in hearing about as other
-	 * federates produce it.
-	 */
-	private void publishAndSubscribe() throws RTIexception
-	{
-		////////////////////////////////////////////
-		// publish all attributes of ObjectRoot.A //
-		////////////////////////////////////////////
-		// before we can register instance of the object class ObjectRoot.A and
-		// update the values of the various attributes, we need to tell the RTI
-		// that we intend to publish this information
-
-		// get all the handle information for the attributes of ObjectRoot.A
-		int classHandle = rtiamb.getObjectClassHandle( "ObjectRoot.A" );
-		int aaHandle    = rtiamb.getAttributeHandle( "aa", classHandle );
-		int abHandle    = rtiamb.getAttributeHandle( "ab", classHandle );
-		int acHandle    = rtiamb.getAttributeHandle( "ac", classHandle );
-
-		// package the information into a handle set
-		AttributeHandleSet attributes = AttributeHandleSetFactory.create( 3 );
-		attributes.add( aaHandle );
-		attributes.add( abHandle );
-		attributes.add( acHandle );
-		
-		// do the actual publication
-		rtiamb.publishObjectClass( classHandle, attributes );
-
-		/////////////////////////////////////////////////
-		// subscribe to all attributes of ObjectRoot.A //
-		/////////////////////////////////////////////////
-		// we also want to hear about the same sort of information as it is
-		// created and altered in other federates, so we need to subscribe to it
-		
-		rtiamb.subscribeObjectClassAttributes( classHandle, attributes );
-
-		/////////////////////////////////////////////////////
-		// publish the interaction class InteractionRoot.X //
-		/////////////////////////////////////////////////////
-		// we want to send interactions of type InteractionRoot.X, so we need
-		// to tell the RTI that we're publishing it first. We don't need to
-		// inform it of the parameters, only the class, making it much simpler
-		int interactionHandle = rtiamb.getInteractionClassHandle( "InteractionRoot.X" );
-		
-		// do the publication
-		rtiamb.publishInteractionClass( interactionHandle );
-
-		////////////////////////////////////////////////////
-		// subscribe to the InteractionRoot.X interaction //
-		////////////////////////////////////////////////////
-		// we also want to receive other interaction of the same type that are
-		// sent out by other federates, so we have to subscribe to it first
-		rtiamb.subscribeInteractionClass( interactionHandle );
-	}
-	
-	/**
-	 * This method will register an instance of the class ObjectRoot.A and will
-	 * return the federation-wide unique handle for that instance. Later in the
-	 * simulation, we will update the attribute values for this instance
-	 */
-	private int registerObject() throws RTIexception
-	{
-		int classHandle = rtiamb.getObjectClassHandle( "ObjectRoot.A" );
-		return rtiamb.registerObjectInstance( classHandle );
-	}
-	
-	/**
-	 * This method will update all the values of the given object instance. It will
-	 * set each of the values to be a string which is equal to the name of the
-	 * attribute plus the current time. eg "aa:10.0" if the time is 10.0.
-	 * <p/>
-	 * Note that we don't actually have to update all the attributes at once, we
-	 * could update them individually, in groups or not at all!
-	 */
-	private void updateAttributeValues( int objectHandle ) throws RTIexception
-	{
-		///////////////////////////////////////////////
-		// create the necessary container and values //
-		///////////////////////////////////////////////
-		// create the collection to store the values in, as you can see
-		// this is quite a lot of work
-		SuppliedAttributes attributes = SuppliedAttributesFactory.create( 3 );
-		
-		// generate the new values
-		// we use EncodingHelpers to make things nice friendly for both Java and C++
-		byte[] aaValue = EncodingHelpers.encodeString( "aa:" + getLbts() );
-		byte[] abValue = EncodingHelpers.encodeString( "ab:" + getLbts() );
-		byte[] acValue = EncodingHelpers.encodeString( "ac:" + getLbts() );
-		
-		// get the handles
-		// this line gets the object class of the instance identified by the
-		// object instance the handle points to
-		int classHandle = rtiamb.getObjectClass( objectHandle );
-		int aaHandle = rtiamb.getAttributeHandle( "aa", classHandle );
-		int abHandle = rtiamb.getAttributeHandle( "ab", classHandle );
-		int acHandle = rtiamb.getAttributeHandle( "ac", classHandle );
-
-		// put the values into the collection
-		attributes.add( aaHandle, aaValue );
-		attributes.add( abHandle, abValue );
-		attributes.add( acHandle, acValue );
-
-		//////////////////////////
-		// do the actual update //
-		//////////////////////////
-		rtiamb.updateAttributeValues( objectHandle, attributes, generateTag() );
-		
-		// note that if you want to associate a particular timestamp with the
-		// update. here we send another update, this time with a timestamp:
-		byte[] time = convertTime( fedamb.federateTime + fedamb.federateLookahead );
-		rtiamb.updateAttributeValues( objectHandle, attributes, time, generateTag() );
-	}
-	
-	/**
-	 * This method will send out an interaction of the type InteractionRoot.X. Any
-	 * federates which are subscribed to it will receive a notification the next time
-	 * they tick(). Here we are passing only two of the three parameters we could be
-	 * passing, but we don't actually have to pass any at all!
-	 */
-	private void sendInteraction() throws RTIexception
-	{
-		///////////////////////////////////////////////
-		// create the necessary container and values //
-		///////////////////////////////////////////////
-		// create the collection to store the values in
-		SuppliedParameters parameters = SuppliedParametersFactory.create( 2 );
-		
-		// generate the new values
-		// we use EncodingHelpers to make things nice friendly for both Java and C++
-		byte[] xaValue = EncodingHelpers.encodeString( "xa:" + getLbts() );
-		byte[] xbValue = EncodingHelpers.encodeString( "xb:" + getLbts() );
-		
-		// get the handles
-		int classHandle = rtiamb.getInteractionClassHandle( "InteractionRoot.X" );
-		int xaHandle = rtiamb.getParameterHandle( "xa", classHandle );
-		int xbHandle = rtiamb.getParameterHandle( "xb", classHandle );
-
-		// put the values into the collection
-		parameters.add( xaHandle, xaValue );
-		parameters.add( xbHandle, xbValue );
-
-		//////////////////////////
-		// send the interaction //
-		//////////////////////////
-		rtiamb.sendInteraction( classHandle, parameters, generateTag() );
-		
-		// if you want to associate a particular timestamp with the
-		// interaction, you will have to supply it to the RTI. Here
-		// we send another interaction, this time with a timestamp:
-		byte[] time = convertTime( fedamb.federateTime + fedamb.federateLookahead );
-		rtiamb.sendInteraction( classHandle, parameters, time, generateTag() );
-	}
-
-	/**
-	 * This method will request a time advance to the current time, plus the given
-	 * timestep. It will then wait until a notification of the time advance grant
-	 * has been received.
-	 */
-	private void advanceTime( double timestep ) throws RTIexception
-	{
-		// request the advance
-		fedamb.isAdvancing = true;
-		byte[] newTime = convertTime( fedamb.federateTime + timestep );
-		rtiamb.timeAdvanceRequest( newTime );
-		
-		// wait for the time advance to be granted. ticking will tell the
-		// LRC to start delivering callbacks to the federate
-		while( fedamb.isAdvancing )
-		{
-			rtiamb.tick();
-		}
-	}
-
-	/**
-	 * This method will attempt to delete the object instance of the given
-	 * handle. We can only delete objects we created, or for which we own the
-	 * privilegeToDelete attribute.
-	 */
-	private void deleteObject( int handle ) throws RTIexception
-	{
-		rtiamb.deleteObjectInstance( handle, generateTag() );
-	}
-
-	private double getLbts()
-	{
-		return fedamb.federateTime + fedamb.federateLookahead;
-	}
-
-	private String generateTag()
-	{
-		return ""+System.currentTimeMillis();
-	}
-
-	//----------------------------------------------------------
-	//                     STATIC METHODS
-	//----------------------------------------------------------
-	public static void main( String[] args )
-	{
-		// get a federate name, use "exampleFederate" as default
-		String federateName = "exampleFederate";
-		if( args.length != 0 )
-		{
-			federateName = args[0];
-		}
-		
-		try
-		{
-			// run the example federate
-			new ExampleJava1Federate().runFederate( federateName );
-		}
-		catch( RTIexception rtie )
-		{
-			// an exception occurred, just log the information and exit
-			rtie.printStackTrace();
-		}
-	}
-}
Index: codebase/src-java/example/hla13java1/win32.bat
===================================================================
--- codebase/src-java/example/hla13java1/win32.bat	(revision 1552)
+++ codebase/src-java/example/hla13java1/win32.bat	(working copy)
@@ -1,81 +0,0 @@
-@echo off
-
-rem ################################
-rem # check command line arguments #
-rem ################################
-:checkargs
-if "%1" == "" goto usage
-
-rem ######################
-rem # test for JAVA_HOME #
-rem ######################
-set JAVA=java
-set JAVAC=javac
-set JAR=jar
-if "%JAVA_HOME%" == "" goto nojava
-
-rem # we must have JAVA_HOME set
-set JAVA="%JAVA_HOME%\bin\java"
-set JAVAC="%JAVA_HOME%\bin\javac"
-set JAR="%JAVA_HOME%\bin\jar"
-goto rtihometest
-
-:nojava
-echo ERROR Your JAVA_HOME environment variable is not set!
-goto rtihometest
-
-rem #####################
-rem # test for RTI_HOME #
-rem #####################
-:rtihometest
-if "%RTI_HOME%" == "" goto nortihome
-if not "%RTI_HOME%" == "" goto run
-
-:nortihome
-cd ..\..\..
-set RTI_HOME=%CD%
-cd examples\java\hla13java1
-echo WARNING Your RTI_HOME environment variable is not set, using %RTI_HOME%
-goto run
-
-:run
-if "%1" == "clean" goto clean
-if "%1" == "compile" goto compile
-if "%1" == "execute" goto execute
-
-rem ############################################
-rem ### (target) clean #########################
-rem ############################################
-:clean
-echo "deleting example federate jar file and left over logs"
-del src\hla13java1\*.class
-del java-hla13java1.jar
-rd /S /Q logs
-goto finish
-
-rem ############################################
-rem ### (target) compile #######################
-rem ############################################
-:compile
-echo "compiling example federate"
-cd src
-%JAVAC% -cp ".;%RTI_HOME%\lib\portico.jar" hla13java1\*.java
-%JAR% -cf ..\java-hla13java1.jar hla13java1\*.class
-cd ..
-goto finish
-
-rem ############################################
-rem ### (target) execute #######################
-rem ############################################
-:execute
-SHIFT
-%JAVA% -cp "java-hla13java1.jar;%RTI_HOME%\lib\portico.jar" hla13java1.ExampleJava1Federate %1 %2 %3 %4 %5 %6 %7 %8 %9
-goto finish
-
-
-
-:usage
-echo usage: win32.bat [compile] [clean] [execute [federate-name]]
-
-:finish
-
Index: codebase/src-java/example/hla13java1/linux.sh
===================================================================
--- codebase/src-java/example/hla13java1/linux.sh	(revision 1552)
+++ codebase/src-java/example/hla13java1/linux.sh	(working copy)
@@ -1,74 +0,0 @@
-#!/bin/bash
-
-USAGE="usage: linux.sh [compile] [clean] [execute [federate-name]]"
-
-################################
-# check command line arguments #
-################################
-if [ $# = 0 ]
-then
-	echo $USAGE
-	exit;
-fi
-
-######################
-# test for JAVA_HOME #
-######################
-JAVA=java
-if [ "$JAVA_HOME" = "" ]
-then
-	echo WARNING Your JAVA_HOME environment variable is not set!
-	#exit;
-else
-        JAVA=$JAVA_HOME/bin/java
-fi
-
-#####################
-# test for RTI_HOME #
-#####################
-if [ "$RTI_HOME" = "" ]
-then
-	cd ../../../
-	RTI_HOME=$PWD
-	export RTI_HOME
-	cd examples/java/hla13java1
-	echo WARNING Your RTI_HOME environment variable is not set, assuming $RTI_HOME
-fi
-
-############################################
-### (target) clean #########################
-############################################
-if [ $1 = "clean" ]
-then
-	echo "deleting example federate jar file and left over logs"
-	rm src/hla13java1/*.class
-	rm java-hla13java1.jar
-	rm -Rf logs
-	exit;
-fi
-
-############################################
-### (target) compile #######################
-############################################
-if [ $1 = "compile" ]
-then
-	echo "compiling example federate"
-	cd src
-	javac -cp ./:$RTI_HOME/lib/portico.jar hla13java1/*.java
-	jar -cf ../java-hla13java1.jar hla13java1/*.class
-	cd ../
-	exit;	
-fi
-
-############################################
-### (target) execute #######################
-############################################
-if [ $1 = "execute" ]
-then
-	shift;
-	java -cp ./java-hla13java1.jar:$RTI_HOME/lib/portico.jar hla13java1.ExampleJava1Federate $*
-	exit;
-fi
-
-echo $USAGE
-
Index: codebase/src-java/example/hla13java1/testfom.fed
===================================================================
--- codebase/src-java/example/hla13java1/testfom.fed	(revision 1552)
+++ codebase/src-java/example/hla13java1/testfom.fed	(working copy)
@@ -1,50 +0,0 @@
-;; A comment in the test file, just to show I'm cool ;;
-(FED
-  (Federation Portico-Test)
-  (FEDversion v1.3)
-  (spaces
-    (space TestSpace
-      (dimension TestDimension)
-    )
-    (space OtherSpace
-      (dimension OtherDimension)
-    )
-  )
-  (objects 
-    (class ObjectRoot 
-      (attribute privilegeToDelete reliable timestamp)
-      (class RTIprivate)
-      (class A
-        (attribute aa reliable timestamp TestSpace) ;; more comments!
-        (attribute ab reliable timestamp TestSpace)
-        (attribute ac reliable timestamp TestSpace)
-        (class B
-	        (attribute ba reliable timestamp TestSpace)
-	        (attribute bb reliable timestamp TestSpace)
-	        (attribute bc reliable timestamp TestSpace)
-        )
-      )
-    )
-  )
-  (interactions 
-    (class InteractionRoot reliable timestamp
-      (class RTIprivate reliable timestamp)
-      (class X reliable timestamp TestSpace
-        (parameter xa)
-        (parameter xb)
-        (parameter xc)
-        (class Y reliable timestamp ;; note the absence of any space definition
-          (parameter ya)
-          (parameter yb)
-          (parameter yc)
-          (class Z reliable timestamp TestSpace
-            (parameter za)
-            (parameter zb)
-            (parameter zc)
-          )
-        )
-      )
-    )
-  )
-)
-
