<config xmlns="urn:org:jgroups"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="urn:org:jgroups http://www.jgroups.org/schema/JGroups-3.1.xsd">

    <UDP mcast_group_addr="${portico.jg.multicast.address:239.20.9.13}"
         mcast_port="${portico.jg.multicast.port:20913}"
         mcast_recv_buf_size="${portico.jg.multicast.receiveBuffer:25M}"
         mcast_send_buf_size="${portico.jg.multicast.sendBuffer:640K}"
         ucast_recv_buf_size="8M"
         ucast_send_buf_size="640K"

         ip_mcast="true"
         enable_diagnostics="false"

         bundler_type="transfer-queue"         
         max_bundle_size="${portico.jg.udp.bundling.maxSize:64K}"

         thread_pool.enabled="true"
         thread_pool.min_threads="1"
         thread_pool.max_threads="8"
         thread_pool.keep_alive_time="5000"
    />

    <!-- Discovery protocol. Multicast requests for other memgers on the local network. -->
    <PING break_on_coord_rsp="true"/>

    <!-- Detect when a federate has gone tits-up with a simple heartbeat algorithm.
         We can turn on countMessages which will treat all messages received from a
         federate as a heartbeat, but this add overhead and apparently isn't
         recommended. Leave it off for now -->
    <FD_ALL/>

    <!-- When we think we have a dead federate, as determined by the FD protocols,
         we need to finally verify this. VERIFY_SUSPECT will ping the suspect,
         waiting at most timeout millis before giving up and calling it dead -->
    <VERIFY_SUSPECT timeout="500"/>

    <BARRIER/>

    <!-- NAKACK2 provides the reliable, ordered properties to our comms -->
    <pbcast.NAKACK2 xmit_interval="500"
                    xmit_table_num_rows="100"
                    xmit_table_msgs_per_row="2000"
                    xmit_table_max_compaction_time="30000"
                    use_mcast_xmit="true"
                    discard_delivered_msgs="true"/>

    <!-- UNICAST3 delivers reliable and ordered messaging for unicast UDP messages -->
    <UNICAST3 xmit_table_num_rows="100"
              xmit_table_msgs_per_row="1000"
              xmit_table_max_compaction_time="30000"/>

    <!-- The STABLE protocol helps ensure only the minimum number of messages are
         kept around in case they are needed for retransmission.  -->
    <pbcast.STABLE max_bytes="4M"
                   desired_avg_gossip="60000"/>

    <!-- GMS provides generation Group Memebership Services, handling group join
         requests, view updates and changes and anything membership related -->
    <pbcast.GMS print_local_addr="false"
                join_timeout="${portico.jg.gms.jointimeout:2000}"/>

    <!-- Flow control prevents any single sender overwhelming slower receivers
         with messages which could cause them to be dropped -->
    <UFC max_credits="2M" min_threshold="0.4"/>
    <MFC max_credits="${portico.jg.flow.credits:2M}" 
         min_threshold="${portico.jg.flow.threshold:0.4}"/>

    <!-- FRAG2 breaks up large messages into smaller sizes so they can be send in chunks -->
    <FRAG2 frag_size="${portico.jg.frag.size:60K}"/>

    <!-- RSVP causes message send with the RSVP header to block the sending call
         until all recipients have acknowledged they got it. If ack_on_delivery
         is set true, an ACK is only be sent after the message has been processed -->
    <RSVP resend_interval="2000" timeout="10000"/>

    <!-- FLUSH forces all group members to send all pending messages prior to
         some event such as the joining of a new member -->
    <!--<pbcast.FLUSH retry_timeout="3000"/>-->

    <!-- State Transfer on join - we don't use it, but JG wants it -->
    <pbcast.STATE_TRANSFER />
</config>
